{
  "contracts": {
    "lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "AggregatorV3Interface": {
        "abi": [
          {
            "inputs": [],
            "name": "decimals",
            "outputs": [
              {
                "internalType": "uint8",
                "name": "",
                "type": "uint8"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "description",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint80",
                "name": "_roundId",
                "type": "uint80"
              }
            ],
            "name": "getRoundData",
            "outputs": [
              {
                "internalType": "uint80",
                "name": "roundId",
                "type": "uint80"
              },
              {
                "internalType": "int256",
                "name": "answer",
                "type": "int256"
              },
              {
                "internalType": "uint256",
                "name": "startedAt",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "updatedAt",
                "type": "uint256"
              },
              {
                "internalType": "uint80",
                "name": "answeredInRound",
                "type": "uint80"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "latestRoundData",
            "outputs": [
              {
                "internalType": "uint80",
                "name": "roundId",
                "type": "uint80"
              },
              {
                "internalType": "int256",
                "name": "answer",
                "type": "int256"
              },
              {
                "internalType": "uint256",
                "name": "startedAt",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "updatedAt",
                "type": "uint256"
              },
              {
                "internalType": "uint80",
                "name": "answeredInRound",
                "type": "uint80"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "version",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          }
        ],
        "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":\"AggregatorV3Interface\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3beaa37ee61e4ab615e250fbf01601ae481de843fd0ef55e6b44fd9d5fff8a7\",\"dweb:/ipfs/QmeZUVwd26LzK4Mfp8Zba5JbQNkZFfTzFu1A6FVMMZDg9c\"]}},\"version\":1}",
        "evm": {
          "legacyAssembly": null,
          "assembly": null,
          "bytecode": null,
          "methodIdentifiers": {
            "decimals()": "313ce567",
            "description()": "7284e416",
            "getRoundData(uint80)": "9a6fc8f5",
            "latestRoundData()": "feaf968c",
            "version()": "54fd4d50"
          }
        },
        "irOptimized": ""
      }
    },
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "Ownable": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              }
            ],
            "name": "OwnableInvalidOwner",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "OwnableUnauthorizedAccount",
            "type": "error"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "previousOwner",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
              }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
          },
          {
            "inputs": [],
            "name": "owner",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "renounceOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
              }
            ],
            "name": "transferOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
        "evm": {
          "legacyAssembly": null,
          "assembly": null,
          "bytecode": null,
          "methodIdentifiers": {
            "owner()": "8da5cb5b",
            "renounceOwnership()": "715018a6",
            "transferOwnership(address)": "f2fde38b"
          }
        },
        "irOptimized": ""
      }
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "Context": {
        "abi": [],
        "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
        "evm": {
          "legacyAssembly": null,
          "assembly": null,
          "bytecode": null,
          "methodIdentifiers": {}
        },
        "irOptimized": ""
      }
    },
    "src/P2PBetting.sol": {
      "P2PBetting": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "fee_",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              }
            ],
            "name": "OwnableInvalidOwner",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "OwnableUnauthorizedAccount",
            "type": "error"
          },
          {
            "inputs": [],
            "name": "P2PBetting__AlreadyRetrievedOrBetNonexistent",
            "type": "error"
          },
          {
            "inputs": [],
            "name": "P2PBetting__BetIsFullOrNonexistent",
            "type": "error"
          },
          {
            "inputs": [],
            "name": "P2PBetting__CantEnterBetNow",
            "type": "error"
          },
          {
            "inputs": [],
            "name": "P2PBetting__MaxPriceCantBeZero",
            "type": "error"
          },
          {
            "inputs": [],
            "name": "P2PBetting__NotEnoughEthSent",
            "type": "error"
          },
          {
            "inputs": [],
            "name": "P2PBetting__NumberOfChallengersCantBeZero",
            "type": "error"
          },
          {
            "inputs": [],
            "name": "P2PBetting__OddsMustBeHigherThanOne",
            "type": "error"
          },
          {
            "inputs": [],
            "name": "P2PBetting__OnlyCalledIfTipsterLost",
            "type": "error"
          },
          {
            "inputs": [],
            "name": "P2PBetting__TooMuchEthSent",
            "type": "error"
          },
          {
            "inputs": [],
            "name": "P2PBetting__TransferFailed",
            "type": "error"
          },
          {
            "inputs": [],
            "name": "P2PBetting__UserNotInBet",
            "type": "error"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "previousOwner",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
              }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "uint256",
                "name": "maxPrice",
                "type": "uint256"
              },
              {
                "indexed": true,
                "internalType": "uint256",
                "name": "odds",
                "type": "uint256"
              },
              {
                "indexed": true,
                "internalType": "uint256",
                "name": "maxNumOfPlayers",
                "type": "uint256"
              },
              {
                "indexed": false,
                "internalType": "string",
                "name": "betData",
                "type": "string"
              }
            ],
            "name": "P2PBetting__BetCreated",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "challenger",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "uint256",
                "name": "betID",
                "type": "uint256"
              }
            ],
            "name": "P2PBetting__BetJoined",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "uint256",
                "name": "feesCollected",
                "type": "uint256"
              }
            ],
            "name": "P2PBetting__FeesCollected",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "uint256",
                "name": "oldFee",
                "type": "uint256"
              },
              {
                "indexed": true,
                "internalType": "uint256",
                "name": "newFee",
                "type": "uint256"
              }
            ],
            "name": "P2PBetting__NewFeeSet",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "oracle",
                "type": "address"
              }
            ],
            "name": "P2PBetting__NewOracleSet",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "winner",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "P2PBetting__RewardClaimed",
            "type": "event"
          },
          {
            "inputs": [],
            "name": "collectFees",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "maxNumberOfChallengers_",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "odds_",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "maxEntryFee_",
                "type": "uint256"
              }
            ],
            "name": "createBet",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "betId_",
                "type": "uint256"
              },
              {
                "internalType": "bool",
                "name": "tipsterWon",
                "type": "bool"
              }
            ],
            "name": "endBet",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "betId",
                "type": "uint256"
              }
            ],
            "name": "getBet",
            "outputs": [
              {
                "components": [
                  {
                    "internalType": "uint256",
                    "name": "betId",
                    "type": "uint256"
                  },
                  {
                    "internalType": "address",
                    "name": "tipster",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256",
                    "name": "collateralGiven",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "moneyInBet",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "maxNumberOfChallengers",
                    "type": "uint256"
                  },
                  {
                    "internalType": "address[]",
                    "name": "challengers",
                    "type": "address[]"
                  },
                  {
                    "internalType": "uint256[]",
                    "name": "challengersMoneyBet",
                    "type": "uint256[]"
                  },
                  {
                    "internalType": "uint256",
                    "name": "odds",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "maxEntryFee",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "fee",
                    "type": "uint256"
                  },
                  {
                    "internalType": "bool",
                    "name": "tipsterWon",
                    "type": "bool"
                  },
                  {
                    "internalType": "bool",
                    "name": "locked",
                    "type": "bool"
                  },
                  {
                    "internalType": "bool",
                    "name": "ended",
                    "type": "bool"
                  },
                  {
                    "internalType": "uint256",
                    "name": "timestampWhenEnded",
                    "type": "uint256"
                  }
                ],
                "internalType": "struct P2PBetting.Bet",
                "name": "",
                "type": "tuple"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "betId_",
                "type": "uint256"
              }
            ],
            "name": "getCollateralBack",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "getFee",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "getFeesCollected",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "getNumberOfBets",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "betId_",
                "type": "uint256"
              }
            ],
            "name": "getNumberOfChallenger",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "getOracle",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "user",
                "type": "address"
              }
            ],
            "name": "getProfile",
            "outputs": [
              {
                "components": [
                  {
                    "internalType": "int256",
                    "name": "balanceVariation",
                    "type": "int256"
                  },
                  {
                    "internalType": "uint256[]",
                    "name": "betIdHistory",
                    "type": "uint256[]"
                  }
                ],
                "internalType": "struct P2PBetting.Profile",
                "name": "",
                "type": "tuple"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "betId",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "numberOfChallenger",
                "type": "uint256"
              }
            ],
            "name": "getRewards",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "usdValue_",
                "type": "uint256"
              }
            ],
            "name": "getUsdConversionRate",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "betId_",
                "type": "uint256"
              }
            ],
            "name": "joinBet",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "betId_",
                "type": "uint256"
              }
            ],
            "name": "lockBet",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "owner",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "renounceOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "newFee",
                "type": "uint256"
              }
            ],
            "name": "setFee",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "newOracle",
                "type": "address"
              }
            ],
            "name": "setUsdOracle",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
              }
            ],
            "name": "transferOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "metadata": {
          "optimizer_settings": {
            "is_debug_logging_enabled": false,
            "is_fallback_to_size_enabled": false,
            "is_system_request_memoization_disabled": true,
            "is_verify_each_enabled": false,
            "level_back_end": "Aggressive",
            "level_middle_end": "Aggressive",
            "level_middle_end_size": "Zero"
          },
          "solc_metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"P2PBetting__AlreadyRetrievedOrBetNonexistent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"P2PBetting__BetIsFullOrNonexistent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"P2PBetting__CantEnterBetNow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"P2PBetting__MaxPriceCantBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"P2PBetting__NotEnoughEthSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"P2PBetting__NumberOfChallengersCantBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"P2PBetting__OddsMustBeHigherThanOne\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"P2PBetting__OnlyCalledIfTipsterLost\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"P2PBetting__TooMuchEthSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"P2PBetting__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"P2PBetting__UserNotInBet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"odds\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxNumOfPlayers\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"betData\",\"type\":\"string\"}],\"name\":\"P2PBetting__BetCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betID\",\"type\":\"uint256\"}],\"name\":\"P2PBetting__BetJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feesCollected\",\"type\":\"uint256\"}],\"name\":\"P2PBetting__FeesCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"P2PBetting__NewFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"P2PBetting__NewOracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"P2PBetting__RewardClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxNumberOfChallengers_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"odds_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxEntryFee_\",\"type\":\"uint256\"}],\"name\":\"createBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"betId_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"tipsterWon\",\"type\":\"bool\"}],\"name\":\"endBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"getBet\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tipster\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralGiven\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"moneyInBet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxNumberOfChallengers\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"challengers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"challengersMoneyBet\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"odds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxEntryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"tipsterWon\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestampWhenEnded\",\"type\":\"uint256\"}],\"internalType\":\"struct P2PBetting.Bet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"betId_\",\"type\":\"uint256\"}],\"name\":\"getCollateralBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"betId_\",\"type\":\"uint256\"}],\"name\":\"getNumberOfChallenger\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getProfile\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"balanceVariation\",\"type\":\"int256\"},{\"internalType\":\"uint256[]\",\"name\":\"betIdHistory\",\"type\":\"uint256[]\"}],\"internalType\":\"struct P2PBetting.Profile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfChallenger\",\"type\":\"uint256\"}],\"name\":\"getRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdValue_\",\"type\":\"uint256\"}],\"name\":\"getUsdConversionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"betId_\",\"type\":\"uint256\"}],\"name\":\"joinBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"betId_\",\"type\":\"uint256\"}],\"name\":\"lockBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"setUsdOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/P2PBetting.sol\":\"P2PBetting\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3beaa37ee61e4ab615e250fbf01601ae481de843fd0ef55e6b44fd9d5fff8a7\",\"dweb:/ipfs/QmeZUVwd26LzK4Mfp8Zba5JbQNkZFfTzFu1A6FVMMZDg9c\"]},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"src/P2PBetting.sol\":{\"keccak256\":\"0x03a65c8afc4828f130aa5ad56c949b49cc50c5fb43ae33419e680b386c9a9ede\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://182f878df3a066fb13add82ca27d11b17cb0d72ef14150807fc85472fae2a812\",\"dweb:/ipfs/QmZUZ1L251M2H19d35P5tLet96ZpLGQiJNihEVZtgLG1VD\"]}},\"version\":1}",
          "solc_version": "0.8.20",
          "solc_zkvm_edition": null,
          "zk_version": "1.4.0"
        },
        "evm": {
          "legacyAssembly": null,
          "assembly": "\t.text\n\t.file\t\"P2PBetting.sol:P2PBetting\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[15]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r5\n\tptr.add\tr1, r5, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tadd\t128, r0, r2\n\tst.1\t64, r2\n\tsub.s!\t4, r5, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_9[0], r2, r3\n\tjump.gt\t@.BB0_28\n\tsub.s!\t@CPI0_23[0], r2, r3\n\tjump.gt\t@.BB0_22\n\tsub.s!\t@CPI0_30[0], r2, r3\n\tjump.le\t@.BB0_17\n\tsub.s!\t@CPI0_31[0], r2, r3\n\tjump.eq\t@.BB0_68\n\tsub.s!\t@CPI0_32[0], r2, r3\n\tjump.eq\t@.BB0_96\n\tsub.s!\t@CPI0_33[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r5, r2\n\tsub.s!\t64, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t36, r1, r2\n\tld\tr2, r3\n\tsub!\tr3, r0, r2\n\tadd\t0, r0, r2\n\tadd.ne\t1, r0, r2\n\tadd\tr3, r0, stack-[13]\n\tsub!\tr3, r2, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tst.1\t0, r1\n\tadd\t6, r0, r1\n\tst.1\t32, r1\n\tadd\t64, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\t10, r1, r1\n\tsload\tr1, r2\n\tand\t@CPI0_71[0], r2, r2\n\tor\tstack-[13], r2, r2\n\tor\t@CPI0_59[0], r2, r2\n\tjump\t@.BB0_198\n.BB0_1:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tadd\t159, r5, r2\n\tand\t@CPI0_1[0], r2, r2\n\tst.1\t64, r2\n\tand\t31, r5, r2\n\tshr.s!\t5, r5, r3\n\tjump.eq\t@.BB0_373\n\tadd\tr0, r0, r4\n.BB0_5:\n\tshl.s\t5, r4, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tadd\t128, r6, r6\n\tst.1\tr6, r7\n\tadd\t1, r4, r4\n\tsub!\tr4, r3, r6\n\tjump.lt\t@.BB0_5\n.BB0_373:\n\tsub!\tr2, r0, r4\n\tjump.eq\t@.BB0_7\n\tshl.s\t5, r3, r3\n\tptr.add\tr1, r3, r1\n\tshl.s\t3, r2, r2\n\tadd\t128, r3, r3\n\tld.1\tr3, r4\n\tshl\tr4, r2, r4\n\tshr\tr4, r2, r4\n\tld\tr1, r1\n\tsub\t256, r2, r2\n\tshr\tr1, r2, r1\n\tshl\tr1, r2, r1\n\tor\tr1, r4, r1\n\tst.1\tr3, r1\n.BB0_7:\n\tsub.s!\t64, r5, r1\n\tjump.lt\t@.BB0_2\n\tld.1\t128, r2\n\tld.1\t160, r1\n\tand\t@CPI0_2[0], r1, r6\n\tsub.s!\t@CPI0_2[0], r1, r1\n\tjump.gt\t@.BB0_2\n\tsub!\tr6, r0, r1\n\tjump.ne\t@.BB0_11\n\tld.1\t64, r1\n\tadd\t@CPI0_7[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tst.1\tr2, r0\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_8[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_28:\n\tsub.s!\t@CPI0_10[0], r2, r3\n\tjump.gt\t@.BB0_35\n\tsub.s!\t@CPI0_17[0], r2, r3\n\tjump.le\t@.BB0_30\n\tsub.s!\t@CPI0_18[0], r2, r3\n\tjump.eq\t@.BB0_205\n\tsub.s!\t@CPI0_19[0], r2, r3\n\tjump.eq\t@.BB0_241\n\tsub.s!\t@CPI0_20[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r5, r2\n\tsub.s!\t64, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t36, r1, r2\n\tld\tr2, r2\n\tadd\tr2, r0, stack-[13]\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[12]\n\tst.1\t0, r1\n\tadd\t6, r0, r1\n\tadd\tr1, r0, stack-[11]\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_36[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r3\n\tld.1\t64, r4\n\tsub.s!\t@CPI0_45[0], r4, r1\n\tjump.gt\t@.BB0_45\n\tadd\t448, r4, r1\n\tst.1\t64, r1\n\tsload\tr3, r1\n\tst.1.inc\tr4, r1, r2\n\tadd\t1, r3, r1\n\tsload\tr1, r1\n\tand\t@CPI0_2[0], r1, r1\n\tadd\tr2, r0, stack-[5]\n\tst.1\tr2, r1\n\tadd\t2, r3, r1\n\tsload\tr1, r1\n\tadd\t64, r4, r2\n\tadd\tr2, r0, stack-[3]\n\tst.1\tr2, r1\n\tadd\t3, r3, r1\n\tsload\tr1, r1\n\tadd\t96, r4, r2\n\tadd\tr2, r0, stack-[4]\n\tst.1\tr2, r1\n\tadd\tr4, r0, stack-[9]\n\tadd\t128, r4, r1\n\tadd\t4, r3, r2\n\tsload\tr2, r2\n\tst.1\tr1, r2\n\tadd\tr3, r0, stack-[10]\n\tadd\t5, r3, r1\n\tsload\tr1, r3\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[8]\n\tadd\tr3, r0, stack-[6]\n\tst.1.inc\tr2, r3, r2\n\tadd\tr2, r0, stack-[7]\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_37[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[6], r0, r5\n\tsub!\tr5, r0, r2\n\tadd\tstack-[7], r0, r4\n\tjump.eq\t@.BB0_267\n\tld\tr1, r1\n\tadd\tr0, r0, r2\n.BB0_266:\n\tsload\tr1, r3\n\tand\t@CPI0_2[0], r3, r3\n\tst.1.inc\tr4, r3, r4\n\tadd\t1, r1, r1\n\tadd\t1, r2, r2\n\tsub!\tr2, r5, r3\n\tjump.lt\t@.BB0_266\n.BB0_267:\n\tadd\tstack-[8], r0, r6\n\tsub\tr4, r6, r1\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r4\n\tand\tr1, r4, r2\n\tadd\tr2, r6, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_38[0], r1, r3\n\tadd\tstack-[10], r0, r3\n\tadd\tstack-[9], r0, r5\n\tjump.gt\t@.BB0_45\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_45\n\tadd\tr4, r0, stack-[7]\n\tst.1\t64, r1\n\tadd\t160, r5, r1\n\tadd\tr1, r0, stack-[1]\n\tst.1\tr1, r6\n\tadd\t6, r3, r1\n\tsload\tr1, r3\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[8]\n\tadd\tr3, r0, stack-[2]\n\tst.1.inc\tr2, r3, r2\n\tadd\tr2, r0, stack-[6]\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_37[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[2], r0, r4\n\tsub!\tr4, r0, r2\n\tadd\tstack-[6], r0, r5\n\tjump.eq\t@.BB0_273\n\tld\tr1, r1\n\tadd\tr0, r0, r2\n.BB0_272:\n\tsload\tr1, r3\n\tst.1.inc\tr5, r3, r5\n\tadd\t1, r1, r1\n\tadd\t1, r2, r2\n\tsub!\tr2, r4, r3\n\tjump.lt\t@.BB0_272\n.BB0_273:\n\tadd\tstack-[8], r0, r4\n\tsub\tr5, r4, r1\n\tadd\t31, r1, r1\n\tand\tstack-[7], r1, r2\n\tadd\tr2, r4, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_38[0], r1, r3\n\tadd\tstack-[10], r0, r7\n\tadd\tstack-[9], r0, r8\n\tjump.gt\t@.BB0_45\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_45\n\tst.1\t64, r1\n\tadd\t192, r8, r1\n\tst.1\tr1, r4\n\tadd\t7, r7, r2\n\tsload\tr2, r2\n\tadd\t224, r8, r3\n\tadd\tr3, r0, stack-[8]\n\tst.1\tr3, r2\n\tadd\t8, r7, r2\n\tsload\tr2, r2\n\tadd\t256, r8, r3\n\tst.1\tr3, r2\n\tadd\t9, r7, r2\n\tsload\tr2, r2\n\tadd\t288, r8, r3\n\tadd\tr3, r0, stack-[6]\n\tst.1\tr3, r2\n\tadd\t10, r7, r2\n\tsload\tr2, r2\n\tand!\t65280, r2, r3\n\tadd\t0, r0, r3\n\tadd.ne\t1, r0, r3\n\tadd\t352, r8, r4\n\tst.1\tr4, r3\n\tadd\t384, r8, r3\n\tand!\t@CPI0_46[0], r2, r4\n\tadd\t0, r0, r5\n\tadd.ne\t1, r0, r5\n\tst.1\tr3, r5\n\tand!\t255, r2, r5\n\tadd\t320, r8, r2\n\tadd\t0, r0, r6\n\tadd.ne\t1, r0, r6\n\tst.1\tr2, r6\n\tadd\t416, r8, r6\n\tadd\t11, r7, r7\n\tsload\tr7, r7\n\tst.1\tr6, r7\n\tcontext.caller\tr7\n\tadd\tstack-[5], r0, r6\n\tld.1\tr6, r6\n\tand\t@CPI0_2[0], r6, r6\n\tadd\tr7, r0, stack-[10]\n\tsub!\tr7, r6, r6\n\tjump.ne\t@.BB0_279\n\tsub!\tr5, r0, r5\n\tjump.eq\t@.BB0_279\n\tadd\tstack-[4], r0, r5\n\tld.1\tr5, r5\n\tadd\tr5, r0, stack-[9]\n\tsub!\tr5, r0, r5\n\tjump.eq\t@.BB0_279\n\tsub!\tr4, r0, r4\n\tjump.eq\t@.BB0_279\n\tadd\tstack-[10], r0, r1\n\tst.1\t0, r1\n\tadd\t5, r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_36[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsload\tr1, r3\n\tadd\tstack-[9], r0, r10\n\tadd\tr3, r10, r2\n\tand\t@CPI0_47[0], r2, r5\n\tand\t@CPI0_47[0], r10, r6\n\tadd\t@CPI0_47[0], r0, r4\n\tsub!\tr5, r6, r7\n\tadd\tr0, r0, r7\n\tadd.lt\tr4, r0, r7\n\tadd\tr0, r0, r8\n\tadd.gt\tr4, r0, r8\n\txor\tr5, r6, r5\n\tsub!\tr2, r10, r6\n\tadd\tr0, r0, r6\n\tadd.lt\tr4, r0, r6\n\tsub.s!\t@CPI0_47[0], r5, r9\n\tadd.ne\tr6, r0, r8\n\tsub!\tr2, r10, r6\n\tadd\tr0, r0, r6\n\tadd.ge\tr4, r0, r6\n\tsub.s!\t@CPI0_47[0], r5, r5\n\tadd.ne\tr6, r0, r7\n\tsub.s\t1, r0, r5\n\tsub!\tr3, r5, r5\n\tadd\tr0, r0, r5\n\tadd.gt\tr4, r0, r5\n\tand\t@CPI0_47[0], r3, r6\n\tsub.s!\t@CPI0_47[0], r6, r9\n\tadd.ge\tr0, r0, r4\n\txor\t@CPI0_47[0], r6, r6\n\tsub.s!\t@CPI0_47[0], r6, r6\n\tadd.ne\tr5, r0, r4\n\tsub!\tr7, r0, r5\n\tadd\t0, r0, r5\n\tadd.ne\t1, r0, r5\n\tshr.s\t255, r3, r3\n\tand\tr3, r5, r3\n\tsub!\tr8, r0, r5\n\tadd\t0, r0, r5\n\tadd.ne\t1, r0, r5\n\tsub!\tr4, r0, r4\n\tadd\t0, r0, r4\n\tadd.ne\t1, r0, r4\n\tand\tr4, r5, r4\n\tand\t1, r4, r4\n\tor!\tr3, r4, r3\n\tjump.ne\t@.BB0_89\n\tsstore\tr1, r2\n\tadd\tstack-[3], r0, r1\n\tld.1\tr1, r3\n\tadd\tstack-[4], r0, r1\n\tld.1\tr1, r1\n\tadd\tr1, r0, stack-[13]\n\tsub!\tr1, r3, r1\n\tjump.lt\t@.BB0_89\n\tcontext.sp\tr1\n\tsub.s\t15, r1, r1\n\tshl.s\t5, r1, r1\n\tsub!\tstack-[13], r3, r2\n\tadd\tr0, r0, r2\n\tjump.eq\t@.BB0_322\n\tadd\tstack-[8], r0, r1\n\tld.1\tr1, r1\n\tsub\tstack-[13], r3, r2\n\tmul\tr1, r2, r3, r4\n\tdiv\tr3, r2, r2, r4\n\tsub!\tr2, r1, r1\n\tjump.ne\t@.BB0_89\n\tcontext.sp\tr1\n\tsub.s\t14, r1, r1\n\tshl.s\t5, r1, r1\n\tsub!\tr3, r0, r2\n\tadd\tr0, r0, r2\n\tjump.eq\t@.BB0_322\n\tcontext.sp\tr1\n\tsub.s\t14, r1, r1\n\tshl.s\t5, r1, r1\n\tadd\tstack-[6], r0, r2\n\tld.1\tr2, r4\n\tmul\tr4, r3, r2, r5\n\tdiv\tr2, r3, r3, r5\n\tsub!\tr3, r4, r3\n\tjump.ne\t@.BB0_89\n.BB0_322:\n\tdiv.s\t@CPI0_48[0], r2, r3, r2\n\tshr.s\t5, r1, r1\n\tadd\tr3, r0, stack[r1]\n\tadd\tr3, r0, stack-[9]\n\tsub!\tstack-[13], r3, r1\n\tjump.lt\t@.BB0_89\n\tadd\tstack-[12], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[11], r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_36[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\t3, r1, r1\n\tsstore\tr1, r0\n\tadd\t3, r0, r1\n\tsload\tr1, r3\n\tadd\tstack-[9], r3, r2\n\tsub!\tr2, r3, r3\n\tadd\t0, r0, r3\n\tadd.lt\t1, r0, r3\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_89\n\tadd\tstack-[9], r0, r4\n\tsub\tstack-[13], r4, stack-[12]\n\tsstore\tr1, r2\n\tadd\tstack-[10], r0, r1\n\tsub.s!\t4, r1, r1\n\tjump.eq\t@.BB0_335\n\tadd\t@CPI0_49[0], r0, r1\n\tadd\tstack-[9], r0, r3\n\tsub!\tstack-[13], r3, r2\n\tadd.ne\tr0, r0, r1\n\tjump.ne\t@.BB0_329\n\tadd\tstack-[10], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tjump\t@.BB0_327\n.BB0_22:\n\tsub.s!\t@CPI0_24[0], r2, r3\n\tjump.le\t@.BB0_23\n\tsub.s!\t@CPI0_25[0], r2, r3\n\tjump.eq\t@.BB0_146\n\tsub.s!\t@CPI0_26[0], r2, r3\n\tjump.eq\t@.BB0_148\n\tsub.s!\t@CPI0_27[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r5, r2\n\tsub.s!\t96, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t68, r1, r2\n\tld\tr2, r6\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r5\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r7\n\tsub.s!\t1000, r7, r1\n\tjump.gt\t@.BB0_156\n\tadd\t@CPI0_69[0], r0, r1\n\tjump\t@.BB0_155\n.BB0_35:\n\tsub.s!\t@CPI0_11[0], r2, r3\n\tjump.le\t@.BB0_36\n\tsub.s!\t@CPI0_12[0], r2, r3\n\tjump.eq\t@.BB0_341\n\tsub.s!\t@CPI0_13[0], r2, r3\n\tjump.eq\t@.BB0_343\n\tsub.s!\t@CPI0_14[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r5, r2\n\tsub.s!\t32, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tst.1\t0, r1\n\tadd\t6, r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_36[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\t5, r1, r1\n\tsload\tr1, r3\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[12]\n\tadd\tr3, r0, stack-[11]\n\tst.1.inc\tr2, r3, r2\n\tadd\tr2, r0, stack-[13]\n\tst.1\t0, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_37[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[11], r0, r5\n\tsub!\tr5, r0, r2\n\tadd\tstack-[13], r0, r6\n\tadd\tr6, r0, r2\n\tjump.eq\t@.BB0_358\n\tld\tr1, r1\n\tadd\tr6, r0, r2\n\tadd\tr0, r0, r3\n.BB0_357:\n\tsload\tr1, r4\n\tand\t@CPI0_2[0], r4, r4\n\tst.1.inc\tr2, r4, r2\n\tadd\t1, r1, r1\n\tadd\t1, r3, r3\n\tsub!\tr3, r5, r4\n\tjump.lt\t@.BB0_357\n.BB0_358:\n\tadd\tstack-[12], r0, r4\n\tsub\tr2, r4, r1\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r4, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_38[0], r1, r3\n\tjump.gt\t@.BB0_45\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_45\n\tst.1\t64, r1\n\tld.1\tr4, r2\n\tsub!\tr2, r0, r3\n\tjump.eq\t@.BB0_362\n\tcontext.caller\tr3\n\tadd\tr0, r0, r4\n.BB0_364:\n\tshl.s\t5, r4, r5\n\tadd\tr5, r6, r5\n\tld.1\tr5, r5\n\tand\t@CPI0_2[0], r5, r5\n\tsub!\tr5, r3, r5\n\tjump.eq\t@.BB0_366\n\tadd\t1, r4, r4\n\tsub!\tr4, r2, r5\n\tjump.lt\t@.BB0_364\n.BB0_362:\n\tadd\t@CPI0_40[0], r0, r2\n\tjump\t@.BB0_363\n.BB0_11:\n\tadd\tr2, r0, stack-[13]\n\tsload\tr0, r2\n\tand\t@CPI0_3[0], r2, r1\n\tor\tr1, r6, r1\n\tsstore\tr0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tshl.s\t192, r3, r1\n\tor\t@CPI0_4[0], r1, r1\n\tand\t@CPI0_2[0], r2, r5\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_5[0], r0, r4\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tadd\tstack-[13], r0, r2\n\tjump.eq\t@.BB0_2\n\tadd\t2, r0, r1\n\tsstore\tr1, r2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_6[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_17:\n\tsub.s!\t@CPI0_34[0], r2, r3\n\tjump.eq\t@.BB0_41\n\tsub.s!\t@CPI0_35[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r5, r2\n\tsub.s!\t32, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_2[0], r1, r2\n\tjump.gt\t@.BB0_2\n\tadd\t192, r0, r2\n\tadd\tr2, r0, stack-[12]\n\tst.1\t64, r2\n\tst.1\t128, r0\n\tadd\t96, r0, r2\n\tst.1\t160, r2\n\tst.1\t0, r1\n\tadd\t5, r0, r1\n\tst.1\t32, r1\n\tadd\t64, r0, r2\n\tadd\tr2, r0, stack-[13]\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tr1, r0, stack-[11]\n\tadd\tstack-[12], r0, r1\n\tnear_call\tr0, @finalize_allocation_17596, @DEFAULT_UNWIND\n\tadd\tstack-[11], r0, r2\n\tsload\tr2, r1\n\tst.1\t192, r1\n\tadd\t1, r2, r1\n\tnear_call\tr0, @copy_array_from_storage_to_memory_array_uint256_dyn, @DEFAULT_UNWIND\n\tst.1\t224, r1\n\tadd\t32, r0, r1\n\tld.1\t64, r4\n\tadd\tr4, r0, stack-[12]\n\tst.1.inc\tr4, r1, r1\n\tld.1\t192, r2\n\tst.1\tr1, r2\n\tadd\t64, r4, r2\n\tld.1\t224, r1\n\tadd\tstack-[13], r0, r3\n\tst.1\tr2, r3\n\tadd\t96, r4, r2\n\tnear_call\tr0, @abi_encode_array_uint256_dyn, @DEFAULT_UNWIND\n\tadd\tstack-[12], r0, r4\n.BB0_63:\n\tsub\tr1, r4, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_30:\n\tsub.s!\t@CPI0_21[0], r2, r3\n\tjump.eq\t@.BB0_195\n\tsub.s!\t@CPI0_22[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r5, r2\n\tsub.s!\t32, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tand\t@CPI0_2[0], r1, r5\n\tsub.s!\t@CPI0_2[0], r1, r1\n\tjump.gt\t@.BB0_2\n\tsload\tr0, r1\n\tand\t@CPI0_2[0], r1, r2\n\tcontext.caller\tr1\n\tsub!\tr2, r1, r2\n\tjump.ne\t@.BB0_203\n\tadd\t1, r0, r1\n\tsload\tr1, r2\n\tand\t@CPI0_3[0], r2, r2\n\tor\tr2, r5, r2\n\tsstore\tr1, r2\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t2, r0, r3\n\tadd\t@CPI0_57[0], r0, r4\n\tjump\t@.BB0_258\n.BB0_23:\n\tsub.s!\t@CPI0_28[0], r2, r3\n\tjump.eq\t@.BB0_137\n\tsub.s!\t@CPI0_29[0], r2, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r1\n\tand\t@CPI0_2[0], r1, r5\n\tcontext.caller\tr2\n\tsub!\tr5, r2, r3\n\tjump.ne\t@.BB0_144\n\tand\t@CPI0_3[0], r1, r1\n\tsstore\tr0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_5[0], r0, r4\n\tadd\tr0, r0, r6\n\tjump\t@.BB0_313\n.BB0_36:\n\tsub.s!\t@CPI0_15[0], r2, r1\n\tjump.eq\t@.BB0_336\n\tsub.s!\t@CPI0_16[0], r2, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t3, r0, r1\n\tjump\t@.BB0_338\n.BB0_96:\n\tsub.s\t4, r5, r2\n\tsub.s!\t32, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[13]\n\tst.1\t0, r1\n\tadd\t6, r0, r1\n\tadd\tr1, r0, stack-[12]\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_36[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r3\n\tld.1\t64, r4\n\tsub.s!\t@CPI0_45[0], r4, r1\n\tjump.gt\t@.BB0_45\n\tadd\t448, r4, r1\n\tst.1\t64, r1\n\tsload\tr3, r1\n\tst.1.inc\tr4, r1, r1\n\tadd\t1, r3, r2\n\tsload\tr2, r2\n\tand\t@CPI0_2[0], r2, r2\n\tst.1\tr1, r2\n\tadd\t2, r3, r1\n\tsload\tr1, r1\n\tadd\t64, r4, r2\n\tst.1\tr2, r1\n\tadd\t3, r3, r1\n\tsload\tr1, r1\n\tadd\t96, r4, r2\n\tst.1\tr2, r1\n\tadd\tr4, r0, stack-[10]\n\tadd\t128, r4, r2\n\tadd\t4, r3, r1\n\tsload\tr1, r1\n\tadd\tr2, r0, stack-[6]\n\tst.1\tr2, r1\n\tadd\tr3, r0, stack-[11]\n\tadd\t5, r3, r1\n\tsload\tr1, r3\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[9]\n\tadd\tr3, r0, stack-[7]\n\tst.1.inc\tr2, r3, r2\n\tadd\tr2, r0, stack-[8]\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_37[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[7], r0, r5\n\tsub!\tr5, r0, r2\n\tadd\tstack-[8], r0, r4\n\tjump.eq\t@.BB0_103\n\tld\tr1, r1\n\tadd\tr0, r0, r2\n.BB0_102:\n\tsload\tr1, r3\n\tand\t@CPI0_2[0], r3, r3\n\tst.1.inc\tr4, r3, r4\n\tadd\t1, r1, r1\n\tadd\t1, r2, r2\n\tsub!\tr2, r5, r3\n\tjump.lt\t@.BB0_102\n.BB0_103:\n\tadd\tstack-[9], r0, r6\n\tsub\tr4, r6, r1\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r5\n\tand\tr1, r5, r2\n\tadd\tr2, r6, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_38[0], r1, r3\n\tadd\tstack-[11], r0, r3\n\tadd\tstack-[10], r0, r4\n\tjump.gt\t@.BB0_45\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_45\n\tadd\tr5, r0, stack-[8]\n\tst.1\t64, r1\n\tadd\t160, r4, r1\n\tadd\tr1, r0, stack-[4]\n\tst.1\tr1, r6\n\tadd\t6, r3, r1\n\tsload\tr1, r3\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[9]\n\tadd\tr3, r0, stack-[5]\n\tst.1.inc\tr2, r3, r2\n\tadd\tr2, r0, stack-[7]\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_37[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[5], r0, r4\n\tsub!\tr4, r0, r2\n\tadd\tstack-[7], r0, r5\n\tjump.eq\t@.BB0_109\n\tld\tr1, r1\n\tadd\tr0, r0, r2\n.BB0_108:\n\tsload\tr1, r3\n\tst.1.inc\tr5, r3, r5\n\tadd\t1, r1, r1\n\tadd\t1, r2, r2\n\tsub!\tr2, r4, r3\n\tjump.lt\t@.BB0_108\n.BB0_109:\n\tadd\tstack-[9], r0, r4\n\tsub\tr5, r4, r1\n\tadd\t31, r1, r1\n\tand\tstack-[8], r1, r2\n\tadd\tr2, r4, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_38[0], r1, r3\n\tadd\tstack-[11], r0, r5\n\tadd\tstack-[10], r0, r6\n\tjump.gt\t@.BB0_45\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_45\n\tst.1\t64, r1\n\tadd\t192, r6, r1\n\tst.1\tr1, r4\n\tadd\t7, r5, r1\n\tsload\tr1, r1\n\tadd\t224, r6, r2\n\tst.1\tr2, r1\n\tadd\t8, r5, r1\n\tsload\tr1, r2\n\tadd\t256, r6, r1\n\tst.1\tr1, r2\n\tadd\t9, r5, r2\n\tsload\tr2, r2\n\tadd\t288, r6, r3\n\tst.1\tr3, r2\n\tadd\t10, r5, r2\n\tsload\tr2, r2\n\tand!\t255, r2, r3\n\tadd\t0, r0, r3\n\tadd.ne\t1, r0, r3\n\tadd\t320, r6, r4\n\tst.1\tr4, r3\n\tand!\t@CPI0_46[0], r2, r3\n\tadd\t0, r0, r4\n\tadd.ne\t1, r0, r4\n\tadd\t384, r6, r3\n\tst.1\tr3, r4\n\tand!\t65280, r2, r2\n\tadd\t0, r0, r4\n\tadd.ne\t1, r0, r4\n\tadd\t352, r6, r2\n\tst.1\tr2, r4\n\tadd\t416, r6, r4\n\tadd\t11, r5, r5\n\tsload\tr5, r5\n\tst.1\tr4, r5\n\tadd\tstack-[6], r0, r4\n\tld.1\tr4, r4\n\tadd\tstack-[4], r0, r5\n\tld.1\tr5, r5\n\tld.1\tr5, r5\n\tsub!\tr4, r5, r4\n\tjump.le\t@.BB0_112\n\tld.1\tr1, r1\n\tcontext.get_context_u128\tr4\n\tadd\tr4, r0, stack-[11]\n\tsub!\tr4, r1, r1\n\tjump.le\t@.BB0_115\n\tld.1\t64, r1\n\tadd\t@CPI0_75[0], r0, r2\n\tjump\t@.BB0_363\n.BB0_241:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tadd\t3, r0, r9\n\tsload\tr9, r3\n\tsload\tr0, r4\n\tcontext.gas_left\tr2\n\tand\t@CPI0_2[0], r4, r4\n\tsub.s!\t4, r4, r6\n\tjump.ne\t@.BB0_243\n\tptr.add\tr1, r5, r1\n\tadd\t1, r0, r2\n\tadd\tstack[@returndatasize], r0, r3\n\tjump\t@.BB0_245\n.BB0_148:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r1\n\tjump\t@.BB0_150\n.BB0_343:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r5, r2\n\tsub.s!\t32, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tand\t@CPI0_2[0], r1, r6\n\tsub.s!\t@CPI0_2[0], r1, r1\n\tjump.gt\t@.BB0_2\n\tsload\tr0, r1\n\tand\t@CPI0_2[0], r1, r5\n\tcontext.caller\tr2\n\tsub!\tr5, r2, r3\n\tjump.ne\t@.BB0_347\n\tsub!\tr6, r0, r2\n\tjump.ne\t@.BB0_350\n\tadd\t@CPI0_7[0], r0, r1\n\tst.1\t128, r1\n\tst.1\t132, r0\n\tadd\t@CPI0_43[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_68:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r5, r2\n\tsub.s!\t32, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[13]\n\tadd\t1, r0, r1\n\tsload\tr1, r2\n\tadd\t@CPI0_76[0], r0, r1\n\tst.1\t128, r1\n\tcontext.gas_left\tr1\n\tand\t@CPI0_2[0], r2, r2\n\tsub.s!\t4, r2, r3\n\tjump.ne\t@.BB0_72\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t160, r3, r1\n\tadd\tr3, r0, r4\n\tadd.ge\t160, r0, r4\n\tjump\t@.BB0_82\n.BB0_205:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r5, r2\n\tsub.s!\t32, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[13]\n\tst.1\t0, r1\n\tadd\t6, r0, r1\n\tadd\tr1, r0, stack-[12]\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_36[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r3\n\tld.1\t64, r4\n\tsub.s!\t@CPI0_45[0], r4, r1\n\tjump.gt\t@.BB0_45\n\tadd\t448, r4, r1\n\tst.1\t64, r1\n\tsload\tr3, r1\n\tst.1.inc\tr4, r1, r2\n\tadd\t1, r3, r1\n\tsload\tr1, r1\n\tand\t@CPI0_2[0], r1, r1\n\tadd\tr2, r0, stack-[4]\n\tst.1\tr2, r1\n\tadd\t2, r3, r1\n\tsload\tr1, r1\n\tadd\t64, r4, r2\n\tadd\tr2, r0, stack-[6]\n\tst.1\tr2, r1\n\tadd\t3, r3, r1\n\tsload\tr1, r1\n\tadd\t96, r4, r2\n\tadd\tr2, r0, stack-[5]\n\tst.1\tr2, r1\n\tadd\tr4, r0, stack-[10]\n\tadd\t128, r4, r1\n\tadd\t4, r3, r2\n\tsload\tr2, r2\n\tst.1\tr1, r2\n\tadd\tr3, r0, stack-[11]\n\tadd\t5, r3, r1\n\tsload\tr1, r3\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[9]\n\tadd\tr3, r0, stack-[7]\n\tst.1.inc\tr2, r3, r2\n\tadd\tr2, r0, stack-[8]\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_37[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[7], r0, r5\n\tsub!\tr5, r0, r2\n\tadd\tstack-[8], r0, r4\n\tjump.eq\t@.BB0_213\n\tld\tr1, r1\n\tadd\tr0, r0, r2\n.BB0_212:\n\tsload\tr1, r3\n\tand\t@CPI0_2[0], r3, r3\n\tst.1.inc\tr4, r3, r4\n\tadd\t1, r1, r1\n\tadd\t1, r2, r2\n\tsub!\tr2, r5, r3\n\tjump.lt\t@.BB0_212\n.BB0_213:\n\tadd\tstack-[9], r0, r6\n\tsub\tr4, r6, r1\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r5\n\tand\tr1, r5, r2\n\tadd\tr2, r6, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_38[0], r1, r3\n\tadd\tstack-[11], r0, r3\n\tadd\tstack-[10], r0, r4\n\tjump.gt\t@.BB0_45\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_45\n\tadd\tr5, r0, stack-[8]\n\tst.1\t64, r1\n\tadd\t160, r4, r1\n\tst.1\tr1, r6\n\tadd\t6, r3, r1\n\tsload\tr1, r3\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[9]\n\tadd\tr3, r0, stack-[3]\n\tst.1.inc\tr2, r3, r2\n\tadd\tr2, r0, stack-[7]\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_37[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[3], r0, r4\n\tsub!\tr4, r0, r2\n\tadd\tstack-[7], r0, r5\n\tjump.eq\t@.BB0_219\n\tld\tr1, r1\n\tadd\tr0, r0, r2\n.BB0_218:\n\tsload\tr1, r3\n\tst.1.inc\tr5, r3, r5\n\tadd\t1, r1, r1\n\tadd\t1, r2, r2\n\tsub!\tr2, r4, r3\n\tjump.lt\t@.BB0_218\n.BB0_219:\n\tadd\tstack-[9], r0, r4\n\tsub\tr5, r4, r1\n\tadd\t31, r1, r1\n\tand\tstack-[8], r1, r2\n\tadd\tr2, r4, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_38[0], r1, r3\n\tadd\tstack-[11], r0, r5\n\tadd\tstack-[10], r0, r6\n\tjump.gt\t@.BB0_45\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_45\n\tst.1\t64, r1\n\tadd\t192, r6, r1\n\tst.1\tr1, r4\n\tadd\t7, r5, r1\n\tsload\tr1, r2\n\tadd\t224, r6, r1\n\tst.1\tr1, r2\n\tadd\t8, r5, r2\n\tsload\tr2, r2\n\tadd\t256, r6, r3\n\tst.1\tr3, r2\n\tadd\t9, r5, r2\n\tsload\tr2, r2\n\tadd\t288, r6, r3\n\tst.1\tr3, r2\n\tadd\t10, r5, r2\n\tsload\tr2, r2\n\tand!\t65280, r2, r3\n\tadd\t0, r0, r3\n\tadd.ne\t1, r0, r3\n\tadd\t352, r6, r4\n\tst.1\tr4, r3\n\tand!\t@CPI0_46[0], r2, r3\n\tadd\t0, r0, r3\n\tadd.ne\t1, r0, r3\n\tadd\t384, r6, r4\n\tst.1\tr4, r3\n\tand!\t255, r2, r2\n\tadd\t0, r0, r2\n\tadd.ne\t1, r0, r2\n\tadd\t320, r6, r3\n\tst.1\tr3, r2\n\tadd\t416, r6, r2\n\tadd\t11, r5, r5\n\tsload\tr5, r5\n\tst.1\tr2, r5\n\tadd\tstack-[6], r0, r2\n\tld.1\tr2, r2\n\tsub!\tr2, r0, r5\n\tjump.eq\t@.BB0_222\n\tld.1\tr4, r4\n\tsub!\tr4, r0, r4\n\tjump.eq\t@.BB0_225\n\tld.1\tr3, r3\n\tsub!\tr3, r0, r3\n\tjump.ne\t@.BB0_225\n\tadd\tstack-[5], r0, r3\n\tld.1\tr3, r3\n\tadd\tr3, r0, stack-[11]\n\tsub!\tr3, r2, r3\n\tjump.lt\t@.BB0_89\n\tld.1\tr1, r3\n\tsub\tstack-[11], r2, r4\n\tmul\tr3, r4, r1, r5\n\tsub!\tstack-[11], r2, r2\n\tjump.eq\t@.BB0_229\n\tdiv\tr1, r4, r2, r4\n\tsub!\tr2, r3, r2\n\tjump.ne\t@.BB0_89\n.BB0_229:\n\tdiv.s\t1000, r1, r2, r1\n\tadd\tr2, r0, stack-[10]\n\tsub!\tstack-[11], r2, r1\n\tjump.lt\t@.BB0_89\n\tadd\tstack-[13], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[12], r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_36[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\t2, r1, r1\n\tsstore\tr1, r0\n\tadd\tstack-[4], r0, r1\n\tld.1\tr1, r1\n\tand\t@CPI0_2[0], r1, r4\n\tsub.s!\t4, r4, r1\n\tjump.eq\t@.BB0_132\n\tadd\t@CPI0_49[0], r0, r1\n\tadd\tstack-[10], r0, r3\n\tsub!\tstack-[11], r3, r2\n\tadd.ne\tr0, r0, r1\n\tjump.ne\t@.BB0_235\n\tadd\tr4, r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tjump\t@.BB0_233\n.BB0_146:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t1, r0, r1\n\tsload\tr1, r1\n.BB0_150:\n\tand\t@CPI0_2[0], r1, r1\n\tjump\t@.BB0_151\n.BB0_341:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t4, r0, r1\n\tjump\t@.BB0_338\n.BB0_41:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r5, r2\n\tsub.s!\t32, r2, r2\n\tjump.lt\t@.BB0_2\n\tadd\t576, r0, r2\n\tst.1\t64, r2\n\tst.1\t128, r0\n\tst.1\t160, r0\n\tst.1\t192, r0\n\tst.1\t224, r0\n\tst.1\t256, r0\n\tadd\t96, r0, r2\n\tst.1\t288, r2\n\tst.1\t320, r2\n\tptr.add.s\t4, r1, r1\n\tst.1\t352, r0\n\tst.1\t384, r0\n\tst.1\t416, r0\n\tst.1\t448, r0\n\tst.1\t480, r0\n\tst.1\t512, r0\n\tst.1\t544, r0\n\tld\tr1, r1\n\tst.1\t0, r1\n\tadd\t6, r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_36[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r3\n\tld.1\t64, r2\n\tsub.s!\t@CPI0_80[0], r2, r1\n\tjump.ge\t@.BB0_45\n\tadd\t448, r2, r1\n\tst.1\t64, r1\n\tsload\tr3, r1\n\tst.1.inc\tr2, r1, r4\n\tadd\t1, r3, r1\n\tsload\tr1, r1\n\tand\t@CPI0_2[0], r1, r1\n\tadd\tr4, r0, stack-[8]\n\tst.1\tr4, r1\n\tadd\t2, r3, r1\n\tsload\tr1, r1\n\tadd\t64, r2, r4\n\tadd\tr4, r0, stack-[7]\n\tst.1\tr4, r1\n\tadd\t3, r3, r1\n\tsload\tr1, r1\n\tadd\t96, r2, r4\n\tadd\tr4, r0, stack-[5]\n\tst.1\tr4, r1\n\tadd\tr2, r0, stack-[13]\n\tadd\t128, r2, r2\n\tadd\t4, r3, r1\n\tsload\tr1, r1\n\tadd\tr2, r0, stack-[6]\n\tst.1\tr2, r1\n\tadd\tr3, r0, stack-[12]\n\tadd\t5, r3, r1\n\tsload\tr1, r3\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[11]\n\tadd\tr3, r0, stack-[9]\n\tst.1.inc\tr2, r3, r2\n\tadd\tr2, r0, stack-[10]\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_37[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[9], r0, r5\n\tsub!\tr5, r0, r2\n\tadd\tstack-[10], r0, r4\n\tjump.eq\t@.BB0_51\n\tld\tr1, r1\n\tadd\tr0, r0, r2\n.BB0_50:\n\tsload\tr1, r3\n\tand\t@CPI0_2[0], r3, r3\n\tst.1.inc\tr4, r3, r4\n\tadd\t1, r1, r1\n\tadd\t1, r2, r2\n\tsub!\tr2, r5, r3\n\tjump.lt\t@.BB0_50\n.BB0_51:\n\tadd\tstack-[11], r0, r6\n\tsub\tr4, r6, r1\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r5\n\tand\tr1, r5, r2\n\tadd\tr2, r6, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_38[0], r1, r3\n\tadd\tstack-[13], r0, r3\n\tadd\tstack-[12], r0, r4\n\tjump.gt\t@.BB0_45\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_45\n\tadd\tr5, r0, stack-[10]\n\tst.1\t64, r1\n\tadd\t160, r3, r1\n\tadd\tr1, r0, stack-[3]\n\tst.1\tr1, r6\n\tadd\t6, r4, r1\n\tsload\tr1, r3\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[11]\n\tadd\tr3, r0, stack-[4]\n\tst.1.inc\tr2, r3, r2\n\tadd\tr2, r0, stack-[9]\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_37[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[4], r0, r5\n\tsub!\tr5, r0, r2\n\tadd\tstack-[9], r0, r4\n\tjump.eq\t@.BB0_57\n\tld\tr1, r1\n\tadd\tr0, r0, r2\n.BB0_56:\n\tsload\tr1, r3\n\tst.1.inc\tr4, r3, r4\n\tadd\t1, r1, r1\n\tadd\t1, r2, r2\n\tsub!\tr2, r5, r3\n\tjump.lt\t@.BB0_56\n.BB0_57:\n\tadd\tstack-[11], r0, r6\n\tsub\tr4, r6, r1\n\tadd\t31, r1, r1\n\tand\tstack-[10], r1, r2\n\tadd\tr2, r6, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_38[0], r1, r3\n\tadd\tstack-[13], r0, r4\n\tadd\tstack-[12], r0, r5\n\tjump.gt\t@.BB0_45\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_45\n\tst.1\t64, r1\n\tadd\t192, r4, r1\n\tst.1\tr1, r6\n\tadd\t7, r5, r2\n\tsload\tr2, r2\n\tadd\t224, r4, r3\n\tadd\tr3, r0, stack-[10]\n\tst.1\tr3, r2\n\tadd\t8, r5, r2\n\tsload\tr2, r2\n\tadd\t256, r4, r3\n\tadd\tr3, r0, stack-[9]\n\tst.1\tr3, r2\n\tadd\t9, r5, r2\n\tsload\tr2, r2\n\tadd\t288, r4, r3\n\tadd\tr3, r0, stack-[4]\n\tst.1\tr3, r2\n\tadd\t10, r5, r2\n\tsload\tr2, r2\n\tand!\t@CPI0_46[0], r2, r3\n\tadd\t0, r0, r3\n\tadd.ne\t1, r0, r3\n\tadd\t384, r4, r6\n\tadd\tr6, r0, stack-[11]\n\tst.1\tr6, r3\n\tand!\t65280, r2, r3\n\tadd\t0, r0, r3\n\tadd.ne\t1, r0, r3\n\tadd\t352, r4, r6\n\tadd\tr6, r0, stack-[2]\n\tst.1\tr6, r3\n\tand!\t255, r2, r2\n\tadd\t0, r0, r2\n\tadd.ne\t1, r0, r2\n\tadd\t320, r4, r3\n\tadd\tr3, r0, stack-[1]\n\tst.1\tr3, r2\n\tadd\t11, r5, r2\n\tsload\tr2, r2\n\tadd\t416, r4, r3\n\tadd\tr3, r0, stack-[12]\n\tst.1\tr3, r2\n\tadd\t32, r0, r2\n\tld.1\t64, r7\n\tst.1.inc\tr7, r2, r2\n\tld.1\tr4, r3\n\tst.1\tr2, r3\n\tadd\tstack-[8], r0, r2\n\tld.1\tr2, r2\n\tand\t@CPI0_2[0], r2, r2\n\tadd\t64, r7, r3\n\tst.1\tr3, r2\n\tadd\tstack-[7], r0, r2\n\tld.1\tr2, r2\n\tadd\t96, r7, r3\n\tst.1\tr3, r2\n\tadd\tstack-[5], r0, r2\n\tld.1\tr2, r2\n\tadd\t128, r7, r3\n\tst.1\tr3, r2\n\tadd\tstack-[6], r0, r2\n\tld.1\tr2, r2\n\tadd\t160, r7, r3\n\tst.1\tr3, r2\n\tadd\tstack-[3], r0, r2\n\tld.1\tr2, r3\n\tadd\t448, r0, r2\n\tadd\t192, r7, r4\n\tst.1\tr4, r2\n\tadd\t480, r7, r2\n\tld.1\tr3, r4\n\tst.1\tr2, r4\n\tadd\t512, r7, r2\n\tsub!\tr4, r0, r5\n\tjump.eq\t@.BB0_62\n\tadd\tr0, r0, r5\n.BB0_61:\n\tadd\t32, r3, r3\n\tld.1\tr3, r6\n\tand\t@CPI0_2[0], r6, r6\n\tst.1.inc\tr2, r6, r2\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_61\n.BB0_62:\n\tsub\tr2, r7, r3\n\tsub.s\t32, r3, r3\n\tld.1\tr1, r1\n\tadd\t224, r7, r4\n\tst.1\tr4, r3\n\tadd\tr7, r0, stack-[13]\n\tnear_call\tr0, @abi_encode_array_uint256_dyn, @DEFAULT_UNWIND\n\tadd\tstack-[10], r0, r2\n\tld.1\tr2, r2\n\tadd\tstack-[13], r0, r4\n\tadd\t256, r4, r3\n\tst.1\tr3, r2\n\tadd\tstack-[9], r0, r2\n\tld.1\tr2, r2\n\tadd\t288, r4, r3\n\tst.1\tr3, r2\n\tadd\tstack-[4], r0, r2\n\tld.1\tr2, r2\n\tadd\t320, r4, r3\n\tst.1\tr3, r2\n\tadd\tstack-[1], r0, r2\n\tld.1\tr2, r2\n\tsub!\tr2, r0, r2\n\tadd\t0, r0, r2\n\tadd.ne\t1, r0, r2\n\tadd\t352, r4, r3\n\tst.1\tr3, r2\n\tadd\tstack-[2], r0, r2\n\tld.1\tr2, r2\n\tsub!\tr2, r0, r2\n\tadd\t0, r0, r2\n\tadd.ne\t1, r0, r2\n\tadd\t384, r4, r3\n\tst.1\tr3, r2\n\tadd\tstack-[11], r0, r2\n\tld.1\tr2, r2\n\tsub!\tr2, r0, r2\n\tadd\t0, r0, r2\n\tadd.ne\t1, r0, r2\n\tadd\t416, r4, r3\n\tst.1\tr3, r2\n\tadd\tstack-[12], r0, r2\n\tld.1\tr2, r2\n\tadd\t448, r4, r3\n\tst.1\tr3, r2\n\tjump\t@.BB0_63\n.BB0_195:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r5, r2\n\tsub.s!\t32, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tst.1\t0, r1\n\tadd\t6, r0, r1\n\tst.1\t32, r1\n\tadd\t64, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\t10, r1, r1\n\tsload\tr1, r3\n\tand\t@CPI0_58[0], r3, r2\n\tor\t256, r2, r2\n.BB0_198:\n\tsstore\tr1, r2\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_137:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r5, r2\n\tsub.s!\t32, r2, r2\n\tjump.lt\t@.BB0_2\n\tsload\tr0, r2\n\tand\t@CPI0_2[0], r2, r3\n\tcontext.caller\tr2\n\tsub!\tr3, r2, r3\n\tjump.ne\t@.BB0_140\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r6\n\tadd\t2, r0, r1\n\tsload\tr1, r5\n\tsstore\tr1, r6\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_70[0], r0, r4\n\tjump\t@.BB0_313\n.BB0_336:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t2, r0, r1\n.BB0_338:\n\tsload\tr1, r1\n.BB0_151:\n\tst.1\t128, r1\n\tadd\t@CPI0_44[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_156:\n\tsub!\tr5, r0, r1\n\tjump.ne\t@.BB0_158\n\tadd\t@CPI0_68[0], r0, r1\n\tjump\t@.BB0_155\n.BB0_144:\n\tjump\t@.BB0_140\n.BB0_243:\n\tadd\tr9, r0, stack-[13]\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r5\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tsub!\tr3, r0, r2\n\tjump.ne\t@.BB0_255\n\tadd\tr4, r0, r2\n\tjump\t@.BB0_254\n.BB0_72:\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_66[0], r1, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t160, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t160, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_368\n\tadd\tr0, r0, r7\n.BB0_74:\n\tshl.s\t5, r7, r8\n\tptr.add\tr1, r8, r9\n\tld\tr9, r9\n\tadd\t128, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_74\n.BB0_368:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_76\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tshl.s\t3, r5, r5\n\tadd\t128, r6, r6\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_76:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_77\n.BB0_82:\n\tadd\t31, r4, r1\n\tand\t480, r1, r1\n\tadd\t128, r1, r1\n\tst.1\t64, r1\n\tsub.s!\t160, r3, r2\n\tjump.lt\t@.BB0_2\n\tld.1\t128, r2\n\tsub.s!\t@CPI0_77[0], r2, r2\n\tjump.gt\t@.BB0_2\n\tld.1\t256, r2\n\tsub.s!\t@CPI0_77[0], r2, r2\n\tjump.gt\t@.BB0_2\n\tld.1\t160, r3\n\tmul\t@CPI0_78[0], r3, r2, r4\n\tsub!\tr3, r0, r4\n\tjump.ne\t@.BB0_84\n.BB0_90:\n\tadd\tstack-[13], r0, r5\n\tmul\t@CPI0_79[0], r5, r3, r4\n\tsub!\tr5, r0, r4\n\tjump.eq\t@.BB0_92\n\tdiv.s\tstack-[13], r3, r4, r5\n\tsub.s!\t@CPI0_79[0], r4, r4\n\tjump.ne\t@.BB0_89\n.BB0_92:\n\tsub!\tr2, r0, r4\n\tjump.ne\t@.BB0_94\n\tadd\t@CPI0_52[0], r0, r1\n\tst.1\t0, r1\n\tadd\t18, r0, r1\n\tjump\t@.BB0_46\n.BB0_203:\n\tadd\t@CPI0_42[0], r0, r2\n\tst.1\t128, r2\n\tst.1\t132, r1\n\tadd\t@CPI0_43[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_347:\n.BB0_140:\n\tadd\t@CPI0_42[0], r0, r1\n\tst.1\t128, r1\n\tst.1\t132, r2\n\tadd\t@CPI0_43[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_158:\n\tsub!\tr6, r0, r1\n\tjump.ne\t@.BB0_160\n\tadd\t@CPI0_67[0], r0, r1\n.BB0_155:\n\tst.1\t128, r1\n\tadd\t@CPI0_66[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_255:\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32777, r0, r2\n\tadd\tr0, r0, r5\n.BB0_254:\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tadd\tstack-[13], r0, r9\n.BB0_245:\n\tsub!\tr3, r0, r4\n\tjump.ne\t@.BB0_246\n.BB0_252:\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_256\n\tsload\tr9, r5\n\tsstore\tr9, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t2, r0, r3\n\tadd\t@CPI0_54[0], r0, r4\n.BB0_258:\n.BB0_313:\n.BB0_314:\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_2\n.BB0_132:\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_246:\n\tadd\t63, r3, r4\n\tsub.s\t32, r0, r5\n\tand\tr4, r5, r4\n\tld.1\t64, r5\n\tadd\tr5, r4, r4\n\tsub!\tr4, r5, r6\n\tadd\t0, r0, r6\n\tadd.lt\t1, r0, r6\n\tsub.s!\t@CPI0_38[0], r4, r7\n\tjump.gt\t@.BB0_45\n\tand!\t1, r6, r6\n\tjump.ne\t@.BB0_45\n\tst.1\t64, r4\n\tand\t31, r3, r4\n\tst.1.inc\tr5, r3, r5\n\tshr.s!\t5, r3, r3\n\tjump.eq\t@.BB0_370\n\tadd\tr0, r0, r6\n.BB0_250:\n\tshl.s\t5, r6, r7\n\tadd\tr5, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r3, r7\n\tjump.lt\t@.BB0_250\n.BB0_370:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_252\n\tshl.s\t5, r3, r3\n\tptr.add\tr1, r3, r1\n\tadd\tr5, r3, r3\n\tshl.s\t3, r4, r4\n\tld.1\tr3, r5\n\tshl\tr5, r4, r5\n\tshr\tr5, r4, r5\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r5, r1\n\tst.1\tr3, r1\n\tjump\t@.BB0_252\n.BB0_77:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_367\n\tadd\tr0, r0, r6\n.BB0_79:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_79\n.BB0_367:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_81\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr2, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_81:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tshl.s\t96, r3, r2\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_350:\n\tand\t@CPI0_3[0], r1, r1\n\tor\tr1, r6, r1\n\tsstore\tr0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_5[0], r0, r4\n\tjump\t@.BB0_313\n.BB0_160:\n\tmul\tr7, r5, r2, r1\n\tdiv\tr2, r5, r1, r3\n\tsub!\tr1, r7, r1\n\tjump.ne\t@.BB0_89\n\tmul\tr6, r2, r1, r3\n\tsub!\tr2, r0, r3\n\tjump.eq\t@.BB0_163\n\tdiv\tr1, r2, r2, r3\n\tsub!\tr2, r6, r2\n\tjump.ne\t@.BB0_89\n.BB0_163:\n\tmul\tr6, r5, r2, r3\n\tdiv\tr2, r5, r3, r4\n\tsub!\tr3, r6, r3\n\tjump.ne\t@.BB0_89\n\tdiv.s\t1000, r1, r1, r3\n\tsub!\tr1, r2, r3\n\tjump.lt\t@.BB0_89\n\tsub\tr1, r2, r1\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r1, r1\n\tjump.ge\t@.BB0_167\n\tadd\t@CPI0_65[0], r0, r1\n\tjump\t@.BB0_155\n.BB0_84:\n\tsub.s\t1, r0, r4\n\tsub!\tr3, r4, r4\n\tjump.ne\t@.BB0_86\n\tsub.s!\t@CPI0_47[0], r2, r4\n\tjump.eq\t@.BB0_89\n.BB0_86:\n\tdiv.s!\t@CPI0_47[0], r3, r3, r4\n\tsub\t@CPI0_47[0], r4, r6\n\tadd.eq\tr4, r0, r6\n\tdiv.s!\t@CPI0_47[0], r2, r4, r7\n\txor\tr4, r3, r3\n\tsub\t@CPI0_47[0], r7, r4\n\tadd.eq\tr7, r0, r4\n\tdiv\tr4, r6, r5, r4\n\tshl.s!\t255, r3, r3\n\tsub\tr3, r5, r4\n\tor\tr4, r3, r3\n\tadd.eq\tr5, r0, r3\n\tsub!\tr5, r0, r4\n\tadd.ne\tr3, r0, r5\n\tsub.s!\t@CPI0_78[0], r5, r3\n\tjump.eq\t@.BB0_90\n.BB0_89:\n\tadd\t@CPI0_52[0], r0, r1\n\tst.1\t0, r1\n\tadd\t17, r0, r1\n\tjump\t@.BB0_46\n.BB0_366:\n\tst.1\tr1, r4\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tjump\t@.BB0_95\n.BB0_94:\n\tdiv\tr3, r2, r2, r3\n\tst.1\tr1, r2\n.BB0_95:\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_39[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_279:\n\tadd\tstack-[1], r0, r4\n\tld.1\tr4, r5\n\tld.1\tr5, r4\n\tadd\tstack-[13], r0, r7\n\tsub!\tr7, r4, r4\n\tjump.ge\t@.BB0_222\n\tshl.s\t5, r7, r4\n\tadd\t32, r4, r4\n\tadd\tr5, r4, r5\n\tld.1\tr5, r5\n\tand\t@CPI0_2[0], r5, r5\n\tsub!\tstack-[10], r5, r5\n\tjump.ne\t@.BB0_222\n\tld.1\tr1, r1\n\tld.1\tr1, r5\n\tsub!\tr5, r7, r5\n\tjump.le\t@.BB0_282\n\tadd\tr1, r4, r1\n\tld.1\tr1, r1\n\tsub!\tr1, r0, r4\n\tjump.eq\t@.BB0_222\n\tld.1\tr3, r3\n\tsub!\tr3, r0, r3\n\tjump.eq\t@.BB0_222\n\tld.1\tr2, r2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_222\n\tadd\tstack-[8], r0, r2\n\tld.1\tr2, r2\n\tmul\tr2, r1, stack-[9], r3\n\tsub!\tr2, r0, r3\n\tjump.eq\t@.BB0_288\n\tdiv\tstack-[9], r2, r2, r3\n\tsub!\tr2, r1, r1\n\tjump.ne\t@.BB0_89\n.BB0_288:\n\tadd\tstack-[10], r0, r1\n\tst.1\t0, r1\n\tadd\t5, r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_36[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[9], r0, r2\n\tdiv.s\t1000, r2, r10, r2\n\tld\tr1, r1\n\tsload\tr1, r3\n\tadd\tr3, r10, r2\n\tand\t@CPI0_47[0], r2, r5\n\tand\t@CPI0_47[0], r10, r6\n\tadd\t@CPI0_47[0], r0, r4\n\tsub!\tr5, r6, r7\n\tadd\tr0, r0, r7\n\tadd.lt\tr4, r0, r7\n\tadd\tr0, r0, r8\n\tadd.gt\tr4, r0, r8\n\txor\tr5, r6, r5\n\tsub!\tr2, r10, r6\n\tadd\tr0, r0, r6\n\tadd.lt\tr4, r0, r6\n\tsub.s!\t@CPI0_47[0], r5, r9\n\tadd.ne\tr6, r0, r8\n\tadd\tr10, r0, stack-[8]\n\tsub!\tr2, r10, r6\n\tadd\tr0, r0, r6\n\tadd.ge\tr4, r0, r6\n\tsub.s!\t@CPI0_47[0], r5, r5\n\tadd.ne\tr6, r0, r7\n\tsub.s\t1, r0, r5\n\tsub!\tr3, r5, r5\n\tadd\tr0, r0, r5\n\tadd.gt\tr4, r0, r5\n\tand\t@CPI0_47[0], r3, r6\n\tsub.s!\t@CPI0_47[0], r6, r9\n\tadd.ge\tr0, r0, r4\n\txor\t@CPI0_47[0], r6, r6\n\tsub.s!\t@CPI0_47[0], r6, r6\n\tadd.ne\tr5, r0, r4\n\tsub!\tr7, r0, r5\n\tadd\t0, r0, r5\n\tadd.ne\t1, r0, r5\n\tshr.s\t255, r3, r3\n\tand\tr3, r5, r3\n\tsub!\tr8, r0, r5\n\tadd\t0, r0, r5\n\tadd.ne\t1, r0, r5\n\tsub!\tr4, r0, r4\n\tadd\t0, r0, r4\n\tadd.ne\t1, r0, r4\n\tand\tr4, r5, r4\n\tand\t1, r4, r4\n\tor!\tr3, r4, r3\n\tjump.ne\t@.BB0_89\n\tsstore\tr1, r2\n\tadd\tstack-[6], r0, r1\n\tld.1\tr1, r2\n\tmul\tstack-[8], r2, r1, r3\n\tadd\tstack-[9], r0, r3\n\tsub.s!\t1000, r3, r3\n\tjump.lt\t@.BB0_292\n\tdiv.s\tstack-[8], r1, r3, r4\n\tsub!\tr3, r2, r2\n\tjump.ne\t@.BB0_89\n.BB0_292:\n\tdiv.s\t@CPI0_51[0], r1, r2, r1\n\tadd\tr2, r0, stack-[9]\n\tsub!\tstack-[8], r2, r1\n\tjump.lt\t@.BB0_89\n\tadd\tstack-[12], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[11], r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_36[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\t6, r1, r1\n\tsload\tr1, r2\n\tsub.s!\tstack-[13], r2, r2\n\tjump.le\t@.BB0_282\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_37[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\tstack-[13], r1, r1\n\tsstore\tr1, r0\n\tadd\t3, r0, r1\n\tsload\tr1, r3\n\tadd\tstack-[9], r3, r2\n\tsub!\tr2, r3, r3\n\tadd\t0, r0, r3\n\tadd.lt\t1, r0, r3\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_89\n\tadd\tstack-[9], r0, r4\n\tsub\tstack-[8], r4, stack-[13]\n\tsstore\tr1, r2\n\tcontext.gas_left\tr1\n\tadd\tstack-[10], r0, r2\n\tsub.s!\t4, r2, r2\n\tjump.ne\t@.BB0_298\n\tadd\t1, r0, r2\n\tadd\tstack[@returndatasize], r0, r1\n\tjump\t@.BB0_300\n.BB0_222:\n\tld.1\t64, r1\n\tadd\t@CPI0_56[0], r0, r2\n\tjump\t@.BB0_363\n.BB0_167:\n\tadd\t576, r0, r1\n\tst.1\t64, r1\n\tadd\t96, r0, r1\n\tst.1\t288, r1\n\tst.1\t320, r1\n\tst.1\t448, r0\n\tst.1\t480, r0\n\tst.1\t512, r0\n\tst.1\t544, r0\n\tcontext.caller\tr1\n\tadd\tr1, r0, stack-[13]\n\tst.1\t160, r1\n\tadd\tr5, r0, stack-[11]\n\tst.1\t256, r5\n\tadd\tr7, r0, stack-[9]\n\tst.1\t352, r7\n\tadd\t2, r0, r1\n\tsload\tr1, r1\n\tst.1\t416, r1\n\tadd\tr6, r0, stack-[10]\n\tst.1\t384, r6\n\tst.1\t224, r2\n\tadd\tr2, r0, stack-[8]\n\tst.1\t192, r2\n\tadd\t4, r0, r1\n\tadd\tr1, r0, stack-[12]\n\tsload\tr1, r1\n\tst.1\t128, r1\n\tst.1\t0, r1\n\tadd\t6, r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_36[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r4\n\tld.1\t128, r1\n\tsstore\tr4, r1\n\tld.1\t160, r1\n\tand\t@CPI0_2[0], r1, r1\n\tadd\t1, r4, r2\n\tsload\tr2, r3\n\tand\t@CPI0_3[0], r3, r3\n\tor\tr3, r1, r1\n\tsstore\tr2, r1\n\tadd\t2, r4, r1\n\tld.1\t192, r2\n\tsstore\tr1, r2\n\tadd\t3, r4, r1\n\tld.1\t224, r2\n\tsstore\tr1, r2\n\tadd\tr4, r0, stack-[6]\n\tadd\t4, r4, r1\n\tld.1\t256, r2\n\tsstore\tr1, r2\n\tld.1\t288, r1\n\tadd\tr1, r0, stack-[5]\n\tld.1\tr1, r1\n\tadd\tr1, r0, stack-[7]\n\tsub.s!\t@CPI0_38[0], r1, r1\n\tjump.le\t@.BB0_169\n.BB0_45:\n\tadd\t@CPI0_52[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n.BB0_46:\n\tst.1\t4, r1\n\tadd\t@CPI0_8[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_112:\n\tld.1\t64, r1\n\tadd\t@CPI0_72[0], r0, r2\n\tjump\t@.BB0_363\n.BB0_225:\n\tld.1\t64, r1\n\tadd\t@CPI0_55[0], r0, r2\n\tjump\t@.BB0_363\n.BB0_115:\n\tld.1\tr3, r1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_117\n\tld.1\tr2, r1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_117\n\tadd\tstack-[13], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[12], r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_36[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\t5, r1, r1\n\tsload\tr1, r2\n\tadd\tr2, r0, stack-[10]\n\tsub.s!\t@CPI0_38[0], r2, r2\n\tjump.gt\t@.BB0_45\n\tadd\tstack-[10], r0, r2\n\tadd\t1, r2, r2\n\tsstore\tr1, r2\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_37[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\tstack-[10], r1, r1\n\tsload\tr1, r2\n\tand\t@CPI0_3[0], r2, r2\n\tcontext.caller\tr3\n\tadd\tr3, r0, stack-[10]\n\tor\tr2, r3, r2\n\tsstore\tr1, r2\n\tadd\tstack-[13], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[12], r0, r1\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_36[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\t6, r1, r1\n\tsload\tr1, r2\n\tadd\tr2, r0, stack-[9]\n\tsub.s!\t@CPI0_38[0], r2, r2\n\tjump.gt\t@.BB0_45\n\tadd\tstack-[9], r0, r2\n\tadd\t1, r2, r2\n\tsstore\tr1, r2\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_37[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\tstack-[9], r1, r1\n\tadd\tstack-[11], r0, r2\n\tsstore\tr1, r2\n\tadd\tstack-[13], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[12], r0, r1\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_36[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\t3, r1, r1\n\tsload\tr1, r3\n\tadd\tstack-[11], r3, r2\n\tsub!\tr2, r3, r3\n\tadd\t0, r0, r3\n\tadd.lt\t1, r0, r3\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_89\n\tsstore\tr1, r2\n\tadd\tstack-[10], r0, r1\n\tst.1\t0, r1\n\tadd\t5, r0, r1\n\tadd\tr1, r0, stack-[12]\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_36[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\t1, r1, r1\n\tsload\tr1, r2\n\tadd\tr2, r0, stack-[9]\n\tsub.s!\t@CPI0_38[0], r2, r2\n\tjump.gt\t@.BB0_45\n\tadd\tstack-[9], r0, r2\n\tadd\t1, r2, r2\n\tsstore\tr1, r2\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_37[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\tstack-[9], r1, r1\n\tadd\tstack-[13], r0, r2\n\tsstore\tr1, r2\n\tadd\tstack-[10], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[12], r0, r1\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_36[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsload\tr1, r4\n\tadd\tstack-[11], r0, r10\n\tsub\tr4, r10, r2\n\tand\t@CPI0_47[0], r2, r5\n\tand\t@CPI0_47[0], r4, r6\n\tadd\t@CPI0_47[0], r0, r3\n\tsub!\tr5, r6, r7\n\tadd\tr0, r0, r7\n\tadd.gt\tr3, r0, r7\n\tadd\tr0, r0, r8\n\tadd.lt\tr3, r0, r8\n\txor\tr5, r6, r5\n\tsub!\tr2, r4, r6\n\tadd\tr0, r0, r6\n\tadd.gt\tr3, r0, r6\n\tsub.s!\t@CPI0_47[0], r5, r9\n\tadd.ne\tr6, r0, r8\n\tsub!\tr2, r4, r4\n\tadd\tr0, r0, r4\n\tadd.lt\tr3, r0, r4\n\tsub.s!\t@CPI0_47[0], r5, r5\n\tadd.ne\tr4, r0, r7\n\tsub.s\t1, r0, r4\n\tsub!\tr10, r4, r4\n\tadd\tr0, r0, r4\n\tadd.gt\tr3, r0, r4\n\tand\t@CPI0_47[0], r10, r5\n\tsub.s!\t@CPI0_47[0], r5, r6\n\tadd.ge\tr0, r0, r3\n\txor\t@CPI0_47[0], r5, r5\n\tsub.s!\t@CPI0_47[0], r5, r5\n\tadd.ne\tr4, r0, r3\n\tsub!\tr7, r0, r4\n\tadd\t0, r0, r4\n\tadd.ne\t1, r0, r4\n\tshr.s\t255, r10, r5\n\tand\tr5, r4, r4\n\tsub!\tr8, r0, r5\n\tadd\t0, r0, r5\n\tadd.ne\t1, r0, r5\n\tsub!\tr3, r0, r3\n\tadd\t0, r0, r3\n\tadd.ne\t1, r0, r3\n\tand\tr3, r5, r3\n\tand\t1, r3, r3\n\tor!\tr4, r3, r3\n\tjump.ne\t@.BB0_89\n\tsstore\tr1, r2\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_74[0], r0, r4\n\tjump\t@.BB0_312\n.BB0_169:\n\tadd\tstack-[6], r0, r1\n\tadd\t5, r1, r2\n\tsload\tr2, r3\n\tadd\tstack-[7], r0, r1\n\tadd\tr2, r0, stack-[4]\n\tsstore\tr2, r1\n\tadd\tr3, r0, stack-[3]\n\tsub!\tr1, r3, r1\n\tjump.ge\t@.BB0_174\n\tadd\tstack-[4], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_37[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r2\n\tadd\tstack-[7], r2, r1\n\tadd\tstack-[3], r2, r2\n\tsub!\tr1, r2, r3\n\tjump.ge\t@.BB0_174\n.BB0_173:\n\tsstore\tr1, r0\n\tadd\t1, r1, r1\n\tsub!\tr1, r2, r3\n\tjump.lt\t@.BB0_173\n.BB0_174:\n\tadd\tstack-[4], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_37[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\tstack-[7], r0, r6\n\tsub!\tr6, r0, r2\n\tadd\tstack-[5], r0, r5\n\tjump.eq\t@.BB0_178\n\tadd\tr0, r0, r2\n.BB0_177:\n\tadd\tr2, r1, r3\n\tadd\t32, r5, r5\n\tld.1\tr5, r4\n\tand\t@CPI0_2[0], r4, r4\n\tsstore\tr3, r4\n\tadd\t1, r2, r2\n\tsub!\tr2, r6, r3\n\tjump.lt\t@.BB0_177\n.BB0_178:\n\tld.1\t320, r1\n\tadd\tr1, r0, stack-[5]\n\tld.1\tr1, r1\n\tadd\tr1, r0, stack-[7]\n\tsub.s!\t@CPI0_38[0], r1, r1\n\tjump.gt\t@.BB0_45\n\tadd\tstack-[6], r0, r1\n\tadd\t6, r1, r2\n\tsload\tr2, r3\n\tadd\tstack-[7], r0, r1\n\tadd\tr2, r0, stack-[4]\n\tsstore\tr2, r1\n\tadd\tr3, r0, stack-[3]\n\tsub!\tr1, r3, r1\n\tjump.ge\t@.BB0_184\n\tadd\tstack-[4], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_37[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r2\n\tadd\tstack-[7], r2, r1\n\tadd\tstack-[3], r2, r2\n\tsub!\tr1, r2, r3\n\tjump.ge\t@.BB0_184\n.BB0_183:\n\tsstore\tr1, r0\n\tadd\t1, r1, r1\n\tsub!\tr1, r2, r3\n\tjump.lt\t@.BB0_183\n.BB0_184:\n\tadd\tstack-[4], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_37[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\tstack-[7], r0, r6\n\tsub!\tr6, r0, r2\n\tadd\tstack-[5], r0, r5\n\tjump.eq\t@.BB0_188\n\tadd\tr0, r0, r2\n.BB0_187:\n\tadd\tr2, r1, r3\n\tadd\t32, r5, r5\n\tld.1\tr5, r4\n\tsstore\tr3, r4\n\tadd\t1, r2, r2\n\tsub!\tr2, r6, r3\n\tjump.lt\t@.BB0_187\n.BB0_188:\n\tadd\tstack-[6], r0, r5\n\tadd\t7, r5, r1\n\tld.1\t352, r2\n\tsstore\tr1, r2\n\tadd\t8, r5, r1\n\tld.1\t384, r2\n\tsstore\tr1, r2\n\tadd\t9, r5, r1\n\tld.1\t416, r2\n\tsstore\tr1, r2\n\tadd\t@CPI0_59[0], r0, r1\n\tld.1\t512, r2\n\tsub!\tr2, r0, r2\n\tadd.eq\tr0, r0, r1\n\tld.1\t448, r2\n\tsub!\tr2, r0, r2\n\tadd\t10, r5, r2\n\tsload\tr2, r3\n\tand\t@CPI0_60[0], r3, r3\n\tor.ne\t1, r3, r3\n\tld.1\t480, r4\n\tsub!\tr4, r0, r4\n\tor.ne\t256, r3, r3\n\tor\tr3, r1, r1\n\tsstore\tr2, r1\n\tadd\t11, r5, r1\n\tld.1\t544, r2\n\tsstore\tr1, r2\n\tadd\tstack-[13], r0, r1\n\tst.1\t0, r1\n\tadd\t5, r0, r1\n\tadd\tr1, r0, stack-[7]\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_36[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[12], r0, r2\n\tsload\tr2, r2\n\tadd\tr2, r0, stack-[5]\n\tld\tr1, r1\n\tadd\t1, r1, r1\n\tsload\tr1, r2\n\tadd\tr2, r0, stack-[6]\n\tsub.s!\t@CPI0_38[0], r2, r2\n\tjump.gt\t@.BB0_45\n\tadd\tstack-[6], r0, r2\n\tadd\t1, r2, r2\n\tsstore\tr1, r2\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_37[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\tstack-[6], r1, r1\n\tadd\tstack-[5], r0, r2\n\tsstore\tr1, r2\n\tadd\tstack-[13], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[7], r0, r1\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_36[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsload\tr1, r4\n\tadd\tstack-[8], r0, r10\n\tsub\tr4, r10, r2\n\tand\t@CPI0_47[0], r2, r5\n\tand\t@CPI0_47[0], r4, r6\n\tadd\t@CPI0_47[0], r0, r3\n\tsub!\tr5, r6, r7\n\tadd\tr0, r0, r7\n\tadd.gt\tr3, r0, r7\n\tadd\tr0, r0, r8\n\tadd.lt\tr3, r0, r8\n\txor\tr5, r6, r5\n\tsub!\tr2, r4, r6\n\tadd\tr0, r0, r6\n\tadd.gt\tr3, r0, r6\n\tsub.s!\t@CPI0_47[0], r5, r9\n\tadd.ne\tr6, r0, r8\n\tsub!\tr2, r4, r4\n\tadd\tr0, r0, r4\n\tadd.lt\tr3, r0, r4\n\tsub.s!\t@CPI0_47[0], r5, r5\n\tadd.ne\tr4, r0, r7\n\tsub.s\t1, r0, r4\n\tsub!\tr10, r4, r5\n\tadd\tr0, r0, r5\n\tadd.gt\tr3, r0, r5\n\tand\t@CPI0_47[0], r10, r6\n\tsub.s!\t@CPI0_47[0], r6, r9\n\tadd.ge\tr0, r0, r3\n\txor\t@CPI0_47[0], r6, r6\n\tsub.s!\t@CPI0_47[0], r6, r6\n\tadd.ne\tr5, r0, r3\n\tsub!\tr7, r0, r5\n\tadd\t0, r0, r5\n\tadd.ne\t1, r0, r5\n\tshr.s\t255, r10, r6\n\tand\tr6, r5, r5\n\tsub!\tr8, r0, r6\n\tadd\t0, r0, r6\n\tadd.ne\t1, r0, r6\n\tsub!\tr3, r0, r3\n\tadd\t0, r0, r3\n\tadd.ne\t1, r0, r3\n\tand\tr3, r6, r3\n\tand\t1, r3, r3\n\tor!\tr5, r3, r3\n\tadd\tstack-[11], r0, r7\n\tadd\tstack-[10], r0, r5\n\tadd\tstack-[9], r0, r6\n\tjump.ne\t@.BB0_89\n\tsstore\tr1, r2\n\tadd\tstack-[12], r0, r1\n\tsload\tr1, r1\n\tsub!\tr1, r4, r2\n\tjump.eq\t@.BB0_89\n\tadd\t1, r1, r1\n\tadd\tstack-[12], r0, r3\n\tsstore\tr3, r1\n\tld.1\t64, r1\n\tadd\t96, r1, r2\n\tadd\t@CPI0_61[0], r0, r4\n\tst.1\tr2, r4\n\tadd\t64, r1, r2\n\tadd\t@CPI0_62[0], r0, r4\n\tst.1\tr2, r4\n\tadd\t32, r1, r2\n\tadd\t41, r0, r4\n\tst.1\tr2, r4\n\tadd\t32, r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r2\n\tcontext.gas_left\tr8\n\tsub.s!\t@CPI0_0[0], r8, r4\n\tadd.ge\tr2, r0, r8\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r8, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_63[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t@CPI0_64[0], r0, r4\n\tjump\t@.BB0_314\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_117:\n\tld.1\t64, r1\n\tadd\t@CPI0_73[0], r0, r2\n\tjump\t@.BB0_363\n.BB0_282:\n\tadd\t@CPI0_52[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tjump\t@.BB0_46\n.BB0_235:\n\tadd\tstack-[10], r0, r3\n\tsub\tstack-[11], r3, r3\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32777, r0, r2\n\tadd\tr0, r0, r5\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n.BB0_233:\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_132\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_369\n\tadd\tr0, r0, r6\n.BB0_238:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_238\n.BB0_369:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_240\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr2, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_240:\n\tjump\t@.BB0_81\n.BB0_329:\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32777, r0, r2\n\tadd\tstack-[12], r0, r3\n\tadd\tstack-[10], r0, r4\n\tadd\tr0, r0, r5\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n.BB0_327:\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_330\n.BB0_335:\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_50[0], r0, r4\n\tadd\tstack-[10], r0, r5\n\tadd\tstack-[12], r0, r6\n\tjump\t@.BB0_313\n.BB0_330:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_372\n\tadd\tr0, r0, r6\n.BB0_332:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_332\n.BB0_372:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_334\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr2, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_334:\n\tjump\t@.BB0_81\n.BB0_298:\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tadd\tstack-[9], r0, r3\n\tsub!\tstack-[8], r3, r2\n\tjump.ne\t@.BB0_310\n\tadd\tstack-[10], r0, r2\n\tjump\t@.BB0_309\n.BB0_310:\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32777, r0, r2\n\tadd\tstack-[13], r0, r3\n\tadd\tstack-[10], r0, r4\n\tadd\tr0, r0, r5\n.BB0_309:\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tshr.s\t96, r1, r1\n\tand\t@CPI0_0[0], r1, stack[@returndatasize]\n\tand\t@CPI0_0[0], r1, r1\n.BB0_300:\n\tsub!\tr1, r0, r3\n\tjump.ne\t@.BB0_301\n.BB0_307:\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_256\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_50[0], r0, r4\n.BB0_312:\n\tadd\tstack-[10], r0, r5\n\tadd\tstack-[13], r0, r6\n\tjump\t@.BB0_313\n.BB0_256:\n\tld.1\t64, r1\n\tadd\t@CPI0_53[0], r0, r2\n.BB0_363:\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_41[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_301:\n\tadd\t63, r1, r3\n\tand\tstack-[7], r3, r3\n\tld.1\t64, r4\n\tadd\tr4, r3, r3\n\tsub!\tr3, r4, r5\n\tadd\t0, r0, r5\n\tadd.lt\t1, r0, r5\n\tsub.s!\t@CPI0_38[0], r3, r6\n\tjump.gt\t@.BB0_45\n\tand!\t1, r5, r5\n\tjump.ne\t@.BB0_45\n\tst.1\t64, r3\n\tand\t31, r1, r3\n\tst.1.inc\tr4, r1, r4\n\tptr.add\tstack[@ptr_return_data], r0, r5\n\tshr.s!\t5, r1, r1\n\tjump.eq\t@.BB0_371\n\tadd\tr0, r0, r6\n.BB0_305:\n\tshl.s\t5, r6, r7\n\tadd\tr4, r7, r8\n\tptr.add\tr5, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r1, r7\n\tjump.lt\t@.BB0_305\n.BB0_371:\n\tsub!\tr3, r0, r6\n\tjump.eq\t@.BB0_307\n\tshl.s\t5, r1, r1\n\tptr.add\tr5, r1, r5\n\tadd\tr4, r1, r1\n\tshl.s\t3, r3, r3\n\tld.1\tr1, r4\n\tshl\tr4, r3, r4\n\tshr\tr4, r3, r4\n\tld\tr5, r5\n\tsub\t256, r3, r3\n\tshr\tr5, r3, r5\n\tshl\tr5, r3, r3\n\tor\tr3, r4, r3\n\tst.1\tr1, r3\n\tjump\t@.BB0_307\n.func_end0:\n\nabi_encode_array_uint256_dyn:\n.func_begin1:\n\tadd\tr1, r0, r3\n\tld.1\tr3, r4\n\tst.1.inc\tr2, r4, r1\n\tsub!\tr4, r0, r2\n\tjump.eq\t@.BB1_3\n\tadd\tr0, r0, r2\n.BB1_2:\n\tadd\t32, r3, r3\n\tld.1\tr3, r5\n\tst.1.inc\tr1, r5, r1\n\tadd\t1, r2, r2\n\tsub!\tr2, r4, r5\n\tjump.lt\t@.BB1_2\n.BB1_3:\n\tret\n.func_end1:\n\nfinalize_allocation_17596:\n.func_begin2:\n\tsub.s!\t@CPI2_0[0], r1, r2\n\tjump.ge\t@.BB2_1\n\tadd\t64, r1, r1\n\tst.1\t64, r1\n\tret\n.BB2_1:\n\tadd\t@CPI2_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI2_2[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end2:\n\ncopy_array_from_storage_to_memory_array_uint256_dyn:\n.func_begin3:\n\tnop\tstack+=[3]\n\tsload\tr1, r3\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[3]\n\tadd\tr3, r0, stack-[1]\n\tst.1.inc\tr2, r3, r2\n\tadd\tr2, r0, stack-[2]\n\tst.1\t0, r1\n\tadd\t@CPI3_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI3_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI3_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB3_1\n\tadd\tstack-[1], r0, r5\n\tsub!\tr5, r0, r2\n\tadd\tstack-[2], r0, r4\n\tjump.eq\t@.BB3_5\n\tld\tr1, r1\n\tadd\tr0, r0, r2\n.BB3_4:\n\tsload\tr1, r3\n\tst.1.inc\tr4, r3, r4\n\tadd\t1, r1, r1\n\tadd\t1, r2, r2\n\tsub!\tr2, r5, r3\n\tjump.lt\t@.BB3_4\n.BB3_5:\n\tadd\tstack-[3], r0, r1\n\tsub\tr4, r1, r2\n\tadd\t31, r2, r3\n\tsub.s\t32, r0, r2\n\tand\tr3, r2, r2\n\tadd\tr2, r1, r4\n\tsub!\tr4, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI3_2[0], r4, r3\n\tjump.gt\t@.BB3_7\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB3_7\n\tst.1\t64, r4\n\tret\n.BB3_1:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB3_7:\n\tadd\t@CPI3_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI3_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end3:\n\n__sha3:\n.func_begin4:\n\tadd\t@CPI4_0[0], r0, r3\n\tsub.s!\t@CPI4_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t64, r1, r1\n\tsub.s!\t@CPI4_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI4_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI4_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_2\n\tld\tr1, r1\n\tret\n.BB4_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end4:\n\n__farcall:\n.func_begin5:\n.tmp0:\n\tfar_call\tr1, r2, @.BB5_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB5_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end5:\n\n__staticcall:\n.func_begin6:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB6_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB6_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end6:\n\n\t.data\n\t.p2align\t5\nreturndatasize:\n\t.cell 0\n\n\t.p2align\t5\nptr_return_data:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI3_0:\nCPI4_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 8589934560\nCPI0_2:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_3:\n\t.cell -1461501637330902918203684832716283019655932542976\nCPI0_4:\nCPI4_1:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\nCPI0_5:\n\t.cell -52524777015005588113349992707137368332388074750292320778649315033004770043936\nCPI0_6:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_7:\n\t.cell 13710277464781854216000659759875001615964737203828340066645871065499466465280\nCPI0_8:\nCPI2_2:\nCPI3_4:\n\t.cell 2852213850513516153367582212096\nCPI0_9:\n\t.cell 2483819850\nCPI0_10:\n\t.cell 3470208902\nCPI0_11:\n\t.cell 4062367928\nCPI0_12:\n\t.cell 4062367929\nCPI0_13:\n\t.cell 4076725131\nCPI0_14:\n\t.cell 4086637284\nCPI0_15:\n\t.cell 3470208903\nCPI0_16:\n\t.cell 3567970319\nCPI0_17:\n\t.cell 3209570391\nCPI0_18:\n\t.cell 3209570392\nCPI0_19:\n\t.cell 3363399026\nCPI0_20:\n\t.cell 3423676814\nCPI0_21:\n\t.cell 2483819851\nCPI0_22:\n\t.cell 3074469753\nCPI0_23:\n\t.cell 1778257452\nCPI0_24:\n\t.cell 2201690061\nCPI0_25:\n\t.cell 2201690062\nCPI0_26:\n\t.cell 2376452955\nCPI0_27:\n\t.cell 2422394493\nCPI0_28:\n\t.cell 1778257453\nCPI0_29:\n\t.cell 1901074598\nCPI0_30:\n\t.cell 769497854\nCPI0_31:\n\t.cell 769497855\nCPI0_32:\n\t.cell 972767045\nCPI0_33:\n\t.cell 1242776268\nCPI0_34:\n\t.cell 102648143\nCPI0_35:\n\t.cell 257139824\nCPI0_36:\n\t.cell 904625697166532776746648320380374280103671760270919307471179981048634146816\nCPI0_37:\nCPI3_1:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_38:\nCPI3_2:\n\t.cell 18446744073709551615\nCPI0_39:\n\t.cell 2535301200456458802993406410752\nCPI0_40:\n\t.cell 14421663457580064705067304897563763857093837618074134235994798818626002485248\nCPI0_41:\n\t.cell 316912650057057350374175801344\nCPI0_42:\n\t.cell 7938186097999196165550678859506685896924014503924332068426884830790147899392\nCPI0_43:\n\t.cell 2852213852874699394802404818944\nCPI0_44:\n\t.cell 2535301202817642044428229017600\nCPI0_45:\n\t.cell 18446744073709551167\nCPI0_46:\n\t.cell 16711680\nCPI0_47:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI0_48:\n\t.cell 100000000\nCPI0_49:\n\t.cell 14437333991389365756822315673377632757035417522267279379660800\nCPI0_50:\n\t.cell 27396752086227719444725598720516462113564757066652837213737854650764212905024\nCPI0_51:\n\t.cell 100000\nCPI0_52:\nCPI2_1:\nCPI3_3:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_53:\n\t.cell 33639291867580784467682747832400048607438497047394639908508034282225064214528\nCPI0_54:\n\t.cell -4998980190745347974197023552072375640142532831228205889005642646664070232060\nCPI0_55:\n\t.cell -6798290328329879923738620042583141582762985815074762629945254673139785269248\nCPI0_56:\n\t.cell -14597376958939165703377671563086560913501198903271018530223900162299646705664\nCPI0_57:\n\t.cell 50343258238171405831239163947606227208761112399435612453891327657741893744418\nCPI0_58:\n\t.cell -65281\nCPI0_59:\n\t.cell 65536\nCPI0_60:\n\t.cell -16777216\nCPI0_61:\n\t.cell 43931557919922686020009022696877594244815443410333280043440878842330705035264\nCPI0_62:\n\t.cell 29600799214760963296762462461056175038805162262972387451418239061681215185004\nCPI0_63:\n\t.cell 904625697166532776746648320380374280103671765341521708384097587035446968320\nCPI0_64:\n\t.cell -10928409298243827017510964053590949641933301089762953551189378765032583335369\nCPI0_65:\n\t.cell 52636749042329818479597864148491603406825678004888303629094226596844827312128\nCPI0_66:\n\t.cell 316912652418240591808998408192\nCPI0_67:\n\t.cell 20876221772049320769247304852548493731087862397427643075301124840166661292032\nCPI0_68:\n\t.cell 5950436617255566292765183575902862370735552422227987435511975469504660504576\nCPI0_69:\n\t.cell 57369943824924013381278073841212393669469837293704284414219221733664893173760\nCPI0_70:\n\t.cell 27982373920526374416219276170023433271287032375350287651463653626975733365910\nCPI0_71:\n\t.cell -16711936\nCPI0_72:\n\t.cell -57431162611579459020729657867047956842449016040296024390909810615669705670656\nCPI0_73:\n\t.cell -31651745017796304899105949266081619120794178022475775090535892895674209927168\nCPI0_74:\n\t.cell 24818583542895195487450294422775258506059664123211080287223686736827815007016\nCPI0_75:\n\t.cell -8467903406818998751482713334710079315426253924141746956491360263775090376704\nCPI0_76:\n\t.cell -594388424485763533411884790988909803267700097701038875223559556696608079872\nCPI0_77:\n\t.cell 1208925819614629174706175\nCPI0_78:\n\t.cell 10000000000\nCPI0_79:\n\t.cell 1000000000000000000\nCPI0_80:\n\t.cell 18446744073709551168\nCPI2_0:\n\t.cell 18446744073709551552\n",
          "bytecode": {
            "object": "0002000000000002000f00000000000200000000030100190000006003300270000002da0530019700010000005103550000000102200190000000360000c13d0000008002000039000000400020043f000000040250008c00000a380000413d000000000201043b000000e002200270000002e30320009c0000006b0000213d000002f10320009c000001d00000213d000002f80320009c0000025b0000a13d000002f90320009c000003c60000613d000002fa0320009c000002db0000613d000002fb0220009c00000a380000c13d0000000002000416000000000202004b00000a380000c13d000000040250008a000000400220008c00000a380000413d0000002402100370000000000302043b000000000203004b0000000002000019000000010200c039000d00000003001d000000000223004b00000a380000c13d0000000401100370000000000101043b00000000001004350000000601000039000000200010043f000000400200003900000000010000190b640b440000040f0000000a01100039000000000201041a00000321022001970000000d022001af00000315022001c70000060e0000013d0000000002000416000000000202004b00000a380000c13d0000009f02500039000002db02200197000000400020043f0000001f0250018f0000000503500272000000480000613d00000000040000190000000506400210000000000761034f000000000707043b000000800660003900000000007604350000000104400039000000000634004b000000400000413d000000000402004b000000570000613d0000000503300210000000000131034f00000003022002100000008003300039000000000403043300000000042401cf000000000424022f000000000101043b0000010002200089000000000121022f00000000012101cf000000000141019f0000000000130435000000400150008c00000a380000413d000000800200043d000000a00100043d000002dc06100197000002dc0110009c00000a380000213d000000000106004b000002410000c13d000000400100043d000002e102000041000000000021043500000004021000390000000000020435000002da02000041000002da0310009c00000000010280190000004001100210000002e2011001c700000b6600010430000002e40320009c000001e50000213d000002eb0320009c000002960000a13d000002ec0320009c000003dc0000613d000002ed0320009c0000039c0000613d000002ee0220009c00000a380000c13d0000000002000416000000000202004b00000a380000c13d000000040250008a000000400220008c00000a380000413d0000002402100370000000000202043b000d00000002001d0000000401100370000000000101043b000c00000001001d00000000001004350000000601000039000b00000001001d000000200010043f000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002fe011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d000000000301043b000000400400043d000003070140009c000008350000213d000001c001400039000000400010043f000000000103041a00000000021404360000000101300039000000000101041a000002dc01100197000500000002001d00000000001204350000000201300039000000000101041a0000004002400039000300000002001d00000000001204350000000301300039000000000101041a0000006002400039000400000002001d0000000000120435000900000004001d00000080014000390000000402300039000000000202041a0000000000210435000a00000003001d0000000501300039000000000301041a000000400200043d000800000002001d000600000003001d0000000002320436000700000002001d0000000000100435000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002ff011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d0000000605000029000000000205004b0000000704000029000000cb0000613d000000000101043b0000000002000019000000000301041a000002dc03300197000000000434043600000001011000390000000102200039000000000352004b000000c40000413d000000080600002900000000016400490000001f01100039000000200400008a000000000241016f0000000001620019000000000221004b00000000020000190000000102004039000003000310009c0000000a030000290000000905000029000008350000213d0000000102200190000008350000c13d000700000004001d000000400010043f000000a001500039000100000001001d00000000006104350000000601300039000000000301041a000000400200043d000800000002001d000200000003001d0000000002320436000600000002001d0000000000100435000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002ff011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d0000000204000029000000000204004b0000000605000029000000fd0000613d000000000101043b0000000002000019000000000301041a000000000535043600000001011000390000000102200039000000000342004b000000f70000413d000000080400002900000000014500490000001f01100039000000070210017f0000000001420019000000000221004b00000000020000190000000102004039000003000310009c0000000a070000290000000908000029000008350000213d0000000102200190000008350000c13d000000400010043f000000c00180003900000000004104350000000702700039000000000202041a000000e003800039000800000003001d00000000002304350000000802700039000000000202041a000001000380003900000000002304350000000902700039000000000202041a0000012003800039000600000003001d00000000002304350000000a02700039000000000202041a0000ff00032001900000000003000019000000010300c03900000160048000390000000000340435000001800380003900000308042001980000000005000019000000010500c0390000000000530435000000ff0520019000000140028000390000000006000019000000010600c0390000000000620435000001a0068000390000000b07700039000000000707041a0000000000760435000000000700041100000005060000290000000006060433000002dc06600197000a00000007001d000000000667004b0000074b0000c13d000000000505004b0000074b0000613d00000004050000290000000005050433000900000005001d000000000505004b0000074b0000613d000000000404004b0000074b0000613d0000000a0100002900000000001004350000000501000039000000200010043f000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002fe011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d000000000101043b000000000301041a000000090a0000290000000002a3001900000309052001970000030906a001970000030904000041000000000765004b0000000007000019000000000704401900000000080000190000000008042019000000000565013f0000000006a2004b00000000060000190000000006044019000003090950009c000000000806c0190000000006a2004b00000000060000190000000006048019000003090550009c000000000706c019000000010500008a000000000553004b000000000500001900000000050420190000030906300197000003090960009c00000000040080190000030906600167000003090660009c000000000405c019000000000507004b0000000005000019000000010500c039000000ff03300270000000000353016f000000000508004b0000000005000019000000010500c039000000000404004b0000000004000019000000010400c039000000000454016f000000010440018f00000000034301a00000073d0000c13d000000000021041b0000000301000029000000000301043300000004010000290000000001010433000d00000001001d000000000131004b0000073d0000413d00000000010004150000000f0110008a00000005011002100000000d0230006b0000000002000019000001a30000613d000000080100002900000000010104330000000d0230006900000000432100a900000000422300d9000000000112004b0000073d0000c13d00000000010004150000000e0110008a0000000501100210000000000203004b0000000002000019000001a30000613d00000000010004150000000e0110008a00000005011002100000000602000029000000000402043300000000523400a900000000533200d9000000000343004b0000073d0000c13d0000030a2320012a0000000501100270000000000103001f000900000003001d0000000d0130006b0000073d0000413d0000000c0100002900000000001004350000000b01000029000000200010043f000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002fe011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d000000000101043b0000000301100039000000000001041b0000000301000039000000000301041a0000000902300029000000000332004b0000000003000019000000010300403900000001033001900000073d0000c13d0000000904000029000c000d00400071000000000021041b0000000a01000029000000040110008c00000a780000613d0000030b0100004100000009030000290000000d0230006b000000000100c01900000a6b0000c13d0000000a020000290b640b5a0000040f00000a710000013d000002f20320009c000002b90000a13d000002f30320009c000004cb0000613d000002f40320009c000003aa0000613d000002f50220009c00000a380000c13d000000040250008a000000600220008c00000a380000413d0000004402100370000000000602043b0000000402100370000000000502043b0000002401100370000000000701043b000003e80170008c000006330000213d0000031f01000041000006960000013d000002e50320009c000002d20000a13d000002e60320009c000004d20000613d000002e70320009c000003af0000613d000002e80220009c00000a380000c13d0000000002000416000000000202004b00000a380000c13d000000040250008a000000200220008c00000a380000413d0000000401100370000000000101043b00000000001004350000000601000039000000200010043f000002da030000410000000001000414000002da0210009c0000000001038019000000c001100210000002fe011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d000000000101043b0000000501100039000000000301041a000000400200043d000c00000002001d000b00000003001d0000000002320436000d00000002001d00000000001004350000000001000414000002da0210009c000002da01008041000000c001100210000002ff011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d0000000b05000029000000000205004b0000000d060000290000000002060019000002230000613d000000000101043b00000000020600190000000003000019000000000401041a000002dc04400197000000000242043600000001011000390000000103300039000000000453004b0000021c0000413d0000000c0400002900000000014200490000001f01100039000000200200008a000000000221016f0000000001420019000000000221004b00000000020000190000000102004039000003000310009c000008350000213d0000000102200190000008350000c13d000000400010043f0000000002040433000000000302004b0000023f0000613d00000000030004110000000004000019000000050540021000000000056500190000000005050433000002dc05500197000000000535004b000007410000613d0000000104400039000000000524004b000002360000413d000003020200004100000ac60000013d000d00000002001d000000000200041a000002dd01200197000000000161019f000000000010041b000002da010000410000000003000414000002da0430009c0000000003018019000000c001300210000002de011001c7000002dc052001970000800d020000390000000303000039000002df040000410b640b5a0000040f00000001012001900000000d0200002900000a380000613d0000000201000039000000000021041b000000200100003900000100001004430000012000000443000002e00100004100000b650001042e000002fc0320009c000004d70000613d000002fd0220009c00000a380000c13d0000000002000416000000000202004b00000a380000c13d000000040250008a000000200220008c00000a380000413d0000000401100370000000000101043b000002dc0210009c00000a380000213d000000c002000039000c00000002001d000000400020043f000000800000043f0000006002000039000000a00020043f00000000001004350000000501000039000000200010043f0000004002000039000d00000002001d00000000010000190b640b440000040f000b00000001001d0000000c010000290b640b040000040f0000000b02000029000000000102041a000000c00010043f00000001012000390b640b0f0000040f000000e00010043f0000002001000039000000400400043d000c00000004001d0000000001140436000000c00200043d00000000002104350000004002400039000000e00100043d0000000d03000029000000000032043500000060024000390b640af70000040f0000000c040000290000000001410049000002da02000041000002da0340009c0000000004028019000002da0310009c000000000102801900000040024002100000006001100210000000000121019f00000b650001042e000002ef0320009c000005fc0000613d000002f00220009c00000a380000c13d0000000002000416000000000202004b00000a380000c13d000000040250008a000000200220008c00000a380000413d0000000401100370000000000101043b000002dc05100197000002dc0110009c00000a380000213d000000000100041a000002dc021001970000000001000411000000000212004b000006890000c13d0000000101000039000000000201041a000002dd02200197000000000252019f000000000021041b000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002de011001c70000800d0200003900000002030000390000031304000041000006b20000013d000002f60320009c000006110000613d000002f70120009c00000a380000c13d0000000001000416000000000101004b00000a380000c13d000000000100041a000002dc051001970000000002000411000000000325004b000006370000c13d000002dd01100197000000000010041b000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002de011001c70000800d020000390000000303000039000002df040000410000000006000019000006b20000013d000002e90120009c0000062b0000613d000002ea0120009c00000a380000c13d0000000001000416000000000101004b00000a380000c13d00000003010000390000062f0000013d000000040250008a000000200220008c00000a380000413d0000000401100370000000000101043b000d00000001001d00000000001004350000000601000039000c00000001001d000000200010043f000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002fe011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d000000000301043b000000400400043d000003070140009c000008350000213d000001c001400039000000400010043f000000000103041a00000000011404360000000102300039000000000202041a000002dc0220019700000000002104350000000201300039000000000101041a000000400240003900000000001204350000000301300039000000000101041a00000060024000390000000000120435000a00000004001d00000080024000390000000401300039000000000101041a000600000002001d0000000000120435000b00000003001d0000000501300039000000000301041a000000400200043d000900000002001d000700000003001d0000000002320436000800000002001d0000000000100435000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002ff011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d0000000705000029000000000205004b0000000804000029000003290000613d000000000101043b0000000002000019000000000301041a000002dc03300197000000000434043600000001011000390000000102200039000000000352004b000003220000413d000000090600002900000000016400490000001f01100039000000200500008a000000000251016f0000000001620019000000000221004b00000000020000190000000102004039000003000310009c0000000b030000290000000a04000029000008350000213d0000000102200190000008350000c13d000800000005001d000000400010043f000000a001400039000400000001001d00000000006104350000000601300039000000000301041a000000400200043d000900000002001d000500000003001d0000000002320436000700000002001d0000000000100435000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002ff011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d0000000504000029000000000204004b00000007050000290000035b0000613d000000000101043b0000000002000019000000000301041a000000000535043600000001011000390000000102200039000000000342004b000003550000413d000000090400002900000000014500490000001f01100039000000080210017f0000000001420019000000000221004b00000000020000190000000102004039000003000310009c0000000b050000290000000a06000029000008350000213d0000000102200190000008350000c13d000000400010043f000000c00160003900000000004104350000000701500039000000000101041a000000e00260003900000000001204350000000801500039000000000201041a000001000160003900000000002104350000000902500039000000000202041a000001200360003900000000002304350000000a02500039000000000202041a000000ff032001900000000003000019000000010300c0390000014004600039000000000034043500000308032001980000000004000019000000010400c039000001800360003900000000004304350000ff00022001900000000004000019000000010400c03900000160026000390000000000420435000001a0046000390000000b05500039000000000505041a000000000054043500000006040000290000000004040433000000040500002900000000050504330000000005050433000000000454004b0000083b0000a13d00000000010104330000000004000416000b00000004001d000000000114004b000008410000a13d000000400100043d000003250200004100000ac60000013d0000000002000416000000000202004b00000a380000c13d0000000309000039000000000309041a000000000400041a0000000002000414000002dc04400197000000040640008c000006380000c13d000000000151034f00000001020000390000000003000031000006a30000013d0000000001000416000000000101004b00000a380000c13d000000000100041a000004d00000013d0000000002000416000000000202004b00000a380000c13d000000040250008a000000200220008c00000a380000413d0000000401100370000000000101043b000002dc06100197000002dc0110009c00000a380000213d000000000100041a000002dc051001970000000002000411000000000325004b0000068e0000c13d000000000206004b000007040000c13d000002e101000041000000800010043f000000840000043f000003050100004100000b66000104300000000002000416000000000202004b00000a380000c13d000000040250008a000000200220008c00000a380000413d0000000401100370000000000101043b000d00000001001d0000000101000039000000000201041a0000032601000041000000800010043f0000000001000414000002dc02200197000000040320008c000006410000c13d0000000003000031000000a00130008c0000000004030019000000a0040080390000066c0000013d0000000002000416000000000202004b00000a380000c13d000000040250008a000000200220008c00000a380000413d0000000401100370000000000101043b000d00000001001d00000000001004350000000601000039000c00000001001d000000200010043f000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002fe011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d000000000301043b000000400400043d000003070140009c000008350000213d000001c001400039000000400010043f000000000103041a00000000021404360000000101300039000000000101041a000002dc01100197000400000002001d00000000001204350000000201300039000000000101041a0000004002400039000600000002001d00000000001204350000000301300039000000000101041a0000006002400039000500000002001d0000000000120435000a00000004001d00000080014000390000000402300039000000000202041a0000000000210435000b00000003001d0000000501300039000000000301041a000000400200043d000900000002001d000700000003001d0000000002320436000800000002001d0000000000100435000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002ff011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d0000000705000029000000000205004b00000008040000290000042f0000613d000000000101043b0000000002000019000000000301041a000002dc03300197000000000434043600000001011000390000000102200039000000000352004b000004280000413d000000090600002900000000016400490000001f01100039000000200500008a000000000251016f0000000001620019000000000221004b00000000020000190000000102004039000003000310009c0000000b030000290000000a04000029000008350000213d0000000102200190000008350000c13d000800000005001d000000400010043f000000a00140003900000000006104350000000601300039000000000301041a000000400200043d000900000002001d000300000003001d0000000002320436000700000002001d0000000000100435000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002ff011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d0000000304000029000000000204004b0000000705000029000004600000613d000000000101043b0000000002000019000000000301041a000000000535043600000001011000390000000102200039000000000342004b0000045a0000413d000000090400002900000000014500490000001f01100039000000080210017f0000000001420019000000000221004b00000000020000190000000102004039000003000310009c0000000b050000290000000a06000029000008350000213d0000000102200190000008350000c13d000000400010043f000000c00160003900000000004104350000000701500039000000000201041a000000e00160003900000000002104350000000802500039000000000202041a000001000360003900000000002304350000000902500039000000000202041a000001200360003900000000002304350000000a02500039000000000202041a0000ff00032001900000000003000019000000010300c0390000016004600039000000000034043500000308032001980000000003000019000000010300c03900000180046000390000000000340435000000ff022001900000000002000019000000010200c03900000140036000390000000000230435000001a0026000390000000b05500039000000000505041a000000000052043500000006020000290000000002020433000000000502004b000007ef0000613d0000000004040433000000000404004b0000083e0000613d0000000003030433000000000303004b0000083e0000c13d00000005030000290000000003030433000b00000003001d000000000323004b0000073d0000413d00000000030104330000000b0420006900000000514300a90000000b0220006b000004a90000613d00000000424100d9000000000232004b0000073d0000c13d000003e81210011a000a00000002001d0000000b0120006b0000073d0000413d0000000d0100002900000000001004350000000c01000029000000200010043f000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002fe011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d000000000101043b0000000201100039000000000001041b00000004010000290000000001010433000002dc04100197000000040140008c000006b50000613d0000030b010000410000000a030000290000000b0230006b000000000100c01900000a410000c13d00000000020400190b640b5a0000040f00000a470000013d0000000001000416000000000101004b00000a380000c13d0000000101000039000000000101041a000002dc01100197000006300000013d0000000001000416000000000101004b00000a380000c13d00000004010000390000062f0000013d0000000002000416000000000202004b00000a380000c13d000000040250008a000000200220008c00000a380000413d0000024002000039000000400020043f000000800000043f000000a00000043f000000c00000043f000000e00000043f000001000000043f0000006002000039000001200020043f000001400020043f0000000401100370000001600000043f000001800000043f000001a00000043f000001c00000043f000001e00000043f000002000000043f000002200000043f000000000101043b00000000001004350000000601000039000000200010043f000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002fe011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d000000000301043b000000400200043d0000032a0120009c000008350000813d000001c001200039000000400010043f000000000103041a00000000041204360000000101300039000000000101041a000002dc01100197000800000004001d00000000001404350000000201300039000000000101041a0000004004200039000700000004001d00000000001404350000000301300039000000000101041a0000006004200039000500000004001d0000000000140435000d00000002001d00000080022000390000000401300039000000000101041a000600000002001d0000000000120435000c00000003001d0000000501300039000000000301041a000000400200043d000b00000002001d000900000003001d0000000002320436000a00000002001d0000000000100435000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002ff011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d0000000905000029000000000205004b0000000a040000290000053a0000613d000000000101043b0000000002000019000000000301041a000002dc03300197000000000434043600000001011000390000000102200039000000000352004b000005330000413d0000000b0600002900000000016400490000001f01100039000000200500008a000000000251016f0000000001620019000000000221004b00000000020000190000000102004039000003000310009c0000000d030000290000000c04000029000008350000213d0000000102200190000008350000c13d000a00000005001d000000400010043f000000a001300039000300000001001d00000000006104350000000601400039000000000301041a000000400200043d000b00000002001d000400000003001d0000000002320436000900000002001d0000000000100435000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002ff011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d0000000405000029000000000205004b00000009040000290000056c0000613d000000000101043b0000000002000019000000000301041a000000000434043600000001011000390000000102200039000000000352004b000005660000413d0000000b0600002900000000016400490000001f011000390000000a0210017f0000000001620019000000000221004b00000000020000190000000102004039000003000310009c0000000d040000290000000c05000029000008350000213d0000000102200190000008350000c13d000000400010043f000000c00140003900000000006104350000000702500039000000000202041a000000e003400039000a00000003001d00000000002304350000000802500039000000000202041a0000010003400039000900000003001d00000000002304350000000902500039000000000202041a0000012003400039000400000003001d00000000002304350000000a02500039000000000202041a00000308032001980000000003000019000000010300c0390000018006400039000b00000006001d00000000003604350000ff00032001900000000003000019000000010300c0390000016006400039000200000006001d0000000000360435000000ff022001900000000002000019000000010200c0390000014003400039000100000003001d00000000002304350000000b02500039000000000202041a000001a003400039000c00000003001d00000000002304350000002002000039000000400700043d00000000022704360000000003040433000000000032043500000008020000290000000002020433000002dc02200197000000400370003900000000002304350000000702000029000000000202043300000060037000390000000000230435000000050200002900000000020204330000008003700039000000000023043500000006020000290000000002020433000000a003700039000000000023043500000003020000290000000003020433000001c002000039000000c0047000390000000000240435000001e002700039000000000403043300000000004204350000020002700039000000000504004b000005ce0000613d000000000500001900000020033000390000000006030433000002dc0660019700000000026204360000000105500039000000000645004b000005c70000413d0000000003720049000000200330008a0000000001010433000000e0047000390000000000340435000d00000007001d0b640af70000040f0000000a0200002900000000020204330000000d04000029000001000340003900000000002304350000000902000029000000000202043300000120034000390000000000230435000000040200002900000000020204330000014003400039000000000023043500000001020000290000000002020433000000000202004b0000000002000019000000010200c0390000016003400039000000000023043500000002020000290000000002020433000000000202004b0000000002000019000000010200c039000001800340003900000000002304350000000b020000290000000002020433000000000202004b0000000002000019000000010200c039000001a00340003900000000002304350000000c020000290000000002020433000001c00340003900000000002304350000028c0000013d0000000002000416000000000202004b00000a380000c13d000000040250008a000000200220008c00000a380000413d0000000401100370000000000101043b00000000001004350000000601000039000000200010043f000000400200003900000000010000190b640b440000040f0000000a01100039000000000301041a000003140230019700000100022001bf000000000021041b000000000100001900000b650001042e0000000002000416000000000202004b00000a380000c13d000000040250008a000000200220008c00000a380000413d000000000200041a000002dc032001970000000002000411000000000323004b0000068e0000c13d0000000401100370000000000601043b0000000201000039000000000501041a000000000061041b000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002de011001c70000800d0200003900000003030000390000032004000041000006b20000013d0000000001000416000000000101004b00000a380000c13d0000000201000039000000000101041a000000800010043f000003060100004100000b650001042e000000000105004b000006930000c13d0000031e01000041000006960000013d0000068e0000013d000d00000009001d000002da01000041000002da0520009c0000000002018019000000c001200210000000000203004b000006990000c13d00000000020400190000069c0000013d000002da03000041000002da0410009c0000000001038019000000c0011002100000031c011001c70b640b5f0000040f00000000030100190000006003300270000002da03300197000000a00430008c0000000004030019000000a0040080390000001f0540018f0000000506400272000006590000613d00000000070000190000000508700210000000000981034f000000000909043b000000800880003900000000009804350000000107700039000000000867004b000006510000413d000000000705004b000006680000613d0000000506600210000000000761034f00000003055002100000008006600039000000000806043300000000085801cf000000000858022f000000000707043b0000010005500089000000000757022f00000000055701cf000000000585019f0000000000560435000000000003001f00010000000103550000000102200190000006e10000613d0000001f01400039000001e00110018f0000008001100039000000400010043f000000a00230008c00000a380000413d000000800200043d000003270220009c00000a380000213d000001000200043d000003270220009c00000a380000213d000000a00300043d00000328423000d1000000000403004b000007280000c13d0000000d0500002900000329435000d1000000000405004b000006830000613d0000000d543000fa000003290440009c0000073d0000c13d000000000402004b000007460000c13d0000030e0100004100000000001004350000001201000039000008380000013d0000030402000041000000800020043f000000840010043f000003050100004100000b66000104300000030401000041000000800010043f000000840020043f000003050100004100000b6600010430000000000106004b000007110000c13d0000031d01000041000000800010043f0000031c0100004100000b6600010430000002de011001c7000080090200003900000000050000190b640b5a0000040f000100000001035500000000030100190000006003300270000002da0030019d000002da033001970000000d09000029000000000403004b000006b70000c13d000000010120019000000ac40000613d000000000509041a000000000009041b000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002de011001c70000800d02000039000000020300003900000310040000410b640b5a0000040f000000010120019000000a380000613d000000000100001900000b650001042e0000003f04300039000000200500008a000000000454016f000000400500043d0000000004450019000000000654004b00000000060000190000000106004039000003000740009c000008350000213d0000000106600190000008350000c13d000000400040043f0000001f0430018f00000000053504360000000503300272000006d10000613d000000000600001900000005076002100000000008750019000000000771034f000000000707043b00000000007804350000000106600039000000000736004b000006c90000413d000000000604004b000006a50000613d0000000503300210000000000131034f00000000033500190000000304400210000000000503043300000000054501cf000000000545022f000000000101043b0000010004400089000000000141022f00000000014101cf000000000151019f0000000000130435000006a50000013d000000400200043d0000001f0430018f0000000505300272000006ee0000613d000000000600001900000005076002100000000008720019000000000771034f000000000707043b00000000007804350000000106600039000000000756004b000006e60000413d000000000604004b000006fd0000613d0000000505500210000000000151034f00000000055200190000000304400210000000000605043300000000064601cf000000000646022f000000000101043b0000010004400089000000000141022f00000000014101cf000000000161019f0000000000150435000002da01000041000002da0420009c000000000201801900000040012002100000006002300210000000000121019f00000b6600010430000002dd01100197000000000161019f000000000010041b000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002de011001c70000800d020000390000000303000039000002df04000041000006b20000013d00000000125700a900000000315200d9000000000171004b0000073d0000c13d00000000312600a9000000000302004b0000071b0000613d00000000322100d9000000000262004b0000073d0000c13d00000000325600a900000000435200d9000000000363004b0000073d0000c13d000003e83110011a000000000321004b0000073d0000413d00000000012100490000000002000416000000000112004b000007f20000813d0000031b01000041000006960000013d000000010400008a000000000443004b0000072d0000c13d000003090420009c0000073d0000613d000003094330012c00000309064000990000000006046019000003097420012c000000000334013f0000030904700099000000000407601900000000456400d9000000ff033002120000000004530049000000000334019f0000000003056019000000000405004b000000000503c019000003280350009c0000067c0000613d0000030e0100004100000000001004350000001101000039000008380000013d0000000000410435000002da02000041000002da0310009c0000000001028019000007480000013d00000000322300d90000000000210435000000400110021000000301011001c700000b650001042e0000000104000029000000000504043300000000040504330000000d07000029000000000447004b000007ef0000813d0000000504700210000000200440003900000000054500190000000005050433000002dc055001970000000a0550006b000007ef0000c13d00000000010104330000000005010433000000000575004b00000a3d0000a13d00000000014100190000000001010433000000000401004b000007ef0000613d0000000003030433000000000303004b000007ef0000613d0000000002020433000000000202004b000007ef0000c13d0000000802000029000000000202043300090000301200ad000000000302004b0000076e0000613d00000009322000f9000000000112004b0000073d0000c13d0000000a0100002900000000001004350000000501000039000000200010043f000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002fe011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d0000000902000029000003e82a20011a000000000101043b000000000301041a0000000002a3001900000309052001970000030906a001970000030904000041000000000765004b0000000007000019000000000704401900000000080000190000000008042019000000000565013f0000000006a2004b00000000060000190000000006044019000003090950009c000000000806c01900080000000a001d0000000006a2004b00000000060000190000000006048019000003090550009c000000000706c019000000010500008a000000000553004b000000000500001900000000050420190000030906300197000003090960009c00000000040080190000030906600167000003090660009c000000000405c019000000000507004b0000000005000019000000010500c039000000ff03300270000000000353016f000000000508004b0000000005000019000000010500c039000000000404004b0000000004000019000000010400c039000000000454016f000000010440018f00000000034301a00000073d0000c13d000000000021041b0000000601000029000000000201043300000008312000b90000000903000029000003e80330008c000007b80000413d00000008431000fa000000000223004b0000073d0000c13d0000030d1210012a000900000002001d000000080120006b0000073d0000413d0000000c0100002900000000001004350000000b01000029000000200010043f000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002fe011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d000000000101043b0000000601100039000000000201041a0000000d0220006c00000a3d0000a13d0000000000100435000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002ff011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d000000000101043b0000000d01100029000000000001041b0000000301000039000000000301041a0000000902300029000000000332004b0000000003000019000000010300403900000001033001900000073d0000c13d0000000904000029000d000800400071000000000021041b00000000010004140000000a02000029000000040220008c00000aa10000c13d0000000102000039000000000100003100000ab40000013d000000400100043d000003120200004100000ac60000013d0000024001000039000000400010043f0000006001000039000001200010043f000001400010043f000001c00000043f000001e00000043f000002000000043f000002200000043f0000000001000411000d00000001001d000000a00010043f000b00000005001d000001000050043f000900000007001d000001600070043f0000000201000039000000000101041a000001a00010043f000a00000006001d000001800060043f000000e00020043f000800000002001d000000c00020043f0000000401000039000c00000001001d000000000101041a000000800010043f00000000001004350000000601000039000000200010043f000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002fe011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d000000000401043b000000800100043d000000000014041b000000a00100043d000002dc011001970000000102400039000000000302041a000002dd03300197000000000113019f000000000012041b0000000201400039000000c00200043d000000000021041b0000000301400039000000e00200043d000000000021041b000600000004001d0000000401400039000001000200043d000000000021041b000001200100043d000500000001001d0000000001010433000700000001001d000003000110009c0000091c0000a13d0000030e0100004100000000001004350000004101000039000000040010043f000002e20100004100000b6600010430000000400100043d000003220200004100000ac60000013d000000400100043d000003110200004100000ac60000013d0000000001030433000000000101004b00000a3a0000c13d0000000001020433000000000101004b00000a3a0000c13d0000000d0100002900000000001004350000000c01000029000000200010043f000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002fe011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d000000000101043b0000000501100039000000000201041a000a00000002001d000003000220009c000008350000213d0000000a020000290000000102200039000000000021041b0000000000100435000002da030000410000000001000414000002da0210009c0000000001038019000000c001100210000002ff011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d000000000101043b0000000a01100029000000000201041a000002dd022001970000000003000411000a00000003001d000000000232019f000000000021041b0000000d0100002900000000001004350000000c01000029000000200010043f0000000001000414000002da0210009c000002da01008041000000c001100210000002fe011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d000000000101043b0000000601100039000000000201041a000900000002001d000003000220009c000008350000213d00000009020000290000000102200039000000000021041b0000000000100435000002da030000410000000001000414000002da0210009c0000000001038019000000c001100210000002ff011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d000000000101043b00000009011000290000000b02000029000000000021041b0000000d0100002900000000001004350000000c01000029000000200010043f0000000001000414000002da0210009c000002da01008041000000c001100210000002fe011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d000000000101043b0000000301100039000000000301041a0000000b02300029000000000332004b0000000003000019000000010300403900000001033001900000073d0000c13d000000000021041b0000000a0100002900000000001004350000000501000039000c00000001001d000000200010043f000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002fe011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d000000000101043b0000000101100039000000000201041a000900000002001d000003000220009c000008350000213d00000009020000290000000102200039000000000021041b0000000000100435000002da030000410000000001000414000002da0210009c0000000001038019000000c001100210000002ff011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d000000000101043b00000009011000290000000d02000029000000000021041b0000000a0100002900000000001004350000000c01000029000000200010043f0000000001000414000002da0210009c000002da01008041000000c001100210000002fe011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d000000000101043b000000000401041a0000000b0a0000290000000002a40049000003090520019700000309064001970000030903000041000000000765004b0000000007000019000000000703201900000000080000190000000008034019000000000565013f000000000642004b00000000060000190000000006032019000003090950009c000000000806c019000000000442004b00000000040000190000000004034019000003090550009c000000000704c019000000010400008a00000000044a004b000000000400001900000000040320190000030905a00197000003090650009c00000000030080190000030905500167000003090550009c000000000304c019000000000407004b0000000004000019000000010400c039000000ff05a00270000000000445016f000000000508004b0000000005000019000000010500c039000000000303004b0000000003000019000000010300c039000000000353016f000000010330018f00000000033401a00000073d0000c13d000000000021041b000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002de011001c70000800d020000390000000303000039000003240400004100000ac10000013d00000006010000290000000502100039000000000302041a0000000701000029000400000002001d000000000012041b000300000003001d000000000131004b0000093a0000813d00000004010000290000000000100435000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002ff011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d000000000201043b00000007012000290000000302200029000000000321004b0000093a0000813d000000000001041b0000000101100039000000000321004b000009360000413d00000004010000290000000000100435000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002ff011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d000000000101043b0000000706000029000000000206004b0000000505000029000009540000613d0000000002000019000000000312001900000020055000390000000004050433000002dc04400197000000000043041b0000000102200039000000000362004b0000094c0000413d000001400100043d000500000001001d0000000001010433000700000001001d000003000110009c000008350000213d00000006010000290000000602100039000000000302041a0000000701000029000400000002001d000000000012041b000300000003001d000000000131004b000009780000813d00000004010000290000000000100435000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002ff011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d000000000201043b00000007012000290000000302200029000000000321004b000009780000813d000000000001041b0000000101100039000000000321004b000009740000413d00000004010000290000000000100435000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002ff011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d000000000101043b0000000706000029000000000206004b0000000505000029000009910000613d0000000002000019000000000312001900000020055000390000000004050433000000000043041b0000000102200039000000000362004b0000098a0000413d00000006050000290000000701500039000001600200043d000000000021041b0000000801500039000001800200043d000000000021041b0000000901500039000001a00200043d000000000021041b0000031501000041000002000200043d000000000202004b0000000001006019000001c00200043d000000000202004b0000000a02500039000000000302041a0000031603300197000000010330c1bf000001e00400043d000000000404004b000001000330c1bf000000000113019f000000000012041b0000000b01500039000002200200043d000000000021041b0000000d0100002900000000001004350000000501000039000700000001001d000000200010043f000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002fe011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d0000000c02000029000000000202041a000500000002001d000000000101043b0000000101100039000000000201041a000600000002001d000003000220009c000008350000213d00000006020000290000000102200039000000000021041b0000000000100435000002da030000410000000001000414000002da0210009c0000000001038019000000c001100210000002ff011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d000000000101043b00000006011000290000000502000029000000000021041b0000000d0100002900000000001004350000000701000029000000200010043f0000000001000414000002da0210009c000002da01008041000000c001100210000002fe011001c700008010020000390b640b5f0000040f000000010220019000000a380000613d000000000101043b000000000401041a000000080a0000290000000002a40049000003090520019700000309064001970000030903000041000000000765004b0000000007000019000000000703201900000000080000190000000008034019000000000565013f000000000642004b00000000060000190000000006032019000003090950009c000000000806c019000000000442004b00000000040000190000000004034019000003090550009c000000000704c019000000010400008a00000000054a004b000000000500001900000000050320190000030906a00197000003090960009c00000000030080190000030906600167000003090660009c000000000305c019000000000507004b0000000005000019000000010500c039000000ff06a00270000000000556016f000000000608004b0000000006000019000000010600c039000000000303004b0000000003000019000000010300c039000000000363016f000000010330018f00000000033501a00000000b070000290000000a0500002900000009060000290000073d0000c13d000000000021041b0000000c01000029000000000101041a000000000241004b0000073d0000613d00000001011000390000000c03000029000000000013041b000000400100043d00000060021000390000031704000041000000000042043500000040021000390000031804000041000000000042043500000020021000390000002904000039000000000042043500000020020000390000000000210435000002da020000410000000008000414000002da0480009c0000000008028019000002da0410009c00000000010280190000004001100210000000c002800210000000000112019f00000319011001c70000800d020000390000031a04000041000006b20000013d000000000100001900000b6600010430000000400100043d000003230200004100000ac60000013d0000030e0100004100000000001004350000003201000039000008380000013d0000000a030000290000000b03300069000002de011001c7000080090200003900000000050000190b640b5a0000040f000100000001035500000000030100190000006003300270000002da0030019d000002da033001970000000102200190000006b50000c13d000000400200043d0000001f0430018f000000050530027200000a5b0000613d000000000600001900000005076002100000000008720019000000000771034f000000000707043b00000000007804350000000106600039000000000756004b00000a530000413d000000000604004b00000a6a0000613d0000000505500210000000000151034f00000000055200190000000304400210000000000605043300000000064601cf000000000646022f000000000101043b0000010004400089000000000141022f00000000014101cf000000000161019f0000000000150435000006fd0000013d000002de011001c700008009020000390000000c030000290000000a0400002900000000050000190b640b5a0000040f000100000001035500000000030100190000006003300270000002da0030019d000002da03300197000000010220019000000a840000613d000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002de011001c70000800d0200003900000003030000390000030c040000410000000a050000290000000c06000029000006b20000013d000000400200043d0000001f0430018f000000050530027200000a910000613d000000000600001900000005076002100000000008720019000000000771034f000000000707043b00000000007804350000000106600039000000000756004b00000a890000413d000000000604004b00000aa00000613d0000000505500210000000000151034f00000000055200190000000304400210000000000605043300000000064601cf000000000646022f000000000101043b0000010004400089000000000141022f00000000014101cf000000000161019f0000000000150435000006fd0000013d000002da02000041000002da0310009c0000000001028019000000c0011002100000000903000029000000080230006b00000aaa0000c13d0000000a0200002900000aaf0000013d000002de011001c700008009020000390000000d030000290000000a0400002900000000050000190b640b5a0000040f00010000000103550000006001100270000002da0010019d000002da01100197000000000301004b00000acd0000c13d000000010120019000000ac40000613d000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002de011001c70000800d0200003900000003030000390000030c040000410000000a050000290000000d06000029000006b20000013d000000400100043d0000030f020000410000000000210435000002da02000041000002da0310009c0000000001028019000000400110021000000303011001c700000b66000104300000003f03100039000000070330017f000000400400043d0000000003340019000000000543004b00000000050000190000000105004039000003000630009c000008350000213d0000000105500190000008350000c13d000000400030043f0000001f0310018f00000000041404360000000105000367000000050110027200000ae70000613d000000000600001900000005076002100000000008740019000000000775034f000000000707043b00000000007804350000000106600039000000000716004b00000adf0000413d000000000603004b00000ab60000613d0000000501100210000000000515034f00000000011400190000000303300210000000000401043300000000043401cf000000000434022f000000000505043b0000010003300089000000000535022f00000000033501cf000000000343019f000000000031043500000ab60000013d000000000301001900000000040304330000000001420436000000000204004b00000b030000613d00000000020000190000002003300039000000000503043300000000015104360000000102200039000000000542004b00000afd0000413d000000000001042d0000032b0210009c00000b090000813d0000004001100039000000400010043f000000000001042d0000030e0100004100000000001004350000004101000039000000040010043f000002e20100004100000b66000104300003000000000002000000000301041a000000400200043d000300000002001d000100000003001d0000000002320436000200000002001d0000000000100435000002da010000410000000002000414000002da0320009c0000000002018019000000c001200210000002ff011001c700008010020000390b640b5f0000040f000000010220019000000b3c0000613d0000000105000029000000000205004b000000020400002900000b2d0000613d000000000101043b0000000002000019000000000301041a000000000434043600000001011000390000000102200039000000000352004b00000b270000413d000000030100002900000000021400490000001f03200039000000200200008a000000000223016f0000000004120019000000000224004b00000000020000190000000102004039000003000340009c00000b3e0000213d000000010220019000000b3e0000c13d000000400040043f000000000001042d000000000100001900000b66000104300000030e0100004100000000001004350000004101000039000000040010043f000002e20100004100000b6600010430000002da03000041000002da0410009c00000000010380190000004001100210000002da0420009c00000000020380190000006002200210000000000112019f0000000002000414000002da0420009c0000000002038019000000c002200210000000000112019f000002de011001c700008010020000390b640b5f0000040f000000010220019000000b580000613d000000000101043b000000000001042d000000000100001900000b660001043000000b5d002104210000000102000039000000000001042d0000000002000019000000000001042d00000b62002104230000000102000039000000000001042d0000000002000019000000000001042d00000b640000043200000b650001042e00000b6600010430000000000000000000000000000000000000000000000000000000000000000000000000ffffffff00000000000000000000000000000000000000000000000000000001ffffffe0000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000008be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e000000002000000000000000000000000000000400000010000000000000000001e4fbdf700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000000000000000000000940c154a00000000000000000000000000000000000000000000000000000000ced72f8600000000000000000000000000000000000000000000000000000000f222d0b800000000000000000000000000000000000000000000000000000000f222d0b900000000000000000000000000000000000000000000000000000000f2fde38b00000000000000000000000000000000000000000000000000000000f39522e400000000000000000000000000000000000000000000000000000000ced72f8700000000000000000000000000000000000000000000000000000000d4aae80f00000000000000000000000000000000000000000000000000000000bf4e285700000000000000000000000000000000000000000000000000000000bf4e285800000000000000000000000000000000000000000000000000000000c879657200000000000000000000000000000000000000000000000000000000cc11298e00000000000000000000000000000000000000000000000000000000940c154b00000000000000000000000000000000000000000000000000000000b740af790000000000000000000000000000000000000000000000000000000069fe0e2c00000000000000000000000000000000000000000000000000000000833b1fcd00000000000000000000000000000000000000000000000000000000833b1fce000000000000000000000000000000000000000000000000000000008da5cb5b000000000000000000000000000000000000000000000000000000009062ce7d0000000000000000000000000000000000000000000000000000000069fe0e2d00000000000000000000000000000000000000000000000000000000715018a6000000000000000000000000000000000000000000000000000000002ddd9afe000000000000000000000000000000000000000000000000000000002ddd9aff0000000000000000000000000000000000000000000000000000000039fb3f45000000000000000000000000000000000000000000000000000000004a1342cc00000000000000000000000000000000000000000000000000000000061e494f000000000000000000000000000000000000000000000000000000000f53a47002000000000000000000000000000000000000400000000000000000000000000200000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffff00000000000000000000000000000000000000200000000000000000000000001fe25f4c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000118cdaa70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000240000008000000000000000000000000000000000000000000000000000000020000000800000000000000000000000000000000000000000000000000000000000000000fffffffffffffe3f0000000000000000000000000000000000000000000000000000000000ff000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005f5e10000000000000008fc0000000000000000000000000000000000000000000000003c92031d788fb886d6b0cef0d544d742f65fe462e576906cfe03a5f36ef1244000000000000000000000000000000000000000000000000000000000000186a04e487b71000000000000000000000000000000000000000000000000000000004a5f2a1b00000000000000000000000000000000000000000000000000000000f4f2ad6f4b10f9853be76745070984d581f6da2399617776ec329308e46d0804f0f84dd500000000000000000000000000000000000000000000000000000000dfba2d6c000000000000000000000000000000000000000000000000000000006f4d463f06d6303ccb5e5f3efff065c43013611c234549b89243f40257a7b722ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff0000000000000000000000000000000000000000000000000000000000010000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000061206170756573746100000000000000000000000000000000000000000000004171756920656c20737472696e67206465206c6f73206461746f73206465206c0200000000000000000000000000000000000080000000000000000000000000e7d6bd5223226a9dafb832e86113f33399d2c3d382f6f8eed9d8dcc7c353f237745f581d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000008000000000000000002e2785d6000000000000000000000000000000000000000000000000000000000d27d3e9000000000000000000000000000000000000000000000000000000007ed63ccd000000000000000000000000000000000000000000000000000000003ddd765e918a581cb556c6b10e6c7cb12c695d5eb7516a9be17358dec5ef3c96ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff0081071d2800000000000000000000000000000000000000000000000000000000ba05bf470000000000000000000000000000000000000000000000000000000036ded20b495c4e5f788b261f134395c38eb7360ff2bb88fc16c7b67751939328ed47562600000000000000000000000000000000000000000000000000000000feaf968c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffff00000000000000000000000000000000000000000000000000000002540be4000000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000fffffffffffffe40000000000000000000000000000000000000000000000000ffffffffffffffc0f8f685ccff694f9136bb983dd8a5dc495d782bc64d078985530880ffec1c39f2"
          },
          "methodIdentifiers": {
            "collectFees()": "c8796572",
            "createBet(uint256,uint256,uint256)": "9062ce7d",
            "endBet(uint256,bool)": "4a1342cc",
            "getBet(uint256)": "061e494f",
            "getCollateralBack(uint256)": "bf4e2858",
            "getFee()": "ced72f87",
            "getFeesCollected()": "d4aae80f",
            "getNumberOfBets()": "f222d0b9",
            "getNumberOfChallenger(uint256)": "f39522e4",
            "getOracle()": "833b1fce",
            "getProfile(address)": "0f53a470",
            "getRewards(uint256,uint256)": "cc11298e",
            "getUsdConversionRate(uint256)": "2ddd9aff",
            "joinBet(uint256)": "39fb3f45",
            "lockBet(uint256)": "940c154b",
            "owner()": "8da5cb5b",
            "renounceOwnership()": "715018a6",
            "setFee(uint256)": "69fe0e2d",
            "setUsdOracle(address)": "b740af79",
            "transferOwnership(address)": "f2fde38b"
          }
        },
        "irOptimized": "/// @use-src 1:\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\", 2:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\", 3:\"src/P2PBetting.sol\"\nobject \"P2PBetting_1140\" {\n    code {\n        {\n            /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n            let _1 := memoryguard(0x80)\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"P2PBetting_1140\")\n            let argSize := sub(codesize(), programSize)\n            let newFreePtr := add(_1, and(add(argSize, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, _1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0x24)\n            }\n            mstore(64, newFreePtr)\n            codecopy(_1, programSize, argSize)\n            if slt(sub(add(_1, argSize), _1), 64)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n            let value := mload(_1)\n            let value_1 := mload(add(_1, 32))\n            let _2 := sub(shl(160, 1), 1)\n            let _3 := and(value_1, _2)\n            if iszero(eq(value_1, _3))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 1:1269:1364  \"if (initialOwner == address(0)) {...\"\n            if /** @src 1:1273:1299  \"initialOwner == address(0)\" */ iszero(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _3)\n            /// @src 1:1269:1364  \"if (initialOwner == address(0)) {...\"\n            {\n                /// @src 1:1322:1353  \"OwnableInvalidOwner(address(0))\"\n                let _4 := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ mload(64)\n                /// @src 1:1322:1353  \"OwnableInvalidOwner(address(0))\"\n                mstore(_4, shl(224, 0x1e4fbdf7))\n                /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                mstore(/** @src 1:1322:1353  \"OwnableInvalidOwner(address(0))\" */ add(_4, 4), /** @src -1:-1:-1 */ 0)\n                /// @src 1:1322:1353  \"OwnableInvalidOwner(address(0))\"\n                revert(_4, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 36)\n            }\n            let _5 := sload(/** @src -1:-1:-1 */ 0)\n            /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n            sstore(/** @src -1:-1:-1 */ 0, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ or(and(_5, not(sub(shl(160, 1), 1))), _3))\n            /// @src 1:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n            let _6 := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ mload(64)\n            /// @src 1:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n            log3(/** @src -1:-1:-1 */ 0, 0, /** @src 1:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ and(_5, _2), /** @src 1:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ _3)\n            /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n            sstore(/** @src 3:3111:3123  \"s_fee = fee_\" */ 0x02, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ value)\n            let _7 := datasize(\"P2PBetting_1140_deployed\")\n            codecopy(_6, dataoffset(\"P2PBetting_1140_deployed\"), _7)\n            return(_6, _7)\n        }\n    }\n    /// @use-src 1:\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\", 2:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\", 3:\"src/P2PBetting.sol\"\n    object \"P2PBetting_1140_deployed\" {\n        code {\n            {\n                /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                mstore(64, memoryguard(0x80))\n                let _1 := 4\n                if iszero(lt(calldatasize(), _1))\n                {\n                    switch shr(224, calldataload(0))\n                    case 0x061e494f {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        /// @src 3:1979:1983  \"1000\"\n                        pop(allocate_and_zero_memory_struct_struct_Bet())\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, calldataload(_1))\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 32, /** @src 3:10282:10288  \"s_Bets\" */ 0x06)\n                        /// @src 3:1979:1983  \"1000\"\n                        let dataSlot := keccak256(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 64)\n                        let memPtr := mload(64)\n                        finalize_allocation_17595(memPtr)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(memPtr, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ sload(dataSlot))\n                        let cleaned := and(sload(add(dataSlot, 1)), sub(shl(160, 1), 1))\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ add(memPtr, 32), cleaned)\n                        let _2 := sload(add(dataSlot, 2))\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ add(memPtr, 64), /** @src 3:1979:1983  \"1000\" */ _2)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let _3 := sload(add(dataSlot, 3))\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ add(memPtr, 96), /** @src 3:1979:1983  \"1000\" */ _3)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let _4 := sload(add(dataSlot, _1))\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ add(memPtr, 128), /** @src 3:1979:1983  \"1000\" */ _4)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let _5 := copy_array_from_storage_to_memory_array_address_dyn(add(dataSlot, 5))\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ add(memPtr, 160), /** @src 3:1979:1983  \"1000\" */ _5)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let _6 := copy_array_from_storage_to_memory_array_uint256_dyn(add(dataSlot, /** @src 3:10282:10288  \"s_Bets\" */ 0x06))\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ add(memPtr, 192), /** @src 3:1979:1983  \"1000\" */ _6)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let _7 := sload(add(dataSlot, 7))\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ add(memPtr, 224), /** @src 3:1979:1983  \"1000\" */ _7)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let _8 := sload(add(dataSlot, 8))\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ add(memPtr, 256), /** @src 3:1979:1983  \"1000\" */ _8)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let _9 := sload(add(dataSlot, 9))\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ add(memPtr, 288), /** @src 3:1979:1983  \"1000\" */ _9)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let _10 := sload(add(dataSlot, 10))\n                        mstore(add(memPtr, 320), iszero(iszero(and(_10, 0xff))))\n                        mstore(add(memPtr, 352), iszero(iszero(and(shr(8, _10), 0xff))))\n                        mstore(add(memPtr, 384), iszero(iszero(and(shr(16, _10), 0xff))))\n                        let _11 := sload(add(dataSlot, 11))\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ add(memPtr, 416), /** @src 3:1979:1983  \"1000\" */ _11)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let memPos := mload(64)\n                        mstore(memPos, 32)\n                        mstore(add(memPos, 32), mload(memPtr))\n                        mstore(add(memPos, 64), and(mload(add(memPtr, 32)), sub(shl(160, 1), 1)))\n                        mstore(add(memPos, 96), mload(add(memPtr, 64)))\n                        mstore(add(memPos, 128), mload(add(memPtr, 96)))\n                        mstore(add(memPos, 160), mload(add(memPtr, 128)))\n                        let memberValue0 := mload(add(memPtr, 160))\n                        mstore(add(memPos, 192), /** @src 3:1979:1983  \"1000\" */ 448)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let pos := add(memPos, 480)\n                        let length := mload(memberValue0)\n                        mstore(add(memPos, 480), length)\n                        pos := add(memPos, 512)\n                        let srcPtr := add(memberValue0, 32)\n                        let i := 0\n                        for { } lt(i, length) { i := add(i, 1) }\n                        {\n                            mstore(pos, and(mload(srcPtr), sub(shl(160, 1), 1)))\n                            pos := add(pos, 32)\n                            srcPtr := add(srcPtr, 32)\n                        }\n                        let memberValue0_1 := mload(add(memPtr, 192))\n                        mstore(add(memPos, 224), add(sub(pos, memPos), not(31)))\n                        let tail := abi_encode_array_uint256_dyn(memberValue0_1, pos)\n                        mstore(add(memPos, 256), mload(add(memPtr, 224)))\n                        mstore(add(memPos, 288), mload(add(memPtr, 256)))\n                        mstore(add(memPos, 320), mload(add(memPtr, 288)))\n                        mstore(add(memPos, 352), iszero(iszero(mload(add(memPtr, 320)))))\n                        mstore(add(memPos, 384), iszero(iszero(mload(add(memPtr, 352)))))\n                        mstore(add(memPos, 416), iszero(iszero(mload(add(memPtr, 384)))))\n                        mstore(add(memPos, /** @src 3:1979:1983  \"1000\" */ 448), /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ mload(add(memPtr, 416)))\n                        return(memPos, sub(tail, memPos))\n                    }\n                    case 0x0f53a470 {\n                        if callvalue() { revert(0, 0) }\n                        let _12 := 32\n                        if slt(add(calldatasize(), not(3)), _12) { revert(0, 0) }\n                        let value := calldataload(_1)\n                        let _13 := and(value, sub(shl(160, 1), 1))\n                        if iszero(eq(value, _13)) { revert(0, 0) }\n                        let memPtr_1 := mload(64)\n                        finalize_allocation_17596(memPtr_1)\n                        mstore(memPtr_1, 0)\n                        mstore(add(memPtr_1, _12), 96)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, _13)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _12, /** @src 3:10170:10180  \"s_Profiles\" */ 0x05)\n                        /// @src 3:1979:1983  \"1000\"\n                        let dataSlot_1 := keccak256(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 64)\n                        let memPtr_2 := mload(64)\n                        finalize_allocation_17596(memPtr_2)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(memPtr_2, sload(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ dataSlot_1))\n                        let _14 := copy_array_from_storage_to_memory_array_uint256_dyn(add(dataSlot_1, 1))\n                        let _15 := add(memPtr_2, _12)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(_15, _14)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let memPos_1 := mload(64)\n                        mstore(memPos_1, _12)\n                        mstore(add(memPos_1, _12), mload(memPtr_2))\n                        let memberValue0_2 := mload(_15)\n                        mstore(add(memPos_1, 64), 64)\n                        return(memPos_1, sub(abi_encode_array_uint256_dyn(memberValue0_2, add(memPos_1, 96)), memPos_1))\n                    }\n                    case 0x2ddd9aff {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_1 := calldataload(_1)\n                        let cleaned_1 := and(sload(1), sub(shl(160, 1), 1))\n                        /// @src 3:11066:11100  \"USD_ETH_dataFeed.latestRoundData()\"\n                        let _16 := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ mload(64)\n                        /// @src 3:11066:11100  \"USD_ETH_dataFeed.latestRoundData()\"\n                        mstore(_16, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ shl(226, 0x3fabe5a3))\n                        /// @src 3:11066:11100  \"USD_ETH_dataFeed.latestRoundData()\"\n                        let _17 := staticcall(gas(), cleaned_1, _16, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _1, /** @src 3:11066:11100  \"USD_ETH_dataFeed.latestRoundData()\" */ _16, 160)\n                        if iszero(_17)\n                        {\n                            /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                            let pos_1 := mload(64)\n                            returndatacopy(pos_1, 0, returndatasize())\n                            revert(pos_1, returndatasize())\n                        }\n                        let expr_component := 0\n                        /// @src 3:11066:11100  \"USD_ETH_dataFeed.latestRoundData()\"\n                        if _17\n                        {\n                            let _18 := 160\n                            if gt(_18, returndatasize()) { _18 := returndatasize() }\n                            finalize_allocation(_16, _18)\n                            /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                            if slt(sub(/** @src 3:11066:11100  \"USD_ETH_dataFeed.latestRoundData()\" */ add(_16, _18), /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _16), /** @src 3:11066:11100  \"USD_ETH_dataFeed.latestRoundData()\" */ 160)\n                            /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                            { revert(0, 0) }\n                            pop(abi_decode_uint80_fromMemory(_16))\n                            let value_2 := mload(add(_16, 32))\n                            pop(abi_decode_uint80_fromMemory(add(_16, 128)))\n                            /// @src 3:11066:11100  \"USD_ETH_dataFeed.latestRoundData()\"\n                            expr_component := value_2\n                        }\n                        /// @src 3:11146:11157  \"10000000000\"\n                        let _19 := 0x02540be400\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let product := mul(expr_component, /** @src 3:11146:11157  \"10000000000\" */ _19)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        if iszero(or(iszero(expr_component), eq(/** @src 3:11146:11157  \"10000000000\" */ _19, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ sdiv(product, expr_component))))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(_1, 0x11)\n                            revert(0, 0x24)\n                        }\n                        /// @src 3:11290:11294  \"1e18\"\n                        let _20 := 0x0de0b6b3a7640000\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let product_1 := mul(value_1, /** @src 3:11290:11294  \"1e18\" */ _20)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        if iszero(or(iszero(value_1), eq(/** @src 3:11290:11294  \"1e18\" */ _20, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ div(product_1, value_1))))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(_1, 0x11)\n                            revert(0, 0x24)\n                        }\n                        /// @src 3:1979:1983  \"1000\"\n                        if iszero(product)\n                        {\n                            mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, shl(224, 0x4e487b71))\n                            /// @src 3:1979:1983  \"1000\"\n                            mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _1, /** @src 3:1979:1983  \"1000\" */ 0x12)\n                            revert(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, /** @src 3:1979:1983  \"1000\" */ 0x24)\n                        }\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let memPos_2 := mload(64)\n                        mstore(memPos_2, /** @src 3:1979:1983  \"1000\" */ div(product_1, product))\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        return(memPos_2, 32)\n                    }\n                    case 0x39fb3f45 {\n                        let _21 := 32\n                        if slt(add(calldatasize(), not(3)), _21) { revert(0, 0) }\n                        let value_3 := calldataload(_1)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, /** @src 3:1979:1983  \"1000\" */ value_3)\n                        /// @src 3:5143:5149  \"s_Bets\"\n                        let _22 := 0x06\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _21, /** @src 3:5143:5149  \"s_Bets\" */ _22)\n                        /// @src 3:1979:1983  \"1000\"\n                        let dataSlot_2 := keccak256(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 64)\n                        let memPtr_3 := mload(64)\n                        finalize_allocation_17595(memPtr_3)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(memPtr_3, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ sload(dataSlot_2))\n                        let _23 := sub(shl(160, 1), 1)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ add(memPtr_3, _21), and(sload(add(dataSlot_2, 1)), _23))\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ add(memPtr_3, 64), sload(add(dataSlot_2, 2)))\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ add(memPtr_3, 96), sload(add(dataSlot_2, 3)))\n                        let _24 := sload(add(dataSlot_2, _1))\n                        let _25 := add(memPtr_3, 128)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(_25, _24)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let _26 := copy_array_from_storage_to_memory_array_address_dyn(add(dataSlot_2, 5))\n                        let _27 := add(memPtr_3, 160)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(_27, _26)\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ add(memPtr_3, 192), copy_array_from_storage_to_memory_array_uint256_dyn(add(dataSlot_2, /** @src 3:5143:5149  \"s_Bets\" */ _22)))\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ add(memPtr_3, 224), sload(add(dataSlot_2, 7)))\n                        let _28 := sload(add(dataSlot_2, 8))\n                        let _29 := add(memPtr_3, 256)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(_29, _28)\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ add(memPtr_3, 288), sload(add(dataSlot_2, 9)))\n                        let _30 := sload(add(dataSlot_2, 10))\n                        mstore(add(memPtr_3, 320), iszero(iszero(and(_30, 0xff))))\n                        let _31 := add(memPtr_3, 352)\n                        mstore(_31, iszero(iszero(and(shr(8, _30), 0xff))))\n                        let _32 := add(memPtr_3, 384)\n                        mstore(_32, iszero(iszero(and(shr(16, _30), 0xff))))\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ add(memPtr_3, 416), sload(add(dataSlot_2, 11)))\n                        /// @src 3:1979:1983  \"1000\"\n                        let _33 := mload(/** @src 3:5184:5218  \"betSelected.maxNumberOfChallengers\" */ _25)\n                        /// @src 3:5167:5331  \"if (...\"\n                        if /** @src 3:5184:5252  \"betSelected.maxNumberOfChallengers <= betSelected.challengers.length\" */ iszero(gt(_33, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ mload(/** @src 3:5222:5245  \"betSelected.challengers\" */ mload(_27))))\n                        /// @src 3:5167:5331  \"if (...\"\n                        {\n                            /// @src 3:5284:5320  \"P2PBetting__BetIsFullOrNonexistent()\"\n                            let _34 := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ mload(64)\n                            /// @src 3:5284:5320  \"P2PBetting__BetIsFullOrNonexistent()\"\n                            mstore(_34, shl(227, 0x1020e3a5))\n                            revert(_34, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _1)\n                        }\n                        /// @src 3:5340:5441  \"if (msg.value > betSelected.maxEntryFee) {...\"\n                        if /** @src 3:5344:5379  \"msg.value > betSelected.maxEntryFee\" */ gt(/** @src 3:5344:5353  \"msg.value\" */ callvalue(), /** @src 3:1979:1983  \"1000\" */ mload(/** @src 3:5356:5379  \"betSelected.maxEntryFee\" */ _29))\n                        /// @src 3:5340:5441  \"if (msg.value > betSelected.maxEntryFee) {...\"\n                        {\n                            /// @src 3:5402:5430  \"P2PBetting__TooMuchEthSent()\"\n                            let _35 := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ mload(64)\n                            /// @src 3:5402:5430  \"P2PBetting__TooMuchEthSent()\"\n                            mstore(_35, shl(225, 0x76a3ab13))\n                            revert(_35, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _1)\n                        }\n                        let _36 := iszero(/** @src 3:1979:1983  \"1000\" */ mload(/** @src 3:5455:5472  \"betSelected.ended\" */ _32))\n                        /// @src 3:5455:5494  \"betSelected.ended || betSelected.locked\"\n                        let expr := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ iszero(_36)\n                        /// @src 3:5455:5494  \"betSelected.ended || betSelected.locked\"\n                        if _36\n                        {\n                            expr := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ iszero(iszero(/** @src 3:1979:1983  \"1000\" */ mload(/** @src 3:5476:5494  \"betSelected.locked\" */ _31)))\n                        }\n                        /// @src 3:5451:5557  \"if (betSelected.ended || betSelected.locked) {...\"\n                        if expr\n                        {\n                            /// @src 3:5517:5546  \"P2PBetting__CantEnterBetNow()\"\n                            let _37 := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ mload(64)\n                            /// @src 3:5517:5546  \"P2PBetting__CantEnterBetNow()\"\n                            mstore(_37, shl(224, 0xba05bf47))\n                            revert(_37, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _1)\n                        }\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, /** @src 3:1979:1983  \"1000\" */ value_3)\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _21, /** @src 3:5143:5149  \"s_Bets\" */ _22)\n                        /// @src 3:5567:5593  \"s_Bets[betId_].challengers\"\n                        let _38 := add(/** @src 3:1979:1983  \"1000\" */ keccak256(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 64), 5)\n                        let oldLen := sload(_38)\n                        if iszero(lt(oldLen, 18446744073709551616))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(_1, 0x41)\n                            revert(0, 0x24)\n                        }\n                        sstore(_38, add(oldLen, 1))\n                        let slot, offset := storage_array_index_access_uint256_dyn_ptr(_38, oldLen)\n                        let _39 := sload(slot)\n                        /// @src 3:1979:1983  \"1000\"\n                        let shiftBits := shl(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 3, /** @src 3:1979:1983  \"1000\" */ offset)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        sstore(slot, /** @src 3:1979:1983  \"1000\" */ or(and(_39, not(shl(shiftBits, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _23))), /** @src 3:1979:1983  \"1000\" */ shl(shiftBits, /** @src 3:5599:5609  \"msg.sender\" */ caller())))\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, /** @src 3:1979:1983  \"1000\" */ value_3)\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _21, /** @src 3:5143:5149  \"s_Bets\" */ _22)\n                        /// @src 3:5620:5670  \"s_Bets[betId_].challengersMoneyBet.push(msg.value)\"\n                        array_push_from_uint256_to_array_uint256_dyn_storage_ptr(/** @src 3:5620:5654  \"s_Bets[betId_].challengersMoneyBet\" */ add(/** @src 3:1979:1983  \"1000\" */ keccak256(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 64), /** @src 3:5143:5149  \"s_Bets\" */ _22), /** @src 3:5344:5353  \"msg.value\" */ callvalue())\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, /** @src 3:1979:1983  \"1000\" */ value_3)\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _21, /** @src 3:5143:5149  \"s_Bets\" */ _22)\n                        /// @src 3:5680:5705  \"s_Bets[betId_].moneyInBet\"\n                        let _40 := add(/** @src 3:1979:1983  \"1000\" */ keccak256(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 64), 3)\n                        sstore(_40, /** @src 3:5680:5718  \"s_Bets[betId_].moneyInBet += msg.value\" */ checked_add_uint256(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ sload(/** @src 3:5680:5718  \"s_Bets[betId_].moneyInBet += msg.value\" */ _40), /** @src 3:5344:5353  \"msg.value\" */ callvalue()))\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, /** @src 3:5599:5609  \"msg.sender\" */ caller())\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _21, 5)\n                        /// @src 3:5728:5776  \"s_Profiles[msg.sender].betIdHistory.push(betId_)\"\n                        array_push_from_uint256_to_array_uint256_dyn_storage_ptr(/** @src 3:5728:5763  \"s_Profiles[msg.sender].betIdHistory\" */ add(/** @src 3:1979:1983  \"1000\" */ keccak256(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 64), 1), /** @src 3:5728:5776  \"s_Profiles[msg.sender].betIdHistory.push(betId_)\" */ value_3)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, /** @src 3:5599:5609  \"msg.sender\" */ caller())\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _21, 5)\n                        /// @src 3:1979:1983  \"1000\"\n                        let dataSlot_3 := keccak256(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 64)\n                        sstore(dataSlot_3, /** @src 3:5786:5846  \"s_Profiles[msg.sender].balanceVariation -= int256(msg.value)\" */ checked_sub_int256(/** @src 3:1979:1983  \"1000\" */ sload(/** @src 3:5786:5846  \"s_Profiles[msg.sender].balanceVariation -= int256(msg.value)\" */ dataSlot_3), /** @src 3:5344:5353  \"msg.value\" */ callvalue()))\n                        /// @src 3:5862:5903  \"P2PBetting__BetJoined(msg.sender, betId_)\"\n                        log3(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 0, /** @src 3:5862:5903  \"P2PBetting__BetJoined(msg.sender, betId_)\" */ 0x36ded20b495c4e5f788b261f134395c38eb7360ff2bb88fc16c7b67751939328, /** @src 3:5599:5609  \"msg.sender\" */ caller(), /** @src 3:5862:5903  \"P2PBetting__BetJoined(msg.sender, betId_)\" */ value_3)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        return(0, 0)\n                    }\n                    case 0x4a1342cc {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value_4 := calldataload(36)\n                        if iszero(eq(value_4, iszero(iszero(value_4)))) { revert(0, 0) }\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, calldataload(_1))\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 32, /** @src 3:6352:6358  \"s_Bets\" */ 0x06)\n                        /// @src 3:6352:6377  \"s_Bets[betId_].tipsterWon\"\n                        let _41 := add(/** @src 3:1979:1983  \"1000\" */ keccak256(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 64), /** @src 3:6352:6377  \"s_Bets[betId_].tipsterWon\" */ 10)\n                        /// @src 3:6352:6390  \"s_Bets[betId_].tipsterWon = tipsterWon\"\n                        update_storage_value_offsett_bool_to_bool(/** @src 3:6352:6377  \"s_Bets[betId_].tipsterWon\" */ _41, /** @src 3:6352:6390  \"s_Bets[betId_].tipsterWon = tipsterWon\" */ value_4)\n                        /// @src 3:1979:1983  \"1000\"\n                        sstore(_41, or(and(sload(_41), not(16711680)), 65536))\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        return(0, 0)\n                    }\n                    case 0x69fe0e2d {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_5 := calldataload(_1)\n                        /// @src 1:1500:1562  \"modifier onlyOwner() {...\"\n                        fun_checkOwner()\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let _42 := sload(/** @src 3:9464:9469  \"s_fee\" */ 0x02)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        sstore(/** @src 3:9464:9469  \"s_fee\" */ 0x02, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ value_5)\n                        /// @src 3:9508:9545  \"P2PBetting__NewFeeSet(oldfee, newFee)\"\n                        log3(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 0, /** @src 3:9508:9545  \"P2PBetting__NewFeeSet(oldfee, newFee)\" */ 0x3ddd765e918a581cb556c6b10e6c7cb12c695d5eb7516a9be17358dec5ef3c96, _42, value_5)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        return(0, 0)\n                    }\n                    case 0x715018a6 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        /// @src 1:1500:1562  \"modifier onlyOwner() {...\"\n                        fun_checkOwner()\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let _43 := sload(0)\n                        sstore(0, and(_43, shl(160, 0xffffffffffffffffffffffff)))\n                        /// @src 1:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n                        log3(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 0, /** @src 1:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ and(_43, sub(shl(160, 1), 1)), 0)\n                        return(0, 0)\n                    }\n                    case 0x833b1fce {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let cleaned_2 := and(sload(/** @src 3:10050:10066  \"USD_ETH_dataFeed\" */ 0x01), /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ sub(shl(160, 1), 1))\n                        let memPos_3 := mload(64)\n                        mstore(memPos_3, cleaned_2)\n                        return(memPos_3, 32)\n                    }\n                    case 0x8da5cb5b {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let cleaned_3 := and(sload(0), sub(shl(160, 1), 1))\n                        let memPos_4 := mload(64)\n                        mstore(memPos_4, cleaned_3)\n                        return(memPos_4, 32)\n                    }\n                    case 0x9062ce7d {\n                        if slt(add(calldatasize(), not(3)), 96) { revert(0, 0) }\n                        let value_6 := calldataload(_1)\n                        let value_7 := calldataload(36)\n                        let value_8 := calldataload(68)\n                        /// @src 3:3669:3673  \"1000\"\n                        let _44 := 0x03e8\n                        /// @src 3:3656:3744  \"if (odds_ <= 1000) {...\"\n                        if /** @src 3:3660:3673  \"odds_ <= 1000\" */ iszero(gt(value_7, /** @src 3:3669:3673  \"1000\" */ _44))\n                        /// @src 3:3656:3744  \"if (odds_ <= 1000) {...\"\n                        {\n                            /// @src 3:3696:3733  \"P2PBetting__OddsMustBeHigherThanOne()\"\n                            let _45 := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ mload(64)\n                            /// @src 3:3696:3733  \"P2PBetting__OddsMustBeHigherThanOne()\"\n                            mstore(_45, shl(224, 0x7ed63ccd))\n                            revert(_45, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _1)\n                        }\n                        /// @src 3:3753:3862  \"if (maxNumberOfChallengers_ == 0) {...\"\n                        if /** @src 3:3757:3785  \"maxNumberOfChallengers_ == 0\" */ iszero(value_6)\n                        /// @src 3:3753:3862  \"if (maxNumberOfChallengers_ == 0) {...\"\n                        {\n                            /// @src 3:3808:3851  \"P2PBetting__NumberOfChallengersCantBeZero()\"\n                            let _46 := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ mload(64)\n                            /// @src 3:3808:3851  \"P2PBetting__NumberOfChallengersCantBeZero()\"\n                            mstore(_46, shl(224, 0x0d27d3e9))\n                            revert(_46, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _1)\n                        }\n                        /// @src 3:3871:3958  \"if (maxEntryFee_ == 0) {...\"\n                        if /** @src 3:3875:3892  \"maxEntryFee_ == 0\" */ iszero(value_8)\n                        /// @src 3:3871:3958  \"if (maxEntryFee_ == 0) {...\"\n                        {\n                            /// @src 3:3915:3947  \"P2PBetting__MaxPriceCantBeZero()\"\n                            let _47 := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ mload(64)\n                            /// @src 3:3915:3947  \"P2PBetting__MaxPriceCantBeZero()\"\n                            mstore(_47, shl(225, 0x1713c2eb))\n                            revert(_47, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _1)\n                        }\n                        /// @src 3:1979:1983  \"1000\"\n                        let r := div(/** @src 3:4010:4056  \"maxNumberOfChallengers_ * odds_ * maxEntryFee_\" */ checked_mul_uint256(/** @src 3:4010:4041  \"maxNumberOfChallengers_ * odds_\" */ checked_mul_uint256(value_6, value_7), /** @src 3:4010:4056  \"maxNumberOfChallengers_ * odds_ * maxEntryFee_\" */ value_8), /** @src 3:3669:3673  \"1000\" */ _44)\n                        /// @src 3:3967:4231  \"if (...\"\n                        if /** @src 3:3984:4158  \"msg.value <...\" */ lt(/** @src 3:3984:3993  \"msg.value\" */ callvalue(), /** @src 3:4009:4157  \"(maxNumberOfChallengers_ * odds_ * maxEntryFee_) /...\" */ checked_sub_uint256(r, /** @src 3:4103:4157  \"maxNumberOfChallengers_ *...\" */ checked_mul_uint256(value_6, value_8)))\n                        /// @src 3:3967:4231  \"if (...\"\n                        {\n                            /// @src 3:4190:4220  \"P2PBetting__NotEnoughEthSent()\"\n                            let _48 := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ mload(64)\n                            /// @src 3:4190:4220  \"P2PBetting__NotEnoughEthSent()\"\n                            mstore(_48, shl(224, 0x745f581d))\n                            revert(_48, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _1)\n                        }\n                        /// @src 3:4240:4257  \"Bet memory newBet\"\n                        let zero_struct_Bet_mpos := /** @src 3:1979:1983  \"1000\" */ allocate_and_zero_memory_struct_struct_Bet()\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let _49 := 32\n                        /// @src 3:4267:4281  \"newBet.tipster\"\n                        let _50 := add(zero_struct_Bet_mpos, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _49)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(_50, /** @src 3:4284:4294  \"msg.sender\" */ caller())\n                        /// @src 3:4305:4334  \"newBet.maxNumberOfChallengers\"\n                        let _51 := add(zero_struct_Bet_mpos, 128)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(_51, value_6)\n                        /// @src 3:4371:4382  \"newBet.odds\"\n                        let _52 := add(zero_struct_Bet_mpos, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 224)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(_52, value_7)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let _53 := sload(/** @src 3:4413:4418  \"s_fee\" */ 0x02)\n                        /// @src 3:4400:4410  \"newBet.fee\"\n                        let _54 := add(zero_struct_Bet_mpos, 288)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(_54, _53)\n                        /// @src 3:4429:4447  \"newBet.maxEntryFee\"\n                        let _55 := add(zero_struct_Bet_mpos, 256)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(_55, value_8)\n                        /// @src 3:4535:4552  \"newBet.moneyInBet\"\n                        let _56 := add(zero_struct_Bet_mpos, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 96)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(_56, /** @src 3:3984:3993  \"msg.value\" */ callvalue())\n                        /// @src 3:4574:4596  \"newBet.collateralGiven\"\n                        let _57 := add(zero_struct_Bet_mpos, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 64)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(_57, /** @src 3:3984:3993  \"msg.value\" */ callvalue())\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let _58 := sload(_1)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(zero_struct_Bet_mpos, _58)\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, /** @src 3:1979:1983  \"1000\" */ _58)\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _49, /** @src 3:4659:4665  \"s_Bets\" */ 0x06)\n                        /// @src 3:1979:1983  \"1000\"\n                        let dataSlot_4 := keccak256(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 64)\n                        sstore(dataSlot_4, /** @src 3:1979:1983  \"1000\" */ mload(zero_struct_Bet_mpos))\n                        let memberSlot := add(dataSlot_4, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 1)\n                        let _59 := sub(shl(160, 1), 1)\n                        sstore(memberSlot, or(and(sload(memberSlot), shl(160, 0xffffffffffffffffffffffff)), and(/** @src 3:1979:1983  \"1000\" */ mload(_50), /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _59)))\n                        sstore(/** @src 3:1979:1983  \"1000\" */ add(dataSlot_4, /** @src 3:4413:4418  \"s_fee\" */ 0x02), /** @src 3:1979:1983  \"1000\" */ mload(_57))\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        sstore(/** @src 3:1979:1983  \"1000\" */ add(dataSlot_4, 3), mload(_56))\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        sstore(/** @src 3:1979:1983  \"1000\" */ add(dataSlot_4, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _1), /** @src 3:1979:1983  \"1000\" */ mload(_51))\n                        let memberSlot_1 := add(dataSlot_4, 5)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let _60 := mload(/** @src 3:1979:1983  \"1000\" */ add(zero_struct_Bet_mpos, 160))\n                        let length_1 := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ mload(/** @src 3:1979:1983  \"1000\" */ _60)\n                        let _61 := 0xffffffffffffffff\n                        if gt(length_1, _61)\n                        {\n                            /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(_1, 0x41)\n                            revert(0, 36)\n                        }\n                        /// @src 3:1979:1983  \"1000\"\n                        let _62 := 18446744073709551616\n                        if gt(length_1, _62)\n                        {\n                            /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(_1, 0x41)\n                            revert(0, 36)\n                        }\n                        /// @src 3:1979:1983  \"1000\"\n                        let oldLen_1 := sload(memberSlot_1)\n                        sstore(memberSlot_1, length_1)\n                        cleanup_storage_array_end_array_address_dyn(memberSlot_1, oldLen_1, length_1)\n                        let srcPtr_1 := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ add(/** @src 3:1979:1983  \"1000\" */ _60, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _49)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, /** @src 3:1979:1983  \"1000\" */ memberSlot_1)\n                        let data := keccak256(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, _49)\n                        /// @src 3:1979:1983  \"1000\"\n                        let i_1 := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0\n                        /// @src 3:1979:1983  \"1000\"\n                        for { }\n                        lt(i_1, length_1)\n                        {\n                            i_1 := add(i_1, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 1)\n                        }\n                        /// @src 3:1979:1983  \"1000\"\n                        {\n                            /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                            let cleaned_4 := and(/** @src 3:1979:1983  \"1000\" */ mload(srcPtr_1), /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _59)\n                            /// @src 3:1979:1983  \"1000\"\n                            srcPtr_1 := add(srcPtr_1, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _49)\n                            /// @src 3:1979:1983  \"1000\"\n                            sstore(add(data, i_1), cleaned_4)\n                        }\n                        let memberSlot_2 := add(dataSlot_4, /** @src 3:4659:4665  \"s_Bets\" */ 0x06)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let _63 := mload(/** @src 3:1979:1983  \"1000\" */ add(zero_struct_Bet_mpos, 192))\n                        let length_2 := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ mload(/** @src 3:1979:1983  \"1000\" */ _63)\n                        if gt(length_2, _61)\n                        {\n                            /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(_1, 0x41)\n                            revert(0, 36)\n                        }\n                        /// @src 3:1979:1983  \"1000\"\n                        if gt(length_2, _62)\n                        {\n                            /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(_1, 0x41)\n                            revert(0, 36)\n                        }\n                        /// @src 3:1979:1983  \"1000\"\n                        let oldLen_2 := sload(memberSlot_2)\n                        sstore(memberSlot_2, length_2)\n                        cleanup_storage_array_end_array_address_dyn(memberSlot_2, oldLen_2, length_2)\n                        let srcPtr_2 := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ add(/** @src 3:1979:1983  \"1000\" */ _63, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _49)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, /** @src 3:1979:1983  \"1000\" */ memberSlot_2)\n                        let data_1 := keccak256(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, _49)\n                        /// @src 3:1979:1983  \"1000\"\n                        let i_2 := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0\n                        /// @src 3:1979:1983  \"1000\"\n                        for { }\n                        lt(i_2, length_2)\n                        {\n                            i_2 := add(i_2, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 1)\n                        }\n                        /// @src 3:1979:1983  \"1000\"\n                        {\n                            let itemValue := mload(srcPtr_2)\n                            srcPtr_2 := add(srcPtr_2, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _49)\n                            /// @src 3:1979:1983  \"1000\"\n                            sstore(add(data_1, i_2), itemValue)\n                        }\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        sstore(/** @src 3:1979:1983  \"1000\" */ add(dataSlot_4, 7), mload(_52))\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        sstore(/** @src 3:1979:1983  \"1000\" */ add(dataSlot_4, 8), mload(_55))\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        sstore(/** @src 3:1979:1983  \"1000\" */ add(dataSlot_4, 9), mload(_54))\n                        let memberSlot_3 := add(dataSlot_4, 10)\n                        update_storage_value_offsett_bool_to_bool(memberSlot_3, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ iszero(iszero(/** @src 3:1979:1983  \"1000\" */ mload(add(zero_struct_Bet_mpos, 320)))))\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let _64 := iszero(iszero(/** @src 3:1979:1983  \"1000\" */ mload(add(zero_struct_Bet_mpos, 352))))\n                        let _65 := sload(memberSlot_3)\n                        sstore(memberSlot_3, or(or(and(_65, not(16776960)), and(shl(8, _64), 65280)), and(shl(16, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ iszero(iszero(/** @src 3:1979:1983  \"1000\" */ mload(add(zero_struct_Bet_mpos, 384))))), 16711680)))\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        sstore(/** @src 3:1979:1983  \"1000\" */ add(dataSlot_4, 11), mload(add(zero_struct_Bet_mpos, 416)))\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, /** @src 3:4284:4294  \"msg.sender\" */ caller())\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _49, /** @src 3:1979:1983  \"1000\" */ 5)\n                        /// @src 3:4702:4737  \"s_Profiles[msg.sender].betIdHistory\"\n                        let _66 := add(/** @src 3:1979:1983  \"1000\" */ keccak256(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 64), 1)\n                        /// @src 3:4702:4760  \"s_Profiles[msg.sender].betIdHistory.push(numberOfBetsDone)\"\n                        array_push_from_uint256_to_array_uint256_dyn_storage_ptr(_66, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ sload(_1))\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, /** @src 3:4284:4294  \"msg.sender\" */ caller())\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _49, /** @src 3:1979:1983  \"1000\" */ 5)\n                        let dataSlot_5 := keccak256(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 64)\n                        sstore(dataSlot_5, /** @src 3:4770:4830  \"s_Profiles[msg.sender].balanceVariation -= int256(msg.value)\" */ checked_sub_int256(/** @src 3:1979:1983  \"1000\" */ sload(/** @src 3:4770:4830  \"s_Profiles[msg.sender].balanceVariation -= int256(msg.value)\" */ dataSlot_5), /** @src 3:3984:3993  \"msg.value\" */ callvalue()))\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        sstore(_1, /** @src 3:4840:4858  \"numberOfBetsDone++\" */ increment_uint256(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ sload(_1)))\n                        /// @src 3:4874:5045  \"P2PBetting__BetCreated(...\"\n                        let _67 := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ mload(64)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(_67, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _49)\n                        mstore(/** @src 3:1979:1983  \"1000\" */ add(_67, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _49), /** @src 3:1979:1983  \"1000\" */ 41)\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ add(/** @src 3:1979:1983  \"1000\" */ _67, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 64), /** @src 3:1979:1983  \"1000\" */ \"Aqui el string de los datos de l\")\n                        mstore(add(_67, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 96), /** @src 3:1979:1983  \"1000\" */ \"a apuesta\")\n                        /// @src 3:4874:5045  \"P2PBetting__BetCreated(...\"\n                        log4(_67, /** @src 3:4305:4334  \"newBet.maxNumberOfChallengers\" */ 128, /** @src 3:4874:5045  \"P2PBetting__BetCreated(...\" */ 0xe7d6bd5223226a9dafb832e86113f33399d2c3d382f6f8eed9d8dcc7c353f237, value_8, value_7, value_6)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        return(0, 0)\n                    }\n                    case 0x940c154b {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, calldataload(_1))\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 32, /** @src 3:6203:6209  \"s_Bets\" */ 0x06)\n                        /// @src 3:6203:6224  \"s_Bets[betId_].locked\"\n                        let _68 := add(/** @src 3:1979:1983  \"1000\" */ keccak256(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 64), /** @src 3:6203:6224  \"s_Bets[betId_].locked\" */ 10)\n                        /// @src 3:1979:1983  \"1000\"\n                        sstore(_68, or(and(sload(_68), not(65280)), 256))\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        return(0, 0)\n                    }\n                    case 0xb740af79 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_9 := calldataload(_1)\n                        let _69 := and(value_9, sub(shl(160, 1), 1))\n                        if iszero(eq(value_9, _69)) { revert(0, 0) }\n                        /// @src 1:1500:1562  \"modifier onlyOwner() {...\"\n                        fun_checkOwner()\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        sstore(/** @src 3:9628:9679  \"USD_ETH_dataFeed = AggregatorV3Interface(newOracle)\" */ 0x01, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ or(and(sload(/** @src 3:9628:9679  \"USD_ETH_dataFeed = AggregatorV3Interface(newOracle)\" */ 0x01), /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ shl(160, 0xffffffffffffffffffffffff)), _69))\n                        /// @src 3:9694:9729  \"P2PBetting__NewOracleSet(newOracle)\"\n                        log2(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 0, /** @src 3:9694:9729  \"P2PBetting__NewOracleSet(newOracle)\" */ 0x6f4d463f06d6303ccb5e5f3efff065c43013611c234549b89243f40257a7b722, _69)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        return(0, 0)\n                    }\n                    case 0xbf4e2858 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_10 := calldataload(_1)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, /** @src 3:1979:1983  \"1000\" */ value_10)\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 32, /** @src 3:8697:8703  \"s_Bets\" */ 0x06)\n                        /// @src 3:1979:1983  \"1000\"\n                        let dataSlot_6 := keccak256(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 64)\n                        let memPtr_4 := mload(64)\n                        finalize_allocation_17595(memPtr_4)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(memPtr_4, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ sload(dataSlot_6))\n                        let _70 := sub(shl(160, 1), 1)\n                        let cleaned_5 := and(sload(add(dataSlot_6, 1)), _70)\n                        let _71 := add(memPtr_4, 32)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(_71, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ cleaned_5)\n                        let _72 := sload(add(dataSlot_6, 2))\n                        let _73 := add(memPtr_4, 64)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(_73, _72)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let _74 := sload(add(dataSlot_6, 3))\n                        let _75 := add(memPtr_4, 96)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(_75, _74)\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ add(memPtr_4, 128), sload(add(dataSlot_6, _1)))\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ add(memPtr_4, 160), copy_array_from_storage_to_memory_array_address_dyn(add(dataSlot_6, 5)))\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ add(memPtr_4, 192), copy_array_from_storage_to_memory_array_uint256_dyn(add(dataSlot_6, /** @src 3:8697:8703  \"s_Bets\" */ 0x06)))\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let _76 := sload(add(dataSlot_6, 7))\n                        let _77 := add(memPtr_4, 224)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(_77, _76)\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ add(memPtr_4, 256), sload(add(dataSlot_6, 8)))\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ add(memPtr_4, 288), sload(add(dataSlot_6, 9)))\n                        let _78 := sload(add(dataSlot_6, 10))\n                        let _79 := add(memPtr_4, 320)\n                        mstore(_79, iszero(iszero(and(_78, 0xff))))\n                        mstore(add(memPtr_4, 352), iszero(iszero(and(shr(8, _78), 0xff))))\n                        let _80 := add(memPtr_4, 384)\n                        mstore(_80, iszero(iszero(and(shr(16, _78), 0xff))))\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ add(memPtr_4, 416), sload(add(dataSlot_6, 11)))\n                        /// @src 3:8721:8838  \"if (betSelected.collateralGiven == 0 ) {...\"\n                        if /** @src 3:8725:8757  \"betSelected.collateralGiven == 0\" */ iszero(/** @src 3:1979:1983  \"1000\" */ mload(/** @src 3:8725:8752  \"betSelected.collateralGiven\" */ _73))\n                        /// @src 3:8721:8838  \"if (betSelected.collateralGiven == 0 ) {...\"\n                        {\n                            /// @src 3:8781:8827  \"P2PBetting__AlreadyRetrievedOrBetNonexistent()\"\n                            let _81 := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ mload(64)\n                            /// @src 3:8781:8827  \"P2PBetting__AlreadyRetrievedOrBetNonexistent()\"\n                            mstore(_81, shl(226, 0x37ee8b5b))\n                            revert(_81, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _1)\n                        }\n                        /// @src 3:8851:8895  \"!betSelected.ended || betSelected.tipsterWon\"\n                        let expr_1 := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ iszero(/** @src 3:1979:1983  \"1000\" */ mload(/** @src 3:8852:8869  \"betSelected.ended\" */ _80))\n                        /// @src 3:8851:8895  \"!betSelected.ended || betSelected.tipsterWon\"\n                        if /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ iszero(expr_1)\n                        /// @src 3:8851:8895  \"!betSelected.ended || betSelected.tipsterWon\"\n                        {\n                            expr_1 := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ iszero(iszero(/** @src 3:1979:1983  \"1000\" */ mload(/** @src 3:8873:8895  \"betSelected.tipsterWon\" */ _79)))\n                        }\n                        /// @src 3:8847:8965  \"if (!betSelected.ended || betSelected.tipsterWon){...\"\n                        if expr_1\n                        {\n                            /// @src 3:8917:8954  \"P2PBetting__OnlyCalledIfTipsterLost()\"\n                            let _82 := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ mload(64)\n                            /// @src 3:8917:8954  \"P2PBetting__OnlyCalledIfTipsterLost()\"\n                            mstore(_82, shl(224, 0xf0f84dd5))\n                            revert(_82, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _1)\n                        }\n                        /// @src 3:1979:1983  \"1000\"\n                        let _83 := mload(/** @src 3:9005:9027  \"betSelected.moneyInBet\" */ _75)\n                        /// @src 3:9032:9084  \"betSelected.moneyInBet - betSelected.collateralGiven\"\n                        let expr_2 := checked_sub_uint256(_83, /** @src 3:1979:1983  \"1000\" */ mload(/** @src 3:9057:9084  \"betSelected.collateralGiven\" */ _73))\n                        /// @src 3:9005:9115  \"betSelected.moneyInBet -(((betSelected.moneyInBet - betSelected.collateralGiven) * betSelected.odds)/DECIMALS)\"\n                        let expr_3 := checked_sub_uint256(_83, /** @src 3:1979:1983  \"1000\" */ div(/** @src 3:9031:9104  \"(betSelected.moneyInBet - betSelected.collateralGiven) * betSelected.odds\" */ checked_mul_uint256(expr_2, /** @src 3:1979:1983  \"1000\" */ mload(/** @src 3:9088:9104  \"betSelected.odds\" */ _77)), /** @src 3:1979:1983  \"1000\" */ 0x03e8))\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, /** @src 3:1979:1983  \"1000\" */ value_10)\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 32, /** @src 3:8697:8703  \"s_Bets\" */ 0x06)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        sstore(/** @src 3:9125:9155  \"s_Bets[betId_].collateralGiven\" */ add(/** @src 3:1979:1983  \"1000\" */ keccak256(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 64), 2), 0)\n                        let cleaned_6 := and(/** @src 3:1979:1983  \"1000\" */ mload(/** @src 3:9177:9196  \"betSelected.tipster\" */ _71), /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _70)\n                        /// @src 3:9169:9228  \"payable(betSelected.tipster).transfer(amountToTransferBack)\"\n                        let _84 := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0\n                        /// @src 3:9169:9228  \"payable(betSelected.tipster).transfer(amountToTransferBack)\"\n                        if iszero(expr_3) { _84 := 2300 }\n                        if iszero(call(_84, cleaned_6, expr_3, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 0, 0, 0))\n                        /// @src 3:9169:9228  \"payable(betSelected.tipster).transfer(amountToTransferBack)\"\n                        {\n                            /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                            let pos_2 := mload(64)\n                            returndatacopy(pos_2, 0, returndatasize())\n                            revert(pos_2, returndatasize())\n                        }\n                        return(0, 0)\n                    }\n                    case 0xc8796572 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let cleaned_7 := and(sload(0), sub(shl(160, 1), 1))\n                        /// @src 3:3194:3241  \"payable(owner()).call{value: feesCollected}(\\\"\\\")\"\n                        let expr_component_1 := call(gas(), cleaned_7, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ sload(/** @src 3:3223:3236  \"feesCollected\" */ 0x03), /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 0, 0, 0)\n                        /// @src 3:3194:3241  \"payable(owner()).call{value: feesCollected}(\\\"\\\")\"\n                        pop(extract_returndata())\n                        /// @src 3:3251:3322  \"if (!succ) {...\"\n                        if /** @src 3:3255:3260  \"!succ\" */ iszero(expr_component_1)\n                        /// @src 3:3251:3322  \"if (!succ) {...\"\n                        {\n                            /// @src 3:3283:3311  \"P2PBetting__TransferFailed()\"\n                            let _85 := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ mload(64)\n                            /// @src 3:3283:3311  \"P2PBetting__TransferFailed()\"\n                            mstore(_85, shl(224, 0x4a5f2a1b))\n                            revert(_85, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _1)\n                        }\n                        let _86 := sload(/** @src 3:3223:3236  \"feesCollected\" */ 0x03)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        sstore(/** @src 3:3223:3236  \"feesCollected\" */ 0x03, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0)\n                        /// @src 3:3413:3456  \"P2PBetting__FeesCollected(feesCollectedNow)\"\n                        log2(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 0, /** @src 3:3413:3456  \"P2PBetting__FeesCollected(feesCollectedNow)\" */ 0xf4f2ad6f4b10f9853be76745070984d581f6da2399617776ec329308e46d0804, _86)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        return(0, 0)\n                    }\n                    case 0xcc11298e {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value_11 := calldataload(_1)\n                        let value_12 := calldataload(36)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, /** @src 3:1979:1983  \"1000\" */ value_11)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let _87 := 32\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _87, /** @src 3:6547:6553  \"s_Bets\" */ 0x06)\n                        /// @src 3:1979:1983  \"1000\"\n                        let dataSlot_7 := keccak256(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 64)\n                        let memPtr_5 := mload(64)\n                        finalize_allocation_17595(memPtr_5)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(memPtr_5, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ sload(dataSlot_7))\n                        let _88 := sub(shl(160, 1), 1)\n                        let cleaned_8 := and(sload(add(dataSlot_7, 1)), _88)\n                        let _89 := add(memPtr_5, _87)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(_89, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ cleaned_8)\n                        let _90 := sload(add(dataSlot_7, 2))\n                        let _91 := add(memPtr_5, 64)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(_91, _90)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let _92 := 3\n                        let _93 := sload(add(dataSlot_7, _92))\n                        let _94 := add(memPtr_5, 96)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(_94, _93)\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ add(memPtr_5, 128), sload(add(dataSlot_7, _1)))\n                        let _95 := copy_array_from_storage_to_memory_array_address_dyn(add(dataSlot_7, 5))\n                        let _96 := add(memPtr_5, 160)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(_96, _95)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let _97 := copy_array_from_storage_to_memory_array_uint256_dyn(add(dataSlot_7, /** @src 3:6547:6553  \"s_Bets\" */ 0x06))\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let _98 := add(memPtr_5, 192)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(_98, _97)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let _99 := sload(add(dataSlot_7, 7))\n                        let _100 := add(memPtr_5, 224)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(_100, _99)\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ add(memPtr_5, 256), sload(add(dataSlot_7, 8)))\n                        let _101 := sload(add(dataSlot_7, 9))\n                        let _102 := add(memPtr_5, 288)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(_102, _101)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let _103 := sload(add(dataSlot_7, 10))\n                        let _104 := add(memPtr_5, 320)\n                        let _105 := iszero(iszero(and(_103, 0xff)))\n                        mstore(_104, _105)\n                        mstore(add(memPtr_5, 352), iszero(iszero(and(shr(8, _103), 0xff))))\n                        let _106 := add(memPtr_5, 384)\n                        let _107 := iszero(iszero(and(shr(16, _103), 0xff)))\n                        mstore(_106, _107)\n                        /// @src 3:1979:1983  \"1000\"\n                        mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ add(memPtr_5, 416), sload(add(dataSlot_7, 11)))\n                        /// @src 3:6588:6659  \"msg.sender == betSelected.tipster &&...\"\n                        let expr_4 := /** @src 3:6588:6621  \"msg.sender == betSelected.tipster\" */ eq(/** @src 3:6588:6598  \"msg.sender\" */ caller(), /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ and(/** @src 3:1979:1983  \"1000\" */ mload(/** @src 3:6602:6621  \"betSelected.tipster\" */ _89), /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _88))\n                        /// @src 3:6588:6659  \"msg.sender == betSelected.tipster &&...\"\n                        if expr_4 { expr_4 := _105 }\n                        /// @src 3:6588:6702  \"msg.sender == betSelected.tipster &&...\"\n                        let expr_5 := expr_4\n                        if expr_4\n                        {\n                            expr_5 := /** @src 3:6675:6702  \"betSelected.moneyInBet != 0\" */ iszero(iszero(/** @src 3:1979:1983  \"1000\" */ mload(/** @src 3:6675:6697  \"betSelected.moneyInBet\" */ _94)))\n                        }\n                        /// @src 3:6588:6735  \"msg.sender == betSelected.tipster &&...\"\n                        let expr_6 := expr_5\n                        if expr_5 { expr_6 := _107 }\n                        /// @src 3:6571:8598  \"if (...\"\n                        switch expr_6\n                        case 0 {\n                            /// @src 3:7451:7474  \"betSelected.challengers\"\n                            let _mpos := mload(_96)\n                            /// @src 3:7430:7554  \"numberOfChallenger < betSelected.challengers.length &&...\"\n                            let expr_7 := /** @src 3:7430:7481  \"numberOfChallenger < betSelected.challengers.length\" */ lt(value_12, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ mload(/** @src 3:7451:7481  \"betSelected.challengers.length\" */ _mpos))\n                            /// @src 3:7430:7554  \"numberOfChallenger < betSelected.challengers.length &&...\"\n                            if expr_7\n                            {\n                                expr_7 := /** @src 3:7497:7554  \"msg.sender == betSelected.challengers[numberOfChallenger]\" */ eq(/** @src 3:6588:6598  \"msg.sender\" */ caller(), /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ and(/** @src 3:1979:1983  \"1000\" */ mload(/** @src 3:7511:7554  \"betSelected.challengers[numberOfChallenger]\" */ memory_array_index_access_address_dyn(_mpos, value_12)), /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _88))\n                            }\n                            /// @src 3:7430:7626  \"numberOfChallenger < betSelected.challengers.length &&...\"\n                            let expr_8 := expr_7\n                            if expr_7\n                            {\n                                expr_8 := /** @src 3:7570:7626  \"betSelected.challengersMoneyBet[numberOfChallenger] != 0\" */ iszero(iszero(/** @src 3:1979:1983  \"1000\" */ mload(/** @src 3:7570:7621  \"betSelected.challengersMoneyBet[numberOfChallenger]\" */ memory_array_index_access_address_dyn(/** @src 3:7570:7601  \"betSelected.challengersMoneyBet\" */ mload(_98), /** @src 3:7570:7621  \"betSelected.challengersMoneyBet[numberOfChallenger]\" */ value_12))))\n                            }\n                            /// @src 3:7430:7659  \"numberOfChallenger < betSelected.challengers.length &&...\"\n                            let expr_9 := expr_8\n                            if expr_8\n                            {\n                                expr_9 := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ iszero(iszero(/** @src 3:1979:1983  \"1000\" */ mload(/** @src 3:7642:7659  \"betSelected.ended\" */ _106)))\n                            }\n                            /// @src 3:7430:7698  \"numberOfChallenger < betSelected.challengers.length &&...\"\n                            let expr_10 := expr_9\n                            if expr_9\n                            {\n                                expr_10 := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ iszero(/** @src 3:1979:1983  \"1000\" */ mload(/** @src 3:7676:7698  \"betSelected.tipsterWon\" */ _104))\n                            }\n                            /// @src 3:7413:8598  \"if (...\"\n                            switch expr_10\n                            case 0 {\n                                /// @src 3:8541:8587  \"P2PBetting__AlreadyRetrievedOrBetNonexistent()\"\n                                let _108 := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ mload(64)\n                                /// @src 3:8541:8587  \"P2PBetting__AlreadyRetrievedOrBetNonexistent()\"\n                                mstore(_108, /** @src 3:8781:8827  \"P2PBetting__AlreadyRetrievedOrBetNonexistent()\" */ shl(226, 0x37ee8b5b))\n                                /// @src 3:8541:8587  \"P2PBetting__AlreadyRetrievedOrBetNonexistent()\"\n                                revert(_108, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _1)\n                            }\n                            default /// @src 3:7413:8598  \"if (...\"\n                            {\n                                /// @src 3:1979:1983  \"1000\"\n                                let _109 := mload(/** @src 3:7744:7760  \"betSelected.odds\" */ _100)\n                                /// @src 3:1979:1983  \"1000\"\n                                let r_1 := div(/** @src 3:7744:7830  \"betSelected.odds *...\" */ checked_mul_uint256(_109, /** @src 3:1979:1983  \"1000\" */ mload(/** @src 3:7779:7830  \"betSelected.challengersMoneyBet[numberOfChallenger]\" */ memory_array_index_access_address_dyn(/** @src 3:7779:7810  \"betSelected.challengersMoneyBet\" */ mload(_98), /** @src 3:7779:7830  \"betSelected.challengersMoneyBet[numberOfChallenger]\" */ value_12))), /** @src 3:1979:1983  \"1000\" */ 0x03e8)\n                                mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, /** @src 3:6588:6598  \"msg.sender\" */ caller())\n                                /// @src 3:1979:1983  \"1000\"\n                                mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _87, 5)\n                                /// @src 3:1979:1983  \"1000\"\n                                let dataSlot_8 := keccak256(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 64)\n                                sstore(dataSlot_8, /** @src 3:7856:7916  \"s_Profiles[msg.sender].balanceVariation += int256(amountWon)\" */ checked_add_int256(/** @src 3:1979:1983  \"1000\" */ sload(/** @src 3:7856:7916  \"s_Profiles[msg.sender].balanceVariation += int256(amountWon)\" */ dataSlot_8), r_1))\n                                /// @src 3:1979:1983  \"1000\"\n                                let r_2 := div(/** @src 3:7956:7983  \"amountWon * betSelected.fee\" */ checked_mul_uint256(r_1, /** @src 3:1979:1983  \"1000\" */ mload(/** @src 3:7968:7983  \"betSelected.fee\" */ _102)), /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 100000)\n                                /// @src 3:8084:8110  \"amountWon - feeFromThisBet\"\n                                let expr_11 := checked_sub_uint256(r_1, r_2)\n                                /// @src 3:1979:1983  \"1000\"\n                                mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, /** @src 3:1979:1983  \"1000\" */ value_11)\n                                mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _87, /** @src 3:6547:6553  \"s_Bets\" */ 0x06)\n                                /// @src 3:8124:8177  \"s_Bets[betId].challengersMoneyBet[numberOfChallenger]\"\n                                let _110, _111 := storage_array_index_access_uint256_dyn_ptr(/** @src 3:8124:8157  \"s_Bets[betId].challengersMoneyBet\" */ add(/** @src 3:1979:1983  \"1000\" */ keccak256(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 64), /** @src 3:6547:6553  \"s_Bets\" */ 0x06), /** @src 3:8124:8177  \"s_Bets[betId].challengersMoneyBet[numberOfChallenger]\" */ value_12)\n                                /// @src 3:1979:1983  \"1000\"\n                                let _112 := sload(_110)\n                                sstore(_110, and(_112, not(shl(shl(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _92, /** @src 3:1979:1983  \"1000\" */ _111), not(0)))))\n                                /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                                sstore(_92, /** @src 3:8195:8226  \"feesCollected += feeFromThisBet\" */ checked_add_uint256(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ sload(_92), /** @src 3:8195:8226  \"feesCollected += feeFromThisBet\" */ r_2))\n                                /// @src 3:8256:8338  \"payable(msg.sender).call{value: moneyToTransfer}(...\"\n                                let expr_component_2 := call(gas(), /** @src 3:6588:6598  \"msg.sender\" */ caller(), /** @src 3:8256:8338  \"payable(msg.sender).call{value: moneyToTransfer}(...\" */ expr_11, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 0, 0, 0)\n                                /// @src 3:8256:8338  \"payable(msg.sender).call{value: moneyToTransfer}(...\"\n                                pop(extract_returndata())\n                                /// @src 3:8352:8431  \"if (!succ) {...\"\n                                if /** @src 3:8356:8361  \"!succ\" */ iszero(expr_component_2)\n                                /// @src 3:8352:8431  \"if (!succ) {...\"\n                                {\n                                    /// @src 3:8388:8416  \"P2PBetting__TransferFailed()\"\n                                    let _113 := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ mload(64)\n                                    /// @src 3:8388:8416  \"P2PBetting__TransferFailed()\"\n                                    mstore(_113, /** @src 3:3283:3311  \"P2PBetting__TransferFailed()\" */ shl(224, 0x4a5f2a1b))\n                                    /// @src 3:8388:8416  \"P2PBetting__TransferFailed()\"\n                                    revert(_113, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _1)\n                                }\n                                /// @src 3:8449:8503  \"P2PBetting__RewardClaimed(msg.sender, moneyToTransfer)\"\n                                log3(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 0, /** @src 3:8449:8503  \"P2PBetting__RewardClaimed(msg.sender, moneyToTransfer)\" */ 0x3c92031d788fb886d6b0cef0d544d742f65fe462e576906cfe03a5f36ef12440, /** @src 3:6588:6598  \"msg.sender\" */ caller(), /** @src 3:8449:8503  \"P2PBetting__RewardClaimed(msg.sender, moneyToTransfer)\" */ expr_11)\n                            }\n                        }\n                        default /// @src 3:6571:8598  \"if (...\"\n                        {\n                            /// @src 3:1979:1983  \"1000\"\n                            let _114 := mload(/** @src 3:6827:6849  \"betSelected.moneyInBet\" */ _94)\n                            /// @src 3:1979:1983  \"1000\"\n                            mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, /** @src 3:6588:6598  \"msg.sender\" */ caller())\n                            /// @src 3:1979:1983  \"1000\"\n                            mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _87, 5)\n                            /// @src 3:1979:1983  \"1000\"\n                            let dataSlot_9 := keccak256(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 64)\n                            sstore(dataSlot_9, /** @src 3:6760:6863  \"s_Profiles[msg.sender].balanceVariation += int256(...\" */ checked_add_int256(/** @src 3:1979:1983  \"1000\" */ sload(/** @src 3:6760:6863  \"s_Profiles[msg.sender].balanceVariation += int256(...\" */ dataSlot_9), _114))\n                            /// @src 3:1979:1983  \"1000\"\n                            let _115 := mload(/** @src 3:6904:6926  \"betSelected.moneyInBet\" */ _94)\n                            /// @src 3:6904:6972  \"betSelected.moneyInBet -...\"\n                            let expr_12 := checked_sub_uint256(_115, /** @src 3:1979:1983  \"1000\" */ mload(/** @src 3:6945:6972  \"betSelected.collateralGiven\" */ _91))\n                            /// @src 3:6903:7008  \"(betSelected.moneyInBet -...\"\n                            let expr_13 := checked_mul_uint256(expr_12, /** @src 3:1979:1983  \"1000\" */ mload(/** @src 3:6992:7008  \"betSelected.odds\" */ _100))\n                            /// @src 3:1979:1983  \"1000\"\n                            let r_3 := div(/** @src 3:6903:7042  \"(betSelected.moneyInBet -...\" */ checked_mul_uint256(expr_13, /** @src 3:1979:1983  \"1000\" */ mload(/** @src 3:7027:7042  \"betSelected.fee\" */ _102)), /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0x05f5e100)\n                            /// @src 3:7138:7177  \"betSelected.moneyInBet - feeFromThisBet\"\n                            let expr_14 := checked_sub_uint256(/** @src 3:1979:1983  \"1000\" */ mload(/** @src 3:7138:7160  \"betSelected.moneyInBet\" */ _94), /** @src 3:7138:7177  \"betSelected.moneyInBet - feeFromThisBet\" */ r_3)\n                            /// @src 3:1979:1983  \"1000\"\n                            mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, /** @src 3:1979:1983  \"1000\" */ value_11)\n                            mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _87, /** @src 3:6547:6553  \"s_Bets\" */ 0x06)\n                            /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                            sstore(/** @src 3:7191:7215  \"s_Bets[betId].moneyInBet\" */ add(/** @src 3:1979:1983  \"1000\" */ keccak256(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 64), _92), 0)\n                            sstore(_92, /** @src 3:7233:7264  \"feesCollected += feeFromThisBet\" */ checked_add_uint256(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ sload(_92), /** @src 3:7233:7264  \"feesCollected += feeFromThisBet\" */ r_3))\n                            /// @src 3:7278:7323  \"payable(msg.sender).transfer(moneyToTransfer)\"\n                            let _116 := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0\n                            /// @src 3:7278:7323  \"payable(msg.sender).transfer(moneyToTransfer)\"\n                            if iszero(expr_14) { _116 := 2300 }\n                            if iszero(call(_116, /** @src 3:6588:6598  \"msg.sender\" */ caller(), /** @src 3:7278:7323  \"payable(msg.sender).transfer(moneyToTransfer)\" */ expr_14, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 0, 0, 0))\n                            /// @src 3:7278:7323  \"payable(msg.sender).transfer(moneyToTransfer)\"\n                            {\n                                /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                                let pos_3 := mload(64)\n                                returndatacopy(pos_3, 0, returndatasize())\n                                revert(pos_3, returndatasize())\n                            }\n                            /// @src 3:7342:7396  \"P2PBetting__RewardClaimed(msg.sender, moneyToTransfer)\"\n                            log3(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 0, /** @src 3:7342:7396  \"P2PBetting__RewardClaimed(msg.sender, moneyToTransfer)\" */ 0x3c92031d788fb886d6b0cef0d544d742f65fe462e576906cfe03a5f36ef12440, /** @src 3:6588:6598  \"msg.sender\" */ caller(), /** @src 3:7342:7396  \"P2PBetting__RewardClaimed(msg.sender, moneyToTransfer)\" */ expr_14)\n                        }\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        return(0, 0)\n                    }\n                    case 0xced72f87 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let _117 := sload(/** @src 3:9954:9959  \"s_fee\" */ 0x02)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let memPos_5 := mload(64)\n                        mstore(memPos_5, _117)\n                        return(memPos_5, 32)\n                    }\n                    case 0xd4aae80f {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let _118 := sload(/** @src 3:10385:10398  \"feesCollected\" */ 0x03)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        let memPos_6 := mload(64)\n                        mstore(memPos_6, _118)\n                        return(memPos_6, 32)\n                    }\n                    case 0xf222d0b9 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let _119 := sload(_1)\n                        let memPos_7 := mload(64)\n                        mstore(memPos_7, _119)\n                        return(memPos_7, 32)\n                    }\n                    case 0xf2fde38b {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_13 := calldataload(_1)\n                        let _120 := sub(shl(160, 1), 1)\n                        let _121 := and(value_13, _120)\n                        if iszero(eq(value_13, _121)) { revert(0, 0) }\n                        /// @src 1:1500:1562  \"modifier onlyOwner() {...\"\n                        fun_checkOwner()\n                        /// @src 1:2623:2714  \"if (newOwner == address(0)) {...\"\n                        if /** @src 1:2627:2649  \"newOwner == address(0)\" */ iszero(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _121)\n                        /// @src 1:2623:2714  \"if (newOwner == address(0)) {...\"\n                        {\n                            /// @src 1:2672:2703  \"OwnableInvalidOwner(address(0))\"\n                            let _122 := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ mload(64)\n                            /// @src 1:2672:2703  \"OwnableInvalidOwner(address(0))\"\n                            mstore(_122, shl(224, 0x1e4fbdf7))\n                            /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                            mstore(/** @src 1:2672:2703  \"OwnableInvalidOwner(address(0))\" */ add(_122, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _1), 0)\n                            /// @src 1:2672:2703  \"OwnableInvalidOwner(address(0))\"\n                            revert(_122, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 36)\n                        }\n                        let _123 := sload(0)\n                        sstore(0, or(and(_123, shl(160, 0xffffffffffffffffffffffff)), _121))\n                        /// @src 1:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n                        log3(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, 0, /** @src 1:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ and(_123, _120), /** @src 1:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ _121)\n                        /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                        return(0, 0)\n                    }\n                    case 0xf39522e4 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let ret := fun_getNumberOfChallenger(calldataload(_1))\n                        let memPos_8 := mload(64)\n                        mstore(memPos_8, ret)\n                        return(memPos_8, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            function abi_encode_array_uint256_dyn(value, pos) -> end\n            {\n                let length := mload(value)\n                mstore(pos, length)\n                let _1 := 0x20\n                pos := add(pos, _1)\n                let srcPtr := add(value, _1)\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, mload(srcPtr))\n                    pos := add(pos, _1)\n                    srcPtr := add(srcPtr, _1)\n                }\n                end := pos\n            }\n            /// @ast-id 130 @src 1:1796:1958  \"function _checkOwner() internal view virtual {...\"\n            function fun_checkOwner()\n            {\n                /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                let cleaned := and(sload(/** @src 1:1710:1716  \"_owner\" */ 0x00), /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ sub(shl(160, 1), 1))\n                /// @src 1:1851:1952  \"if (owner() != _msgSender()) {...\"\n                if /** @src 1:1855:1878  \"owner() != _msgSender()\" */ iszero(eq(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ cleaned, /** @src 2:735:745  \"msg.sender\" */ caller()))\n                /// @src 1:1851:1952  \"if (owner() != _msgSender()) {...\"\n                {\n                    /// @src 1:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\"\n                    let _1 := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ mload(64)\n                    /// @src 1:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\"\n                    mstore(_1, shl(224, 0x118cdaa7))\n                    /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                    mstore(/** @src 1:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\" */ add(_1, 4), /** @src 2:735:745  \"msg.sender\" */ caller())\n                    /// @src 1:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\"\n                    revert(_1, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 36)\n                }\n            }\n            function finalize_allocation_17595(memPtr)\n            {\n                let newFreePtr := add(memPtr, /** @src 3:1979:1983  \"1000\" */ 448)\n                /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function finalize_allocation_17596(memPtr)\n            {\n                let newFreePtr := add(memPtr, 64)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function extract_returndata() -> data\n            {\n                switch returndatasize()\n                case 0 { data := 96 }\n                default {\n                    let _1 := returndatasize()\n                    if gt(_1, 0xffffffffffffffff)\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0x24)\n                    }\n                    let memPtr := mload(64)\n                    finalize_allocation(memPtr, add(and(add(_1, 31), not(31)), 0x20))\n                    mstore(memPtr, _1)\n                    data := memPtr\n                    returndatacopy(add(memPtr, 0x20), /** @src -1:-1:-1 */ 0, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ returndatasize())\n                }\n            }\n            function checked_mul_uint256(x, y) -> product\n            {\n                product := mul(x, y)\n                if iszero(or(iszero(x), eq(y, div(product, x))))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n            /// @src 3:1979:1983  \"1000\"\n            function checked_sub_uint256(x, y) -> diff\n            {\n                diff := sub(x, y)\n                if gt(diff, x)\n                {\n                    /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n            /// @src 3:1979:1983  \"1000\"\n            function allocate_and_zero_memory_struct_struct_Bet() -> memPtr\n            {\n                /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                let memPtr_1 := mload(64)\n                finalize_allocation_17595(memPtr_1)\n                /// @src 3:1979:1983  \"1000\"\n                memPtr := memPtr_1\n                /// @src -1:-1:-1\n                let _1 := 0\n                /// @src 3:1979:1983  \"1000\"\n                mstore(memPtr_1, /** @src -1:-1:-1 */ _1)\n                /// @src 3:1979:1983  \"1000\"\n                mstore(add(memPtr_1, 32), /** @src -1:-1:-1 */ _1)\n                /// @src 3:1979:1983  \"1000\"\n                mstore(add(memPtr_1, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 64), /** @src -1:-1:-1 */ _1)\n                /// @src 3:1979:1983  \"1000\"\n                mstore(add(memPtr_1, 96), /** @src -1:-1:-1 */ _1)\n                /// @src 3:1979:1983  \"1000\"\n                mstore(add(memPtr_1, 128), /** @src -1:-1:-1 */ _1)\n                /// @src 3:1979:1983  \"1000\"\n                mstore(add(memPtr_1, 160), 96)\n                mstore(add(memPtr_1, 192), 96)\n                mstore(add(memPtr_1, 224), /** @src -1:-1:-1 */ _1)\n                /// @src 3:1979:1983  \"1000\"\n                mstore(add(memPtr_1, 256), /** @src -1:-1:-1 */ _1)\n                /// @src 3:1979:1983  \"1000\"\n                mstore(add(memPtr_1, 288), /** @src -1:-1:-1 */ _1)\n                /// @src 3:1979:1983  \"1000\"\n                mstore(add(memPtr_1, 320), /** @src -1:-1:-1 */ _1)\n                /// @src 3:1979:1983  \"1000\"\n                mstore(add(memPtr_1, 352), /** @src -1:-1:-1 */ _1)\n                /// @src 3:1979:1983  \"1000\"\n                mstore(add(memPtr_1, 384), /** @src -1:-1:-1 */ _1)\n                /// @src 3:1979:1983  \"1000\"\n                mstore(add(memPtr_1, 416), /** @src -1:-1:-1 */ _1)\n            }\n            /// @src 3:1979:1983  \"1000\"\n            function cleanup_storage_array_end_array_address_dyn(array, len, startIndex)\n            {\n                if lt(startIndex, len)\n                {\n                    /// @src -1:-1:-1\n                    let _1 := 0\n                    /// @src 3:1979:1983  \"1000\"\n                    mstore(/** @src -1:-1:-1 */ _1, /** @src 3:1979:1983  \"1000\" */ array)\n                    let data := keccak256(/** @src -1:-1:-1 */ _1, /** @src 3:1979:1983  \"1000\" */ 0x20)\n                    let _2 := add(data, len)\n                    let start := add(data, startIndex)\n                    for { } lt(start, _2) { start := add(start, 1) }\n                    {\n                        sstore(start, /** @src -1:-1:-1 */ _1)\n                    }\n                }\n            }\n            /// @src 3:1979:1983  \"1000\"\n            function update_storage_value_offsett_bool_to_bool(slot, value)\n            {\n                let value_1 := and(sload(slot), not(255))\n                sstore(slot, or(value_1, and(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ iszero(iszero(/** @src 3:1979:1983  \"1000\" */ value)), 255)))\n            }\n            function storage_array_index_access_uint256_dyn_ptr(array, index) -> slot, offset\n            {\n                if iszero(lt(index, sload(array)))\n                {\n                    mstore(0, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ shl(224, 0x4e487b71))\n                    /// @src 3:1979:1983  \"1000\"\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 3:1979:1983  \"1000\" */ array)\n                slot := add(keccak256(/** @src -1:-1:-1 */ 0, /** @src 3:1979:1983  \"1000\" */ 0x20), index)\n                offset := /** @src -1:-1:-1 */ 0\n            }\n            /// @src 3:1979:1983  \"1000\"\n            function array_push_from_uint256_to_array_uint256_dyn_storage_ptr(array, value0)\n            {\n                let oldLen := sload(array)\n                if iszero(lt(oldLen, 18446744073709551616))\n                {\n                    /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                /// @src 3:1979:1983  \"1000\"\n                sstore(array, add(oldLen, 1))\n                let slot, offset := storage_array_index_access_uint256_dyn_ptr(array, oldLen)\n                let _1 := sload(slot)\n                let shiftBits := shl(3, offset)\n                sstore(slot, or(and(_1, not(shl(shiftBits, not(0)))), shl(shiftBits, value0)))\n            }\n            function checked_sub_int256(x, y) -> diff\n            {\n                diff := sub(x, y)\n                let _1 := slt(y, 0)\n                if or(and(iszero(_1), sgt(diff, x)), and(_1, slt(diff, x)))\n                {\n                    /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                    mstore(/** @src 3:1979:1983  \"1000\" */ 0, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(/** @src 3:1979:1983  \"1000\" */ 0, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0x24)\n                }\n            }\n            /// @src 3:1979:1983  \"1000\"\n            function increment_uint256(value) -> ret\n            {\n                if eq(value, not(0))\n                {\n                    /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n                /// @src 3:1979:1983  \"1000\"\n                ret := add(value, 1)\n            }\n            /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n            function copy_array_from_storage_to_memory_array_address_dyn(slot) -> memPtr\n            {\n                memPtr := mload(64)\n                let pos := memPtr\n                let length := /** @src 3:1979:1983  \"1000\" */ sload(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ slot)\n                mstore(memPtr, length)\n                let _1 := 0x20\n                pos := add(memPtr, _1)\n                /// @src 3:1979:1983  \"1000\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 3:1979:1983  \"1000\" */ slot)\n                /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                let srcPtr := /** @src 3:1979:1983  \"1000\" */ keccak256(/** @src -1:-1:-1 */ 0, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _1)\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, and(sload(srcPtr), sub(shl(160, 1), 1)))\n                    pos := add(pos, _1)\n                    srcPtr := add(srcPtr, 1)\n                }\n                finalize_allocation(memPtr, sub(pos, memPtr))\n            }\n            function copy_array_from_storage_to_memory_array_uint256_dyn(slot) -> memPtr\n            {\n                memPtr := mload(64)\n                let pos := memPtr\n                let length := /** @src 3:1979:1983  \"1000\" */ sload(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ slot)\n                mstore(memPtr, length)\n                let _1 := 0x20\n                pos := add(memPtr, _1)\n                /// @src 3:1979:1983  \"1000\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 3:1979:1983  \"1000\" */ slot)\n                /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                let srcPtr := /** @src 3:1979:1983  \"1000\" */ keccak256(/** @src -1:-1:-1 */ 0, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ _1)\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, sload(srcPtr))\n                    pos := add(pos, _1)\n                    srcPtr := add(srcPtr, 1)\n                }\n                finalize_allocation(memPtr, sub(pos, memPtr))\n            }\n            function checked_add_uint256(x, y) -> sum\n            {\n                sum := add(x, y)\n                if gt(x, sum)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n            function memory_array_index_access_address_dyn(baseRef, index) -> addr\n            {\n                if iszero(lt(index, mload(baseRef)))\n                {\n                    /// @src 3:1979:1983  \"1000\"\n                    mstore(0, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ shl(224, 0x4e487b71))\n                    /// @src 3:1979:1983  \"1000\"\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                addr := add(add(baseRef, shl(5, index)), 32)\n            }\n            function checked_add_int256(x, y) -> sum\n            {\n                sum := add(x, y)\n                let _1 := slt(sum, y)\n                let _2 := slt(x, 0)\n                if or(and(iszero(_2), _1), and(_2, iszero(_1)))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n            /// @ast-id 1097 @src 3:10411:10789  \"function getNumberOfChallenger(...\"\n            function fun_getNumberOfChallenger(var_betId) -> var\n            {\n                /// @src 3:1979:1983  \"1000\"\n                mstore(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, /** @src 3:1979:1983  \"1000\" */ var_betId)\n                mstore(0x20, /** @src 3:10551:10557  \"s_Bets\" */ 0x06)\n                /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n                let converted := copy_array_from_storage_to_memory_array_address_dyn(/** @src 3:10551:10577  \"s_Bets[betId_].challengers\" */ add(/** @src 3:1979:1983  \"1000\" */ keccak256(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0, /** @src 3:1979:1983  \"1000\" */ 0x40), /** @src 3:10551:10577  \"s_Bets[betId_].challengers\" */ 5))\n                /// @src 3:10592:10598  \"uint i\"\n                let var_i := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ 0\n                /// @src 3:10587:10740  \"for (uint i; i < possibleAddresses.length; i++) {...\"\n                for { }\n                /** @src 3:10592:10598  \"uint i\" */ 1\n                {\n                    /// @src 3:10630:10633  \"i++\"\n                    var_i := increment_uint256(var_i)\n                }\n                {\n                    /// @src 3:10600:10628  \"i < possibleAddresses.length\"\n                    if iszero(lt(var_i, /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ mload(/** @src 3:10604:10628  \"possibleAddresses.length\" */ converted)))\n                    /// @src 3:10600:10628  \"i < possibleAddresses.length\"\n                    { break }\n                    /// @src 3:10649:10730  \"if (possibleAddresses[i] == msg.sender) {...\"\n                    if /** @src 3:10653:10687  \"possibleAddresses[i] == msg.sender\" */ eq(/** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ and(/** @src 3:1979:1983  \"1000\" */ mload(/** @src 3:10653:10673  \"possibleAddresses[i]\" */ memory_array_index_access_address_dyn(converted, var_i)), /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ sub(shl(160, 1), 1)), /** @src 3:10677:10687  \"msg.sender\" */ caller())\n                    /// @src 3:10649:10730  \"if (possibleAddresses[i] == msg.sender) {...\"\n                    {\n                        /// @src 3:10707:10715  \"return i\"\n                        var := var_i\n                        leave\n                    }\n                }\n                /// @src 3:10756:10782  \"P2PBetting__UserNotInBet()\"\n                let _1 := /** @src 3:233:11341  \"contract P2PBetting is Ownable {...\" */ mload(/** @src 3:1979:1983  \"1000\" */ 0x40)\n                /// @src 3:10756:10782  \"P2PBetting__UserNotInBet()\"\n                mstore(_1, shl(226, 0x07f897d3))\n                revert(_1, 4)\n            }\n            /// @src 3:233:11341  \"contract P2PBetting is Ownable {...\"\n            function abi_decode_uint80_fromMemory(offset) -> value\n            {\n                value := mload(offset)\n                if iszero(eq(value, and(value, 0xffffffffffffffffffff))) { revert(0, 0) }\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220b2cd11a4ea6bd928177d9f1cd8f18a6c0d7cccbd3ee1092312ccbe13bcd4cdb264736f6c63430008140033\"\n    }\n}\n",
        "hash": "0100032d15151f49e74939ad9df2770f626426caa4532d5d0b0d8b9a880cda72",
        "factoryDependencies": {}
      }
    }
  },
  "sources": {
    "lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "id": 0,
      "ast": {
        "absolutePath": "lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol",
        "exportedSymbols": {
          "AggregatorV3Interface": [
            45
          ]
        },
        "id": 46,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 1,
            "literals": [
              "solidity",
              "^",
              "0.8",
              ".0"
            ],
            "nodeType": "PragmaDirective",
            "src": "32:23:0"
          },
          {
            "abstract": false,
            "baseContracts": [],
            "canonicalName": "AggregatorV3Interface",
            "contractDependencies": [],
            "contractKind": "interface",
            "fullyImplemented": false,
            "id": 45,
            "linearizedBaseContracts": [
              45
            ],
            "name": "AggregatorV3Interface",
            "nameLocation": "67:21:0",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "functionSelector": "313ce567",
                "id": 6,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "decimals",
                "nameLocation": "102:8:0",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 2,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "110:2:0"
                },
                "returnParameters": {
                  "id": 5,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 4,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 6,
                      "src": "136:5:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      },
                      "typeName": {
                        "id": 3,
                        "name": "uint8",
                        "nodeType": "ElementaryTypeName",
                        "src": "136:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "135:7:0"
                },
                "scope": 45,
                "src": "93:50:0",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              },
              {
                "functionSelector": "7284e416",
                "id": 11,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "description",
                "nameLocation": "156:11:0",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 7,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "167:2:0"
                },
                "returnParameters": {
                  "id": 10,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 9,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 11,
                      "src": "193:13:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 8,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "193:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "192:15:0"
                },
                "scope": 45,
                "src": "147:61:0",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              },
              {
                "functionSelector": "54fd4d50",
                "id": 16,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "version",
                "nameLocation": "221:7:0",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 12,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "228:2:0"
                },
                "returnParameters": {
                  "id": 15,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 14,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 16,
                      "src": "254:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 13,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "254:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "253:9:0"
                },
                "scope": 45,
                "src": "212:51:0",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              },
              {
                "functionSelector": "9a6fc8f5",
                "id": 31,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "getRoundData",
                "nameLocation": "276:12:0",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 19,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 18,
                      "mutability": "mutable",
                      "name": "_roundId",
                      "nameLocation": "296:8:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 31,
                      "src": "289:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint80",
                        "typeString": "uint80"
                      },
                      "typeName": {
                        "id": 17,
                        "name": "uint80",
                        "nodeType": "ElementaryTypeName",
                        "src": "289:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint80",
                          "typeString": "uint80"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "288:17:0"
                },
                "returnParameters": {
                  "id": 30,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 21,
                      "mutability": "mutable",
                      "name": "roundId",
                      "nameLocation": "355:7:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 31,
                      "src": "348:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint80",
                        "typeString": "uint80"
                      },
                      "typeName": {
                        "id": 20,
                        "name": "uint80",
                        "nodeType": "ElementaryTypeName",
                        "src": "348:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint80",
                          "typeString": "uint80"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 23,
                      "mutability": "mutable",
                      "name": "answer",
                      "nameLocation": "377:6:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 31,
                      "src": "370:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      },
                      "typeName": {
                        "id": 22,
                        "name": "int256",
                        "nodeType": "ElementaryTypeName",
                        "src": "370:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 25,
                      "mutability": "mutable",
                      "name": "startedAt",
                      "nameLocation": "399:9:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 31,
                      "src": "391:17:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 24,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "391:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 27,
                      "mutability": "mutable",
                      "name": "updatedAt",
                      "nameLocation": "424:9:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 31,
                      "src": "416:17:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 26,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "416:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 29,
                      "mutability": "mutable",
                      "name": "answeredInRound",
                      "nameLocation": "448:15:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 31,
                      "src": "441:22:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint80",
                        "typeString": "uint80"
                      },
                      "typeName": {
                        "id": 28,
                        "name": "uint80",
                        "nodeType": "ElementaryTypeName",
                        "src": "441:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint80",
                          "typeString": "uint80"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "340:129:0"
                },
                "scope": 45,
                "src": "267:203:0",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              },
              {
                "functionSelector": "feaf968c",
                "id": 44,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "latestRoundData",
                "nameLocation": "483:15:0",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 32,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "498:2:0"
                },
                "returnParameters": {
                  "id": 43,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 34,
                      "mutability": "mutable",
                      "name": "roundId",
                      "nameLocation": "550:7:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 44,
                      "src": "543:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint80",
                        "typeString": "uint80"
                      },
                      "typeName": {
                        "id": 33,
                        "name": "uint80",
                        "nodeType": "ElementaryTypeName",
                        "src": "543:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint80",
                          "typeString": "uint80"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 36,
                      "mutability": "mutable",
                      "name": "answer",
                      "nameLocation": "572:6:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 44,
                      "src": "565:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      },
                      "typeName": {
                        "id": 35,
                        "name": "int256",
                        "nodeType": "ElementaryTypeName",
                        "src": "565:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 38,
                      "mutability": "mutable",
                      "name": "startedAt",
                      "nameLocation": "594:9:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 44,
                      "src": "586:17:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 37,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "586:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 40,
                      "mutability": "mutable",
                      "name": "updatedAt",
                      "nameLocation": "619:9:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 44,
                      "src": "611:17:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 39,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "611:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 42,
                      "mutability": "mutable",
                      "name": "answeredInRound",
                      "nameLocation": "643:15:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 44,
                      "src": "636:22:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint80",
                        "typeString": "uint80"
                      },
                      "typeName": {
                        "id": 41,
                        "name": "uint80",
                        "nodeType": "ElementaryTypeName",
                        "src": "636:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint80",
                          "typeString": "uint80"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "535:129:0"
                },
                "scope": 45,
                "src": "474:191:0",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              }
            ],
            "scope": 46,
            "src": "57:610:0",
            "usedErrors": [],
            "usedEvents": []
          }
        ],
        "src": "32:636:0"
      }
    },
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "id": 1,
      "ast": {
        "absolutePath": "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "exportedSymbols": {
          "Context": [
            223
          ],
          "Ownable": [
            193
          ]
        },
        "id": 194,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 47,
            "literals": [
              "solidity",
              "^",
              "0.8",
              ".20"
            ],
            "nodeType": "PragmaDirective",
            "src": "102:24:1"
          },
          {
            "absolutePath": "lib/openzeppelin-contracts/contracts/utils/Context.sol",
            "file": "../utils/Context.sol",
            "id": 49,
            "nameLocation": "-1:-1:-1",
            "nodeType": "ImportDirective",
            "scope": 194,
            "sourceUnit": 224,
            "src": "128:45:1",
            "symbolAliases": [
              {
                "foreign": {
                  "id": 48,
                  "name": "Context",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 223,
                  "src": "136:7:1",
                  "typeDescriptions": {}
                },
                "nameLocation": "-1:-1:-1"
              }
            ],
            "unitAlias": ""
          },
          {
            "abstract": true,
            "baseContracts": [
              {
                "baseName": {
                  "id": 51,
                  "name": "Context",
                  "nameLocations": [
                    "692:7:1"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 223,
                  "src": "692:7:1"
                },
                "id": 52,
                "nodeType": "InheritanceSpecifier",
                "src": "692:7:1"
              }
            ],
            "canonicalName": "Ownable",
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": {
              "id": 50,
              "nodeType": "StructuredDocumentation",
              "src": "175:487:1",
              "text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
            },
            "fullyImplemented": true,
            "id": 193,
            "linearizedBaseContracts": [
              193,
              223
            ],
            "name": "Ownable",
            "nameLocation": "681:7:1",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "id": 54,
                "mutability": "mutable",
                "name": "_owner",
                "nameLocation": "722:6:1",
                "nodeType": "VariableDeclaration",
                "scope": 193,
                "src": "706:22:1",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 53,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "706:7:1",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "private"
              },
              {
                "documentation": {
                  "id": 55,
                  "nodeType": "StructuredDocumentation",
                  "src": "735:85:1",
                  "text": " @dev The caller account is not authorized to perform an operation."
                },
                "errorSelector": "118cdaa7",
                "id": 59,
                "name": "OwnableUnauthorizedAccount",
                "nameLocation": "831:26:1",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 58,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 57,
                      "mutability": "mutable",
                      "name": "account",
                      "nameLocation": "866:7:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 59,
                      "src": "858:15:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 56,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "858:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "857:17:1"
                },
                "src": "825:50:1"
              },
              {
                "documentation": {
                  "id": 60,
                  "nodeType": "StructuredDocumentation",
                  "src": "881:82:1",
                  "text": " @dev The owner is not a valid owner account. (eg. `address(0)`)"
                },
                "errorSelector": "1e4fbdf7",
                "id": 64,
                "name": "OwnableInvalidOwner",
                "nameLocation": "974:19:1",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 63,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 62,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "1002:5:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 64,
                      "src": "994:13:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 61,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "994:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "993:15:1"
                },
                "src": "968:41:1"
              },
              {
                "anonymous": false,
                "eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
                "id": 70,
                "name": "OwnershipTransferred",
                "nameLocation": "1021:20:1",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 69,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 66,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "previousOwner",
                      "nameLocation": "1058:13:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 70,
                      "src": "1042:29:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 65,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1042:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 68,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "newOwner",
                      "nameLocation": "1089:8:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 70,
                      "src": "1073:24:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 67,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1073:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1041:57:1"
                },
                "src": "1015:84:1"
              },
              {
                "body": {
                  "id": 95,
                  "nodeType": "Block",
                  "src": "1259:153:1",
                  "statements": [
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 81,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 76,
                          "name": "initialOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 73,
                          "src": "1273:12:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 79,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1297:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 78,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1289:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 77,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "1289:7:1",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 80,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1289:10:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1273:26:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 90,
                      "nodeType": "IfStatement",
                      "src": "1269:95:1",
                      "trueBody": {
                        "id": 89,
                        "nodeType": "Block",
                        "src": "1301:63:1",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "hexValue": "30",
                                      "id": 85,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "1350:1:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      }
                                    ],
                                    "id": 84,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "1342:7:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 83,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "1342:7:1",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 86,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1342:10:1",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 82,
                                "name": "OwnableInvalidOwner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 64,
                                "src": "1322:19:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
                                  "typeString": "function (address) pure"
                                }
                              },
                              "id": 87,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1322:31:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 88,
                            "nodeType": "RevertStatement",
                            "src": "1315:38:1"
                          }
                        ]
                      }
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 92,
                            "name": "initialOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 73,
                            "src": "1392:12:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 91,
                          "name": "_transferOwnership",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 192,
                          "src": "1373:18:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 93,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1373:32:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 94,
                      "nodeType": "ExpressionStatement",
                      "src": "1373:32:1"
                    }
                  ]
                },
                "documentation": {
                  "id": 71,
                  "nodeType": "StructuredDocumentation",
                  "src": "1105:115:1",
                  "text": " @dev Initializes the contract setting the address provided by the deployer as the initial owner."
                },
                "id": 96,
                "implemented": true,
                "kind": "constructor",
                "modifiers": [],
                "name": "",
                "nameLocation": "-1:-1:-1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 74,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 73,
                      "mutability": "mutable",
                      "name": "initialOwner",
                      "nameLocation": "1245:12:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 96,
                      "src": "1237:20:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 72,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1237:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1236:22:1"
                },
                "returnParameters": {
                  "id": 75,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1259:0:1"
                },
                "scope": 193,
                "src": "1225:187:1",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 103,
                  "nodeType": "Block",
                  "src": "1521:41:1",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 99,
                          "name": "_checkOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 130,
                          "src": "1531:11:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$__$",
                            "typeString": "function () view"
                          }
                        },
                        "id": 100,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1531:13:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 101,
                      "nodeType": "ExpressionStatement",
                      "src": "1531:13:1"
                    },
                    {
                      "id": 102,
                      "nodeType": "PlaceholderStatement",
                      "src": "1554:1:1"
                    }
                  ]
                },
                "documentation": {
                  "id": 97,
                  "nodeType": "StructuredDocumentation",
                  "src": "1418:77:1",
                  "text": " @dev Throws if called by any account other than the owner."
                },
                "id": 104,
                "name": "onlyOwner",
                "nameLocation": "1509:9:1",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 98,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1518:2:1"
                },
                "src": "1500:62:1",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 112,
                  "nodeType": "Block",
                  "src": "1693:30:1",
                  "statements": [
                    {
                      "expression": {
                        "id": 110,
                        "name": "_owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 54,
                        "src": "1710:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "functionReturnParameters": 109,
                      "id": 111,
                      "nodeType": "Return",
                      "src": "1703:13:1"
                    }
                  ]
                },
                "documentation": {
                  "id": 105,
                  "nodeType": "StructuredDocumentation",
                  "src": "1568:65:1",
                  "text": " @dev Returns the address of the current owner."
                },
                "functionSelector": "8da5cb5b",
                "id": 113,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "owner",
                "nameLocation": "1647:5:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 106,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1652:2:1"
                },
                "returnParameters": {
                  "id": 109,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 108,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 113,
                      "src": "1684:7:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 107,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1684:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1683:9:1"
                },
                "scope": 193,
                "src": "1638:85:1",
                "stateMutability": "view",
                "virtual": true,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 129,
                  "nodeType": "Block",
                  "src": "1841:117:1",
                  "statements": [
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 121,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 117,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 113,
                            "src": "1855:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                              "typeString": "function () view returns (address)"
                            }
                          },
                          "id": 118,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1855:7:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 119,
                            "name": "_msgSender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 205,
                            "src": "1866:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                              "typeString": "function () view returns (address)"
                            }
                          },
                          "id": 120,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1866:12:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1855:23:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 128,
                      "nodeType": "IfStatement",
                      "src": "1851:101:1",
                      "trueBody": {
                        "id": 127,
                        "nodeType": "Block",
                        "src": "1880:72:1",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [
                                {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "id": 123,
                                    "name": "_msgSender",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 205,
                                    "src": "1928:10:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                      "typeString": "function () view returns (address)"
                                    }
                                  },
                                  "id": 124,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1928:12:1",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 122,
                                "name": "OwnableUnauthorizedAccount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 59,
                                "src": "1901:26:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
                                  "typeString": "function (address) pure"
                                }
                              },
                              "id": 125,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1901:40:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 126,
                            "nodeType": "RevertStatement",
                            "src": "1894:47:1"
                          }
                        ]
                      }
                    }
                  ]
                },
                "documentation": {
                  "id": 114,
                  "nodeType": "StructuredDocumentation",
                  "src": "1729:62:1",
                  "text": " @dev Throws if the sender is not the owner."
                },
                "id": 130,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_checkOwner",
                "nameLocation": "1805:11:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 115,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1816:2:1"
                },
                "returnParameters": {
                  "id": 116,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1841:0:1"
                },
                "scope": 193,
                "src": "1796:162:1",
                "stateMutability": "view",
                "virtual": true,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 143,
                  "nodeType": "Block",
                  "src": "2347:47:1",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 139,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2384:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 138,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "2376:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 137,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "2376:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 140,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2376:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 136,
                          "name": "_transferOwnership",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 192,
                          "src": "2357:18:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 141,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2357:30:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 142,
                      "nodeType": "ExpressionStatement",
                      "src": "2357:30:1"
                    }
                  ]
                },
                "documentation": {
                  "id": 131,
                  "nodeType": "StructuredDocumentation",
                  "src": "1964:324:1",
                  "text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
                },
                "functionSelector": "715018a6",
                "id": 144,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "id": 134,
                    "kind": "modifierInvocation",
                    "modifierName": {
                      "id": 133,
                      "name": "onlyOwner",
                      "nameLocations": [
                        "2337:9:1"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 104,
                      "src": "2337:9:1"
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "2337:9:1"
                  }
                ],
                "name": "renounceOwnership",
                "nameLocation": "2302:17:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 132,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2319:2:1"
                },
                "returnParameters": {
                  "id": 135,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2347:0:1"
                },
                "scope": 193,
                "src": "2293:101:1",
                "stateMutability": "nonpayable",
                "virtual": true,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 171,
                  "nodeType": "Block",
                  "src": "2613:145:1",
                  "statements": [
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 157,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 152,
                          "name": "newOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 147,
                          "src": "2627:8:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 155,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2647:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 154,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2639:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 153,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "2639:7:1",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 156,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2639:10:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "2627:22:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 166,
                      "nodeType": "IfStatement",
                      "src": "2623:91:1",
                      "trueBody": {
                        "id": 165,
                        "nodeType": "Block",
                        "src": "2651:63:1",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "hexValue": "30",
                                      "id": 161,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "2700:1:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      }
                                    ],
                                    "id": 160,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "2692:7:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 159,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "2692:7:1",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 162,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2692:10:1",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 158,
                                "name": "OwnableInvalidOwner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 64,
                                "src": "2672:19:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
                                  "typeString": "function (address) pure"
                                }
                              },
                              "id": 163,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2672:31:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 164,
                            "nodeType": "RevertStatement",
                            "src": "2665:38:1"
                          }
                        ]
                      }
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 168,
                            "name": "newOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 147,
                            "src": "2742:8:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 167,
                          "name": "_transferOwnership",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 192,
                          "src": "2723:18:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 169,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2723:28:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 170,
                      "nodeType": "ExpressionStatement",
                      "src": "2723:28:1"
                    }
                  ]
                },
                "documentation": {
                  "id": 145,
                  "nodeType": "StructuredDocumentation",
                  "src": "2400:138:1",
                  "text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
                },
                "functionSelector": "f2fde38b",
                "id": 172,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "id": 150,
                    "kind": "modifierInvocation",
                    "modifierName": {
                      "id": 149,
                      "name": "onlyOwner",
                      "nameLocations": [
                        "2603:9:1"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 104,
                      "src": "2603:9:1"
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "2603:9:1"
                  }
                ],
                "name": "transferOwnership",
                "nameLocation": "2552:17:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 148,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 147,
                      "mutability": "mutable",
                      "name": "newOwner",
                      "nameLocation": "2578:8:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 172,
                      "src": "2570:16:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 146,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2570:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2569:18:1"
                },
                "returnParameters": {
                  "id": 151,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2613:0:1"
                },
                "scope": 193,
                "src": "2543:215:1",
                "stateMutability": "nonpayable",
                "virtual": true,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 191,
                  "nodeType": "Block",
                  "src": "2975:124:1",
                  "statements": [
                    {
                      "assignments": [
                        179
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 179,
                          "mutability": "mutable",
                          "name": "oldOwner",
                          "nameLocation": "2993:8:1",
                          "nodeType": "VariableDeclaration",
                          "scope": 191,
                          "src": "2985:16:1",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "typeName": {
                            "id": 178,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "2985:7:1",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 181,
                      "initialValue": {
                        "id": 180,
                        "name": "_owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 54,
                        "src": "3004:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "2985:25:1"
                    },
                    {
                      "expression": {
                        "id": 184,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 182,
                          "name": "_owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 54,
                          "src": "3020:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 183,
                          "name": "newOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 175,
                          "src": "3029:8:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "3020:17:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 185,
                      "nodeType": "ExpressionStatement",
                      "src": "3020:17:1"
                    },
                    {
                      "eventCall": {
                        "arguments": [
                          {
                            "id": 187,
                            "name": "oldOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 179,
                            "src": "3073:8:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 188,
                            "name": "newOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 175,
                            "src": "3083:8:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 186,
                          "name": "OwnershipTransferred",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 70,
                          "src": "3052:20:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                            "typeString": "function (address,address)"
                          }
                        },
                        "id": 189,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3052:40:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 190,
                      "nodeType": "EmitStatement",
                      "src": "3047:45:1"
                    }
                  ]
                },
                "documentation": {
                  "id": 173,
                  "nodeType": "StructuredDocumentation",
                  "src": "2764:143:1",
                  "text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
                },
                "id": 192,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_transferOwnership",
                "nameLocation": "2921:18:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 176,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 175,
                      "mutability": "mutable",
                      "name": "newOwner",
                      "nameLocation": "2948:8:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 192,
                      "src": "2940:16:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 174,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2940:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2939:18:1"
                },
                "returnParameters": {
                  "id": 177,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2975:0:1"
                },
                "scope": 193,
                "src": "2912:187:1",
                "stateMutability": "nonpayable",
                "virtual": true,
                "visibility": "internal"
              }
            ],
            "scope": 194,
            "src": "663:2438:1",
            "usedErrors": [
              59,
              64
            ],
            "usedEvents": [
              70
            ]
          }
        ],
        "src": "102:3000:1"
      }
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "id": 2,
      "ast": {
        "absolutePath": "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "exportedSymbols": {
          "Context": [
            223
          ]
        },
        "id": 224,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 195,
            "literals": [
              "solidity",
              "^",
              "0.8",
              ".20"
            ],
            "nodeType": "PragmaDirective",
            "src": "101:24:2"
          },
          {
            "abstract": true,
            "baseContracts": [],
            "canonicalName": "Context",
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": {
              "id": 196,
              "nodeType": "StructuredDocumentation",
              "src": "127:496:2",
              "text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
            },
            "fullyImplemented": true,
            "id": 223,
            "linearizedBaseContracts": [
              223
            ],
            "name": "Context",
            "nameLocation": "642:7:2",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "body": {
                  "id": 204,
                  "nodeType": "Block",
                  "src": "718:34:2",
                  "statements": [
                    {
                      "expression": {
                        "expression": {
                          "id": 201,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "735:3:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 202,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "739:6:2",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "735:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "functionReturnParameters": 200,
                      "id": 203,
                      "nodeType": "Return",
                      "src": "728:17:2"
                    }
                  ]
                },
                "id": 205,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_msgSender",
                "nameLocation": "665:10:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 197,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "675:2:2"
                },
                "returnParameters": {
                  "id": 200,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 199,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 205,
                      "src": "709:7:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 198,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "709:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "708:9:2"
                },
                "scope": 223,
                "src": "656:96:2",
                "stateMutability": "view",
                "virtual": true,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 213,
                  "nodeType": "Block",
                  "src": "825:32:2",
                  "statements": [
                    {
                      "expression": {
                        "expression": {
                          "id": 210,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "842:3:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 211,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "846:4:2",
                        "memberName": "data",
                        "nodeType": "MemberAccess",
                        "src": "842:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      "functionReturnParameters": 209,
                      "id": 212,
                      "nodeType": "Return",
                      "src": "835:15:2"
                    }
                  ]
                },
                "id": 214,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_msgData",
                "nameLocation": "767:8:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 206,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "775:2:2"
                },
                "returnParameters": {
                  "id": 209,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 208,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 214,
                      "src": "809:14:2",
                      "stateVariable": false,
                      "storageLocation": "calldata",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_calldata_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 207,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "809:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "808:16:2"
                },
                "scope": 223,
                "src": "758:99:2",
                "stateMutability": "view",
                "virtual": true,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 221,
                  "nodeType": "Block",
                  "src": "935:25:2",
                  "statements": [
                    {
                      "expression": {
                        "hexValue": "30",
                        "id": 219,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "952:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "functionReturnParameters": 218,
                      "id": 220,
                      "nodeType": "Return",
                      "src": "945:8:2"
                    }
                  ]
                },
                "id": 222,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_contextSuffixLength",
                "nameLocation": "872:20:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 215,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "892:2:2"
                },
                "returnParameters": {
                  "id": 218,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 217,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 222,
                      "src": "926:7:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 216,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "926:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "925:9:2"
                },
                "scope": 223,
                "src": "863:97:2",
                "stateMutability": "view",
                "virtual": true,
                "visibility": "internal"
              }
            ],
            "scope": 224,
            "src": "624:338:2",
            "usedErrors": [],
            "usedEvents": []
          }
        ],
        "src": "101:862:2"
      }
    },
    "src/P2PBetting.sol": {
      "id": 3,
      "ast": {
        "absolutePath": "src/P2PBetting.sol",
        "exportedSymbols": {
          "AggregatorV3Interface": [
            45
          ],
          "Ownable": [
            193
          ],
          "P2PBetting": [
            1140
          ]
        },
        "id": 1141,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 225,
            "literals": [
              "solidity",
              "0.8",
              ".20"
            ],
            "nodeType": "PragmaDirective",
            "src": "33:23:3"
          },
          {
            "absolutePath": "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
            "file": "@openzeppelin/contracts/access/Ownable.sol",
            "id": 227,
            "nameLocation": "-1:-1:-1",
            "nodeType": "ImportDirective",
            "scope": 1141,
            "sourceUnit": 194,
            "src": "58:67:3",
            "symbolAliases": [
              {
                "foreign": {
                  "id": 226,
                  "name": "Ownable",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 193,
                  "src": "66:7:3",
                  "typeDescriptions": {}
                },
                "nameLocation": "-1:-1:-1"
              }
            ],
            "unitAlias": ""
          },
          {
            "absolutePath": "lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol",
            "file": "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol",
            "id": 229,
            "nameLocation": "-1:-1:-1",
            "nodeType": "ImportDirective",
            "scope": 1141,
            "sourceUnit": 46,
            "src": "126:105:3",
            "symbolAliases": [
              {
                "foreign": {
                  "id": 228,
                  "name": "AggregatorV3Interface",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 45,
                  "src": "134:21:3",
                  "typeDescriptions": {}
                },
                "nameLocation": "-1:-1:-1"
              }
            ],
            "unitAlias": ""
          },
          {
            "abstract": false,
            "baseContracts": [
              {
                "baseName": {
                  "id": 230,
                  "name": "Ownable",
                  "nameLocations": [
                    "256:7:3"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 193,
                  "src": "256:7:3"
                },
                "id": 231,
                "nodeType": "InheritanceSpecifier",
                "src": "256:7:3"
              }
            ],
            "canonicalName": "P2PBetting",
            "contractDependencies": [],
            "contractKind": "contract",
            "fullyImplemented": true,
            "id": 1140,
            "linearizedBaseContracts": [
              1140,
              193,
              223
            ],
            "name": "P2PBetting",
            "nameLocation": "242:10:3",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "errorSelector": "4a5f2a1b",
                "id": 233,
                "name": "P2PBetting__TransferFailed",
                "nameLocation": "427:26:3",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 232,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "453:2:3"
                },
                "src": "421:35:3"
              },
              {
                "errorSelector": "0d27d3e9",
                "id": 235,
                "name": "P2PBetting__NumberOfChallengersCantBeZero",
                "nameLocation": "467:41:3",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 234,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "508:2:3"
                },
                "src": "461:50:3"
              },
              {
                "errorSelector": "2e2785d6",
                "id": 237,
                "name": "P2PBetting__MaxPriceCantBeZero",
                "nameLocation": "522:30:3",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 236,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "552:2:3"
                },
                "src": "516:39:3"
              },
              {
                "errorSelector": "7ed63ccd",
                "id": 239,
                "name": "P2PBetting__OddsMustBeHigherThanOne",
                "nameLocation": "566:35:3",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 238,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "601:2:3"
                },
                "src": "560:44:3"
              },
              {
                "errorSelector": "745f581d",
                "id": 241,
                "name": "P2PBetting__NotEnoughEthSent",
                "nameLocation": "615:28:3",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 240,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "643:2:3"
                },
                "src": "609:37:3"
              },
              {
                "errorSelector": "ed475626",
                "id": 243,
                "name": "P2PBetting__TooMuchEthSent",
                "nameLocation": "657:26:3",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 242,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "683:2:3"
                },
                "src": "651:35:3"
              },
              {
                "errorSelector": "81071d28",
                "id": 245,
                "name": "P2PBetting__BetIsFullOrNonexistent",
                "nameLocation": "697:34:3",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 244,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "731:2:3"
                },
                "src": "691:43:3"
              },
              {
                "errorSelector": "ba05bf47",
                "id": 247,
                "name": "P2PBetting__CantEnterBetNow",
                "nameLocation": "745:27:3",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 246,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "772:2:3"
                },
                "src": "739:36:3"
              },
              {
                "errorSelector": "1fe25f4c",
                "id": 249,
                "name": "P2PBetting__UserNotInBet",
                "nameLocation": "786:24:3",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 248,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "810:2:3"
                },
                "src": "780:33:3"
              },
              {
                "errorSelector": "dfba2d6c",
                "id": 251,
                "name": "P2PBetting__AlreadyRetrievedOrBetNonexistent",
                "nameLocation": "824:44:3",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 250,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "868:2:3"
                },
                "src": "818:53:3"
              },
              {
                "errorSelector": "f0f84dd5",
                "id": 253,
                "name": "P2PBetting__OnlyCalledIfTipsterLost",
                "nameLocation": "882:35:3",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 252,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "917:2:3"
                },
                "src": "876:44:3"
              },
              {
                "anonymous": false,
                "eventSelector": "3ddd765e918a581cb556c6b10e6c7cb12c695d5eb7516a9be17358dec5ef3c96",
                "id": 259,
                "name": "P2PBetting__NewFeeSet",
                "nameLocation": "1083:21:3",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 258,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 255,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "oldFee",
                      "nameLocation": "1121:6:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 259,
                      "src": "1105:22:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 254,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1105:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 257,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "newFee",
                      "nameLocation": "1145:6:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 259,
                      "src": "1129:22:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 256,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1129:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1104:48:3"
                },
                "src": "1077:76:3"
              },
              {
                "anonymous": false,
                "eventSelector": "6f4d463f06d6303ccb5e5f3efff065c43013611c234549b89243f40257a7b722",
                "id": 263,
                "name": "P2PBetting__NewOracleSet",
                "nameLocation": "1164:24:3",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 262,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 261,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "oracle",
                      "nameLocation": "1205:6:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 263,
                      "src": "1189:22:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 260,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1189:7:3",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1188:24:3"
                },
                "src": "1158:55:3"
              },
              {
                "anonymous": false,
                "eventSelector": "e7d6bd5223226a9dafb832e86113f33399d2c3d382f6f8eed9d8dcc7c353f237",
                "id": 273,
                "name": "P2PBetting__BetCreated",
                "nameLocation": "1224:22:3",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 272,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 265,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "maxPrice",
                      "nameLocation": "1272:8:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 273,
                      "src": "1256:24:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 264,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1256:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 267,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "odds",
                      "nameLocation": "1306:4:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 273,
                      "src": "1290:20:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 266,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1290:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 269,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "maxNumOfPlayers",
                      "nameLocation": "1336:15:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 273,
                      "src": "1320:31:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 268,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1320:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 271,
                      "indexed": false,
                      "mutability": "mutable",
                      "name": "betData",
                      "nameLocation": "1368:7:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 273,
                      "src": "1361:14:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 270,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "1361:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1246:135:3"
                },
                "src": "1218:164:3"
              },
              {
                "anonymous": false,
                "eventSelector": "f4f2ad6f4b10f9853be76745070984d581f6da2399617776ec329308e46d0804",
                "id": 277,
                "name": "P2PBetting__FeesCollected",
                "nameLocation": "1393:25:3",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 276,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 275,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "feesCollected",
                      "nameLocation": "1435:13:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 277,
                      "src": "1419:29:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 274,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1419:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1418:31:3"
                },
                "src": "1387:63:3"
              },
              {
                "anonymous": false,
                "eventSelector": "36ded20b495c4e5f788b261f134395c38eb7360ff2bb88fc16c7b67751939328",
                "id": 283,
                "name": "P2PBetting__BetJoined",
                "nameLocation": "1461:21:3",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 282,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 279,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "challenger",
                      "nameLocation": "1508:10:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 283,
                      "src": "1492:26:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 278,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1492:7:3",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 281,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "betID",
                      "nameLocation": "1544:5:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 283,
                      "src": "1528:21:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 280,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1528:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1482:73:3"
                },
                "src": "1455:101:3"
              },
              {
                "anonymous": false,
                "eventSelector": "3c92031d788fb886d6b0cef0d544d742f65fe462e576906cfe03a5f36ef12440",
                "id": 289,
                "name": "P2PBetting__RewardClaimed",
                "nameLocation": "1567:25:3",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 288,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 285,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "winner",
                      "nameLocation": "1618:6:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 289,
                      "src": "1602:22:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 284,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1602:7:3",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 287,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "amount",
                      "nameLocation": "1650:6:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 289,
                      "src": "1634:22:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 286,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1634:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1592:70:3"
                },
                "src": "1561:102:3"
              },
              {
                "constant": false,
                "id": 292,
                "mutability": "mutable",
                "name": "USD_ETH_dataFeed",
                "nameLocation": "1928:16:3",
                "nodeType": "VariableDeclaration",
                "scope": 1140,
                "src": "1897:47:3",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_contract$_AggregatorV3Interface_$45",
                  "typeString": "contract AggregatorV3Interface"
                },
                "typeName": {
                  "id": 291,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 290,
                    "name": "AggregatorV3Interface",
                    "nameLocations": [
                      "1897:21:3"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 45,
                    "src": "1897:21:3"
                  },
                  "referencedDeclaration": 45,
                  "src": "1897:21:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_AggregatorV3Interface_$45",
                    "typeString": "contract AggregatorV3Interface"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": true,
                "id": 295,
                "mutability": "constant",
                "name": "DECIMALS",
                "nameLocation": "1968:8:3",
                "nodeType": "VariableDeclaration",
                "scope": 1140,
                "src": "1951:32:3",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 293,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1951:7:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": {
                  "hexValue": "31303030",
                  "id": 294,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "1979:4:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_1000_by_1",
                    "typeString": "int_const 1000"
                  },
                  "value": "1000"
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 297,
                "mutability": "mutable",
                "name": "s_fee",
                "nameLocation": "2018:5:3",
                "nodeType": "VariableDeclaration",
                "scope": 1140,
                "src": "2002:21:3",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 296,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "2002:7:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 299,
                "mutability": "mutable",
                "name": "feesCollected",
                "nameLocation": "2058:13:3",
                "nodeType": "VariableDeclaration",
                "scope": 1140,
                "src": "2042:29:3",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 298,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "2042:7:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 301,
                "mutability": "mutable",
                "name": "numberOfBetsDone",
                "nameLocation": "2093:16:3",
                "nodeType": "VariableDeclaration",
                "scope": 1140,
                "src": "2077:32:3",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 300,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "2077:7:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 306,
                "mutability": "mutable",
                "name": "s_Profiles",
                "nameLocation": "2157:10:3",
                "nodeType": "VariableDeclaration",
                "scope": 1140,
                "src": "2116:51:3",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Profile_$317_storage_$",
                  "typeString": "mapping(address => struct P2PBetting.Profile)"
                },
                "typeName": {
                  "id": 305,
                  "keyName": "user",
                  "keyNameLocation": "2132:4:3",
                  "keyType": {
                    "id": 302,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2124:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "2116:40:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Profile_$317_storage_$",
                    "typeString": "mapping(address => struct P2PBetting.Profile)"
                  },
                  "valueName": "profile",
                  "valueNameLocation": "2148:7:3",
                  "valueType": {
                    "id": 304,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 303,
                      "name": "Profile",
                      "nameLocations": [
                        "2140:7:3"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 317,
                      "src": "2140:7:3"
                    },
                    "referencedDeclaration": 317,
                    "src": "2140:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Profile_$317_storage_ptr",
                      "typeString": "struct P2PBetting.Profile"
                    }
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 311,
                "mutability": "mutable",
                "name": "s_Bets",
                "nameLocation": "2207:6:3",
                "nodeType": "VariableDeclaration",
                "scope": 1140,
                "src": "2173:40:3",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Bet_$348_storage_$",
                  "typeString": "mapping(uint256 => struct P2PBetting.Bet)"
                },
                "typeName": {
                  "id": 310,
                  "keyName": "betId",
                  "keyNameLocation": "2189:5:3",
                  "keyType": {
                    "id": 307,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2181:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "2173:33:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Bet_$348_storage_$",
                    "typeString": "mapping(uint256 => struct P2PBetting.Bet)"
                  },
                  "valueName": "bet",
                  "valueNameLocation": "2202:3:3",
                  "valueType": {
                    "id": 309,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 308,
                      "name": "Bet",
                      "nameLocations": [
                        "2198:3:3"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 348,
                      "src": "2198:3:3"
                    },
                    "referencedDeclaration": 348,
                    "src": "2198:3:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Bet_$348_storage_ptr",
                      "typeString": "struct P2PBetting.Bet"
                    }
                  }
                },
                "visibility": "internal"
              },
              {
                "canonicalName": "P2PBetting.Profile",
                "id": 317,
                "members": [
                  {
                    "constant": false,
                    "id": 313,
                    "mutability": "mutable",
                    "name": "balanceVariation",
                    "nameLocation": "2252:16:3",
                    "nodeType": "VariableDeclaration",
                    "scope": 317,
                    "src": "2245:23:3",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    },
                    "typeName": {
                      "id": 312,
                      "name": "int256",
                      "nodeType": "ElementaryTypeName",
                      "src": "2245:6:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 316,
                    "mutability": "mutable",
                    "name": "betIdHistory",
                    "nameLocation": "2288:12:3",
                    "nodeType": "VariableDeclaration",
                    "scope": 317,
                    "src": "2278:22:3",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    },
                    "typeName": {
                      "baseType": {
                        "id": 314,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2278:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 315,
                      "nodeType": "ArrayTypeName",
                      "src": "2278:9:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                        "typeString": "uint256[]"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "name": "Profile",
                "nameLocation": "2227:7:3",
                "nodeType": "StructDefinition",
                "scope": 1140,
                "src": "2220:87:3",
                "visibility": "public"
              },
              {
                "canonicalName": "P2PBetting.Bet",
                "id": 348,
                "members": [
                  {
                    "constant": false,
                    "id": 319,
                    "mutability": "mutable",
                    "name": "betId",
                    "nameLocation": "2342:5:3",
                    "nodeType": "VariableDeclaration",
                    "scope": 348,
                    "src": "2334:13:3",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 318,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "2334:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 321,
                    "mutability": "mutable",
                    "name": "tipster",
                    "nameLocation": "2365:7:3",
                    "nodeType": "VariableDeclaration",
                    "scope": 348,
                    "src": "2357:15:3",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "typeName": {
                      "id": 320,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "2357:7:3",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 323,
                    "mutability": "mutable",
                    "name": "collateralGiven",
                    "nameLocation": "2390:15:3",
                    "nodeType": "VariableDeclaration",
                    "scope": 348,
                    "src": "2382:23:3",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 322,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "2382:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 325,
                    "mutability": "mutable",
                    "name": "moneyInBet",
                    "nameLocation": "2423:10:3",
                    "nodeType": "VariableDeclaration",
                    "scope": 348,
                    "src": "2415:18:3",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 324,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "2415:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 327,
                    "mutability": "mutable",
                    "name": "maxNumberOfChallengers",
                    "nameLocation": "2451:22:3",
                    "nodeType": "VariableDeclaration",
                    "scope": 348,
                    "src": "2443:30:3",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 326,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "2443:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 330,
                    "mutability": "mutable",
                    "name": "challengers",
                    "nameLocation": "2493:11:3",
                    "nodeType": "VariableDeclaration",
                    "scope": 348,
                    "src": "2483:21:3",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    },
                    "typeName": {
                      "baseType": {
                        "id": 328,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2483:7:3",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 329,
                      "nodeType": "ArrayTypeName",
                      "src": "2483:9:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                        "typeString": "address[]"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 333,
                    "mutability": "mutable",
                    "name": "challengersMoneyBet",
                    "nameLocation": "2524:19:3",
                    "nodeType": "VariableDeclaration",
                    "scope": 348,
                    "src": "2514:29:3",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    },
                    "typeName": {
                      "baseType": {
                        "id": 331,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2514:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 332,
                      "nodeType": "ArrayTypeName",
                      "src": "2514:9:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                        "typeString": "uint256[]"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 335,
                    "mutability": "mutable",
                    "name": "odds",
                    "nameLocation": "2561:4:3",
                    "nodeType": "VariableDeclaration",
                    "scope": 348,
                    "src": "2553:12:3",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 334,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "2553:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 337,
                    "mutability": "mutable",
                    "name": "maxEntryFee",
                    "nameLocation": "2608:11:3",
                    "nodeType": "VariableDeclaration",
                    "scope": 348,
                    "src": "2600:19:3",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 336,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "2600:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 339,
                    "mutability": "mutable",
                    "name": "fee",
                    "nameLocation": "2637:3:3",
                    "nodeType": "VariableDeclaration",
                    "scope": 348,
                    "src": "2629:11:3",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 338,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "2629:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 341,
                    "mutability": "mutable",
                    "name": "tipsterWon",
                    "nameLocation": "2655:10:3",
                    "nodeType": "VariableDeclaration",
                    "scope": 348,
                    "src": "2650:15:3",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "typeName": {
                      "id": 340,
                      "name": "bool",
                      "nodeType": "ElementaryTypeName",
                      "src": "2650:4:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 343,
                    "mutability": "mutable",
                    "name": "locked",
                    "nameLocation": "2680:6:3",
                    "nodeType": "VariableDeclaration",
                    "scope": 348,
                    "src": "2675:11:3",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "typeName": {
                      "id": 342,
                      "name": "bool",
                      "nodeType": "ElementaryTypeName",
                      "src": "2675:4:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 345,
                    "mutability": "mutable",
                    "name": "ended",
                    "nameLocation": "2701:5:3",
                    "nodeType": "VariableDeclaration",
                    "scope": 348,
                    "src": "2696:10:3",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "typeName": {
                      "id": 344,
                      "name": "bool",
                      "nodeType": "ElementaryTypeName",
                      "src": "2696:4:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 347,
                    "mutability": "mutable",
                    "name": "timestampWhenEnded",
                    "nameLocation": "2753:18:3",
                    "nodeType": "VariableDeclaration",
                    "scope": 348,
                    "src": "2745:26:3",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 346,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "2745:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "name": "Bet",
                "nameLocation": "2320:3:3",
                "nodeType": "StructDefinition",
                "scope": 1140,
                "src": "2313:726:3",
                "visibility": "public"
              },
              {
                "body": {
                  "id": 362,
                  "nodeType": "Block",
                  "src": "3101:29:3",
                  "statements": [
                    {
                      "expression": {
                        "id": 360,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 358,
                          "name": "s_fee",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 297,
                          "src": "3111:5:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 359,
                          "name": "fee_",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 350,
                          "src": "3119:4:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "3111:12:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 361,
                      "nodeType": "ExpressionStatement",
                      "src": "3111:12:3"
                    }
                  ]
                },
                "id": 363,
                "implemented": true,
                "kind": "constructor",
                "modifiers": [
                  {
                    "arguments": [
                      {
                        "id": 355,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 352,
                        "src": "3094:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "id": 356,
                    "kind": "baseConstructorSpecifier",
                    "modifierName": {
                      "id": 354,
                      "name": "Ownable",
                      "nameLocations": [
                        "3086:7:3"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 193,
                      "src": "3086:7:3"
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "3086:14:3"
                  }
                ],
                "name": "",
                "nameLocation": "-1:-1:-1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 353,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 350,
                      "mutability": "mutable",
                      "name": "fee_",
                      "nameLocation": "3065:4:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 363,
                      "src": "3057:12:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 349,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3057:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 352,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "3079:5:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 363,
                      "src": "3071:13:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 351,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3071:7:3",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3056:29:3"
                },
                "returnParameters": {
                  "id": 357,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "3101:0:3"
                },
                "scope": 1140,
                "src": "3045:85:3",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 398,
                  "nodeType": "Block",
                  "src": "3168:295:3",
                  "statements": [
                    {
                      "assignments": [
                        367,
                        null
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 367,
                          "mutability": "mutable",
                          "name": "succ",
                          "nameLocation": "3184:4:3",
                          "nodeType": "VariableDeclaration",
                          "scope": 398,
                          "src": "3179:9:3",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "typeName": {
                            "id": 366,
                            "name": "bool",
                            "nodeType": "ElementaryTypeName",
                            "src": "3179:4:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "visibility": "internal"
                        },
                        null
                      ],
                      "id": 378,
                      "initialValue": {
                        "arguments": [
                          {
                            "hexValue": "",
                            "id": 376,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3238:2:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                              "typeString": "literal_string \"\""
                            },
                            "value": ""
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                              "typeString": "literal_string \"\""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "id": 370,
                                    "name": "owner",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 113,
                                    "src": "3202:5:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                      "typeString": "function () view returns (address)"
                                    }
                                  },
                                  "id": 371,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "3202:7:3",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 369,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "3194:8:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_payable_$",
                                  "typeString": "type(address payable)"
                                },
                                "typeName": {
                                  "id": 368,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "3194:8:3",
                                  "stateMutability": "payable",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 372,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3194:16:3",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "id": 373,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3211:4:3",
                            "memberName": "call",
                            "nodeType": "MemberAccess",
                            "src": "3194:21:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 375,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "names": [
                            "value"
                          ],
                          "nodeType": "FunctionCallOptions",
                          "options": [
                            {
                              "id": 374,
                              "name": "feesCollected",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 299,
                              "src": "3223:13:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "src": "3194:43:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                            "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                          }
                        },
                        "id": 377,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3194:47:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                          "typeString": "tuple(bool,bytes memory)"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "3178:63:3"
                    },
                    {
                      "condition": {
                        "id": 380,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "3255:5:3",
                        "subExpression": {
                          "id": 379,
                          "name": "succ",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 367,
                          "src": "3256:4:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 385,
                      "nodeType": "IfStatement",
                      "src": "3251:71:3",
                      "trueBody": {
                        "id": 384,
                        "nodeType": "Block",
                        "src": "3262:60:3",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 381,
                                "name": "P2PBetting__TransferFailed",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 233,
                                "src": "3283:26:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                  "typeString": "function () pure"
                                }
                              },
                              "id": 382,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3283:28:3",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 383,
                            "nodeType": "RevertStatement",
                            "src": "3276:35:3"
                          }
                        ]
                      }
                    },
                    {
                      "assignments": [
                        387
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 387,
                          "mutability": "mutable",
                          "name": "feesCollectedNow",
                          "nameLocation": "3339:16:3",
                          "nodeType": "VariableDeclaration",
                          "scope": 398,
                          "src": "3331:24:3",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 386,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "3331:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 389,
                      "initialValue": {
                        "id": 388,
                        "name": "feesCollected",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 299,
                        "src": "3358:13:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "3331:40:3"
                    },
                    {
                      "expression": {
                        "id": 392,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 390,
                          "name": "feesCollected",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 299,
                          "src": "3381:13:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "hexValue": "30",
                          "id": 391,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3397:1:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "3381:17:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 393,
                      "nodeType": "ExpressionStatement",
                      "src": "3381:17:3"
                    },
                    {
                      "eventCall": {
                        "arguments": [
                          {
                            "id": 395,
                            "name": "feesCollectedNow",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 387,
                            "src": "3439:16:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 394,
                          "name": "P2PBetting__FeesCollected",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 277,
                          "src": "3413:25:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
                            "typeString": "function (uint256)"
                          }
                        },
                        "id": 396,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3413:43:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 397,
                      "nodeType": "EmitStatement",
                      "src": "3408:48:3"
                    }
                  ]
                },
                "functionSelector": "c8796572",
                "id": 399,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "collectFees",
                "nameLocation": "3145:11:3",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 364,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "3156:2:3"
                },
                "returnParameters": {
                  "id": 365,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "3168:0:3"
                },
                "scope": 1140,
                "src": "3136:327:3",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 545,
                  "nodeType": "Block",
                  "src": "3646:1406:3",
                  "statements": [
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 410,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 408,
                          "name": "odds_",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 403,
                          "src": "3660:5:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "hexValue": "31303030",
                          "id": 409,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3669:4:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1000_by_1",
                            "typeString": "int_const 1000"
                          },
                          "value": "1000"
                        },
                        "src": "3660:13:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 415,
                      "nodeType": "IfStatement",
                      "src": "3656:88:3",
                      "trueBody": {
                        "id": 414,
                        "nodeType": "Block",
                        "src": "3675:69:3",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 411,
                                "name": "P2PBetting__OddsMustBeHigherThanOne",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 239,
                                "src": "3696:35:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                  "typeString": "function () pure"
                                }
                              },
                              "id": 412,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3696:37:3",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 413,
                            "nodeType": "RevertStatement",
                            "src": "3689:44:3"
                          }
                        ]
                      }
                    },
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 418,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 416,
                          "name": "maxNumberOfChallengers_",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 401,
                          "src": "3757:23:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 417,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3784:1:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "3757:28:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 423,
                      "nodeType": "IfStatement",
                      "src": "3753:109:3",
                      "trueBody": {
                        "id": 422,
                        "nodeType": "Block",
                        "src": "3787:75:3",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 419,
                                "name": "P2PBetting__NumberOfChallengersCantBeZero",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 235,
                                "src": "3808:41:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                  "typeString": "function () pure"
                                }
                              },
                              "id": 420,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3808:43:3",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 421,
                            "nodeType": "RevertStatement",
                            "src": "3801:50:3"
                          }
                        ]
                      }
                    },
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 426,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 424,
                          "name": "maxEntryFee_",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 405,
                          "src": "3875:12:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 425,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3891:1:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "3875:17:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 431,
                      "nodeType": "IfStatement",
                      "src": "3871:87:3",
                      "trueBody": {
                        "id": 430,
                        "nodeType": "Block",
                        "src": "3894:64:3",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 427,
                                "name": "P2PBetting__MaxPriceCantBeZero",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 237,
                                "src": "3915:30:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                  "typeString": "function () pure"
                                }
                              },
                              "id": 428,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3915:32:3",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 429,
                            "nodeType": "RevertStatement",
                            "src": "3908:39:3"
                          }
                        ]
                      }
                    },
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 447,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 432,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "3984:3:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 433,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "3988:5:3",
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "3984:9:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "components": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 445,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 441,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 438,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 436,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 434,
                                          "name": "maxNumberOfChallengers_",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 401,
                                          "src": "4010:23:3",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "*",
                                        "rightExpression": {
                                          "id": 435,
                                          "name": "odds_",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 403,
                                          "src": "4036:5:3",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "4010:31:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "*",
                                      "rightExpression": {
                                        "id": 437,
                                        "name": "maxEntryFee_",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 405,
                                        "src": "4044:12:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "4010:46:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 439,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "4009:48:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "/",
                                "rightExpression": {
                                  "id": 440,
                                  "name": "DECIMALS",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 295,
                                  "src": "4076:8:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "4009:75:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 444,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 442,
                                  "name": "maxNumberOfChallengers_",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 401,
                                  "src": "4103:23:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "*",
                                "rightExpression": {
                                  "id": 443,
                                  "name": "maxEntryFee_",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 405,
                                  "src": "4145:12:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "4103:54:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "4009:148:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "id": 446,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "4008:150:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "3984:174:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 452,
                      "nodeType": "IfStatement",
                      "src": "3967:264:3",
                      "trueBody": {
                        "id": 451,
                        "nodeType": "Block",
                        "src": "4169:62:3",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 448,
                                "name": "P2PBetting__NotEnoughEthSent",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 241,
                                "src": "4190:28:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                  "typeString": "function () pure"
                                }
                              },
                              "id": 449,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4190:30:3",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 450,
                            "nodeType": "RevertStatement",
                            "src": "4183:37:3"
                          }
                        ]
                      }
                    },
                    {
                      "assignments": [
                        455
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 455,
                          "mutability": "mutable",
                          "name": "newBet",
                          "nameLocation": "4251:6:3",
                          "nodeType": "VariableDeclaration",
                          "scope": 545,
                          "src": "4240:17:3",
                          "stateVariable": false,
                          "storageLocation": "memory",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                            "typeString": "struct P2PBetting.Bet"
                          },
                          "typeName": {
                            "id": 454,
                            "nodeType": "UserDefinedTypeName",
                            "pathNode": {
                              "id": 453,
                              "name": "Bet",
                              "nameLocations": [
                                "4240:3:3"
                              ],
                              "nodeType": "IdentifierPath",
                              "referencedDeclaration": 348,
                              "src": "4240:3:3"
                            },
                            "referencedDeclaration": 348,
                            "src": "4240:3:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bet_$348_storage_ptr",
                              "typeString": "struct P2PBetting.Bet"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 456,
                      "nodeType": "VariableDeclarationStatement",
                      "src": "4240:17:3"
                    },
                    {
                      "expression": {
                        "id": 462,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "expression": {
                            "id": 457,
                            "name": "newBet",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 455,
                            "src": "4267:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                              "typeString": "struct P2PBetting.Bet memory"
                            }
                          },
                          "id": 459,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "memberLocation": "4274:7:3",
                          "memberName": "tipster",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 321,
                          "src": "4267:14:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "expression": {
                            "id": 460,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "4284:3:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 461,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "4288:6:3",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "4284:10:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "4267:27:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 463,
                      "nodeType": "ExpressionStatement",
                      "src": "4267:27:3"
                    },
                    {
                      "expression": {
                        "id": 468,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "expression": {
                            "id": 464,
                            "name": "newBet",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 455,
                            "src": "4305:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                              "typeString": "struct P2PBetting.Bet memory"
                            }
                          },
                          "id": 466,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "memberLocation": "4312:22:3",
                          "memberName": "maxNumberOfChallengers",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 327,
                          "src": "4305:29:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 467,
                          "name": "maxNumberOfChallengers_",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 401,
                          "src": "4337:23:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "4305:55:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 469,
                      "nodeType": "ExpressionStatement",
                      "src": "4305:55:3"
                    },
                    {
                      "expression": {
                        "id": 474,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "expression": {
                            "id": 470,
                            "name": "newBet",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 455,
                            "src": "4371:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                              "typeString": "struct P2PBetting.Bet memory"
                            }
                          },
                          "id": 472,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "memberLocation": "4378:4:3",
                          "memberName": "odds",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 335,
                          "src": "4371:11:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 473,
                          "name": "odds_",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 403,
                          "src": "4385:5:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "4371:19:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 475,
                      "nodeType": "ExpressionStatement",
                      "src": "4371:19:3"
                    },
                    {
                      "expression": {
                        "id": 480,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "expression": {
                            "id": 476,
                            "name": "newBet",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 455,
                            "src": "4400:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                              "typeString": "struct P2PBetting.Bet memory"
                            }
                          },
                          "id": 478,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "memberLocation": "4407:3:3",
                          "memberName": "fee",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 339,
                          "src": "4400:10:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 479,
                          "name": "s_fee",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 297,
                          "src": "4413:5:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "4400:18:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 481,
                      "nodeType": "ExpressionStatement",
                      "src": "4400:18:3"
                    },
                    {
                      "expression": {
                        "id": 486,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "expression": {
                            "id": 482,
                            "name": "newBet",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 455,
                            "src": "4429:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                              "typeString": "struct P2PBetting.Bet memory"
                            }
                          },
                          "id": 484,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "memberLocation": "4436:11:3",
                          "memberName": "maxEntryFee",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 337,
                          "src": "4429:18:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 485,
                          "name": "maxEntryFee_",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 405,
                          "src": "4450:12:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "4429:33:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 487,
                      "nodeType": "ExpressionStatement",
                      "src": "4429:33:3"
                    },
                    {
                      "expression": {
                        "id": 493,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "expression": {
                            "id": 488,
                            "name": "newBet",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 455,
                            "src": "4535:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                              "typeString": "struct P2PBetting.Bet memory"
                            }
                          },
                          "id": 490,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "memberLocation": "4542:10:3",
                          "memberName": "moneyInBet",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 325,
                          "src": "4535:17:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "expression": {
                            "id": 491,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "4555:3:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 492,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "4559:5:3",
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "4555:9:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "4535:29:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 494,
                      "nodeType": "ExpressionStatement",
                      "src": "4535:29:3"
                    },
                    {
                      "expression": {
                        "id": 500,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "expression": {
                            "id": 495,
                            "name": "newBet",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 455,
                            "src": "4574:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                              "typeString": "struct P2PBetting.Bet memory"
                            }
                          },
                          "id": 497,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "memberLocation": "4581:15:3",
                          "memberName": "collateralGiven",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 323,
                          "src": "4574:22:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "expression": {
                            "id": 498,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "4599:3:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 499,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "4603:5:3",
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "4599:9:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "4574:34:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 501,
                      "nodeType": "ExpressionStatement",
                      "src": "4574:34:3"
                    },
                    {
                      "expression": {
                        "id": 506,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "expression": {
                            "id": 502,
                            "name": "newBet",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 455,
                            "src": "4618:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                              "typeString": "struct P2PBetting.Bet memory"
                            }
                          },
                          "id": 504,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "memberLocation": "4625:5:3",
                          "memberName": "betId",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 319,
                          "src": "4618:12:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 505,
                          "name": "numberOfBetsDone",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 301,
                          "src": "4633:16:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "4618:31:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 507,
                      "nodeType": "ExpressionStatement",
                      "src": "4618:31:3"
                    },
                    {
                      "expression": {
                        "id": 512,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 508,
                            "name": "s_Bets",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 311,
                            "src": "4659:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Bet_$348_storage_$",
                              "typeString": "mapping(uint256 => struct P2PBetting.Bet storage ref)"
                            }
                          },
                          "id": 510,
                          "indexExpression": {
                            "id": 509,
                            "name": "numberOfBetsDone",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 301,
                            "src": "4666:16:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "4659:24:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Bet_$348_storage",
                            "typeString": "struct P2PBetting.Bet storage ref"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 511,
                          "name": "newBet",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 455,
                          "src": "4686:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                            "typeString": "struct P2PBetting.Bet memory"
                          }
                        },
                        "src": "4659:33:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bet_$348_storage",
                          "typeString": "struct P2PBetting.Bet storage ref"
                        }
                      },
                      "id": 513,
                      "nodeType": "ExpressionStatement",
                      "src": "4659:33:3"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 520,
                            "name": "numberOfBetsDone",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 301,
                            "src": "4743:16:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "expression": {
                              "baseExpression": {
                                "id": 514,
                                "name": "s_Profiles",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 306,
                                "src": "4702:10:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Profile_$317_storage_$",
                                  "typeString": "mapping(address => struct P2PBetting.Profile storage ref)"
                                }
                              },
                              "id": 517,
                              "indexExpression": {
                                "expression": {
                                  "id": 515,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "4713:3:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 516,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "4717:6:3",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "4713:10:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4702:22:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Profile_$317_storage",
                                "typeString": "struct P2PBetting.Profile storage ref"
                              }
                            },
                            "id": 518,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "4725:12:3",
                            "memberName": "betIdHistory",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 316,
                            "src": "4702:35:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                              "typeString": "uint256[] storage ref"
                            }
                          },
                          "id": 519,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "4738:4:3",
                          "memberName": "push",
                          "nodeType": "MemberAccess",
                          "src": "4702:40:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$",
                            "typeString": "function (uint256[] storage pointer,uint256)"
                          }
                        },
                        "id": 521,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4702:58:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 522,
                      "nodeType": "ExpressionStatement",
                      "src": "4702:58:3"
                    },
                    {
                      "expression": {
                        "id": 533,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "expression": {
                            "baseExpression": {
                              "id": 523,
                              "name": "s_Profiles",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 306,
                              "src": "4770:10:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Profile_$317_storage_$",
                                "typeString": "mapping(address => struct P2PBetting.Profile storage ref)"
                              }
                            },
                            "id": 526,
                            "indexExpression": {
                              "expression": {
                                "id": 524,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "4781:3:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 525,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "4785:6:3",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "4781:10:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "4770:22:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Profile_$317_storage",
                              "typeString": "struct P2PBetting.Profile storage ref"
                            }
                          },
                          "id": 527,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "memberLocation": "4793:16:3",
                          "memberName": "balanceVariation",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 313,
                          "src": "4770:39:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "-=",
                        "rightHandSide": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 530,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "4820:3:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 531,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "4824:5:3",
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "src": "4820:9:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 529,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "4813:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_int256_$",
                              "typeString": "type(int256)"
                            },
                            "typeName": {
                              "id": 528,
                              "name": "int256",
                              "nodeType": "ElementaryTypeName",
                              "src": "4813:6:3",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 532,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4813:17:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "src": "4770:60:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      },
                      "id": 534,
                      "nodeType": "ExpressionStatement",
                      "src": "4770:60:3"
                    },
                    {
                      "expression": {
                        "id": 536,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "++",
                        "prefix": false,
                        "src": "4840:18:3",
                        "subExpression": {
                          "id": 535,
                          "name": "numberOfBetsDone",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 301,
                          "src": "4840:16:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 537,
                      "nodeType": "ExpressionStatement",
                      "src": "4840:18:3"
                    },
                    {
                      "eventCall": {
                        "arguments": [
                          {
                            "id": 539,
                            "name": "maxEntryFee_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 405,
                            "src": "4910:12:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 540,
                            "name": "odds_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 403,
                            "src": "4936:5:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 541,
                            "name": "maxNumberOfChallengers_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 401,
                            "src": "4955:23:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "hexValue": "4171756920656c20737472696e67206465206c6f73206461746f73206465206c612061707565737461",
                            "id": 542,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4992:43:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_41d7b2bdf4d1449ab392a3c5aca6fd5317d944ad07f9e4349b84e050d53a5c46",
                              "typeString": "literal_string \"Aqui el string de los datos de la apuesta\""
                            },
                            "value": "Aqui el string de los datos de la apuesta"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_41d7b2bdf4d1449ab392a3c5aca6fd5317d944ad07f9e4349b84e050d53a5c46",
                              "typeString": "literal_string \"Aqui el string de los datos de la apuesta\""
                            }
                          ],
                          "id": 538,
                          "name": "P2PBetting__BetCreated",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 273,
                          "src": "4874:22:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (uint256,uint256,uint256,string memory)"
                          }
                        },
                        "id": 543,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4874:171:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 544,
                      "nodeType": "EmitStatement",
                      "src": "4869:176:3"
                    }
                  ]
                },
                "functionSelector": "9062ce7d",
                "id": 546,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "createBet",
                "nameLocation": "3478:9:3",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 406,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 401,
                      "mutability": "mutable",
                      "name": "maxNumberOfChallengers_",
                      "nameLocation": "3505:23:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 546,
                      "src": "3497:31:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 400,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3497:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 403,
                      "mutability": "mutable",
                      "name": "odds_",
                      "nameLocation": "3546:5:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 546,
                      "src": "3538:13:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 402,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3538:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 405,
                      "mutability": "mutable",
                      "name": "maxEntryFee_",
                      "nameLocation": "3569:12:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 546,
                      "src": "3561:20:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 404,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3561:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3487:141:3"
                },
                "returnParameters": {
                  "id": 407,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "3646:0:3"
                },
                "scope": 1140,
                "src": "3469:1583:3",
                "stateMutability": "payable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 642,
                  "nodeType": "Block",
                  "src": "5108:802:3",
                  "statements": [
                    {
                      "assignments": [
                        553
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 553,
                          "mutability": "mutable",
                          "name": "betSelected",
                          "nameLocation": "5129:11:3",
                          "nodeType": "VariableDeclaration",
                          "scope": 642,
                          "src": "5118:22:3",
                          "stateVariable": false,
                          "storageLocation": "memory",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                            "typeString": "struct P2PBetting.Bet"
                          },
                          "typeName": {
                            "id": 552,
                            "nodeType": "UserDefinedTypeName",
                            "pathNode": {
                              "id": 551,
                              "name": "Bet",
                              "nameLocations": [
                                "5118:3:3"
                              ],
                              "nodeType": "IdentifierPath",
                              "referencedDeclaration": 348,
                              "src": "5118:3:3"
                            },
                            "referencedDeclaration": 348,
                            "src": "5118:3:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bet_$348_storage_ptr",
                              "typeString": "struct P2PBetting.Bet"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 557,
                      "initialValue": {
                        "baseExpression": {
                          "id": 554,
                          "name": "s_Bets",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 311,
                          "src": "5143:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Bet_$348_storage_$",
                            "typeString": "mapping(uint256 => struct P2PBetting.Bet storage ref)"
                          }
                        },
                        "id": 556,
                        "indexExpression": {
                          "id": 555,
                          "name": "betId_",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 548,
                          "src": "5150:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "5143:14:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bet_$348_storage",
                          "typeString": "struct P2PBetting.Bet storage ref"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "5118:39:3"
                    },
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 563,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 558,
                            "name": "betSelected",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 553,
                            "src": "5184:11:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                              "typeString": "struct P2PBetting.Bet memory"
                            }
                          },
                          "id": 559,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "5196:22:3",
                          "memberName": "maxNumberOfChallengers",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 327,
                          "src": "5184:34:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "expression": {
                            "expression": {
                              "id": 560,
                              "name": "betSelected",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 553,
                              "src": "5222:11:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                                "typeString": "struct P2PBetting.Bet memory"
                              }
                            },
                            "id": 561,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "5234:11:3",
                            "memberName": "challengers",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 330,
                            "src": "5222:23:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                              "typeString": "address[] memory"
                            }
                          },
                          "id": 562,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "5246:6:3",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "5222:30:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5184:68:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 568,
                      "nodeType": "IfStatement",
                      "src": "5167:164:3",
                      "trueBody": {
                        "id": 567,
                        "nodeType": "Block",
                        "src": "5263:68:3",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 564,
                                "name": "P2PBetting__BetIsFullOrNonexistent",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 245,
                                "src": "5284:34:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                  "typeString": "function () pure"
                                }
                              },
                              "id": 565,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5284:36:3",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 566,
                            "nodeType": "RevertStatement",
                            "src": "5277:43:3"
                          }
                        ]
                      }
                    },
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 573,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 569,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "5344:3:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 570,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "5348:5:3",
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "5344:9:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "expression": {
                            "id": 571,
                            "name": "betSelected",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 553,
                            "src": "5356:11:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                              "typeString": "struct P2PBetting.Bet memory"
                            }
                          },
                          "id": 572,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "5368:11:3",
                          "memberName": "maxEntryFee",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 337,
                          "src": "5356:23:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5344:35:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 578,
                      "nodeType": "IfStatement",
                      "src": "5340:101:3",
                      "trueBody": {
                        "id": 577,
                        "nodeType": "Block",
                        "src": "5381:60:3",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 574,
                                "name": "P2PBetting__TooMuchEthSent",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 243,
                                "src": "5402:26:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                  "typeString": "function () pure"
                                }
                              },
                              "id": 575,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5402:28:3",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 576,
                            "nodeType": "RevertStatement",
                            "src": "5395:35:3"
                          }
                        ]
                      }
                    },
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 583,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 579,
                            "name": "betSelected",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 553,
                            "src": "5455:11:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                              "typeString": "struct P2PBetting.Bet memory"
                            }
                          },
                          "id": 580,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "5467:5:3",
                          "memberName": "ended",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 345,
                          "src": "5455:17:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "expression": {
                            "id": 581,
                            "name": "betSelected",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 553,
                            "src": "5476:11:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                              "typeString": "struct P2PBetting.Bet memory"
                            }
                          },
                          "id": 582,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "5488:6:3",
                          "memberName": "locked",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 343,
                          "src": "5476:18:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "5455:39:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 588,
                      "nodeType": "IfStatement",
                      "src": "5451:106:3",
                      "trueBody": {
                        "id": 587,
                        "nodeType": "Block",
                        "src": "5496:61:3",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 584,
                                "name": "P2PBetting__CantEnterBetNow",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 247,
                                "src": "5517:27:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                  "typeString": "function () pure"
                                }
                              },
                              "id": 585,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5517:29:3",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 586,
                            "nodeType": "RevertStatement",
                            "src": "5510:36:3"
                          }
                        ]
                      }
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "expression": {
                              "id": 594,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "5599:3:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 595,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "5603:6:3",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "5599:10:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "expression": {
                              "baseExpression": {
                                "id": 589,
                                "name": "s_Bets",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 311,
                                "src": "5567:6:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Bet_$348_storage_$",
                                  "typeString": "mapping(uint256 => struct P2PBetting.Bet storage ref)"
                                }
                              },
                              "id": 591,
                              "indexExpression": {
                                "id": 590,
                                "name": "betId_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 548,
                                "src": "5574:6:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "5567:14:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Bet_$348_storage",
                                "typeString": "struct P2PBetting.Bet storage ref"
                              }
                            },
                            "id": 592,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "5582:11:3",
                            "memberName": "challengers",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 330,
                            "src": "5567:26:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_storage",
                              "typeString": "address[] storage ref"
                            }
                          },
                          "id": 593,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "5594:4:3",
                          "memberName": "push",
                          "nodeType": "MemberAccess",
                          "src": "5567:31:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$",
                            "typeString": "function (address[] storage pointer,address)"
                          }
                        },
                        "id": 596,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5567:43:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 597,
                      "nodeType": "ExpressionStatement",
                      "src": "5567:43:3"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "expression": {
                              "id": 603,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "5660:3:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 604,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "5664:5:3",
                            "memberName": "value",
                            "nodeType": "MemberAccess",
                            "src": "5660:9:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "expression": {
                              "baseExpression": {
                                "id": 598,
                                "name": "s_Bets",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 311,
                                "src": "5620:6:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Bet_$348_storage_$",
                                  "typeString": "mapping(uint256 => struct P2PBetting.Bet storage ref)"
                                }
                              },
                              "id": 600,
                              "indexExpression": {
                                "id": 599,
                                "name": "betId_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 548,
                                "src": "5627:6:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "5620:14:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Bet_$348_storage",
                                "typeString": "struct P2PBetting.Bet storage ref"
                              }
                            },
                            "id": 601,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "5635:19:3",
                            "memberName": "challengersMoneyBet",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 333,
                            "src": "5620:34:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                              "typeString": "uint256[] storage ref"
                            }
                          },
                          "id": 602,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "5655:4:3",
                          "memberName": "push",
                          "nodeType": "MemberAccess",
                          "src": "5620:39:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$",
                            "typeString": "function (uint256[] storage pointer,uint256)"
                          }
                        },
                        "id": 605,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5620:50:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 606,
                      "nodeType": "ExpressionStatement",
                      "src": "5620:50:3"
                    },
                    {
                      "expression": {
                        "id": 613,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "expression": {
                            "baseExpression": {
                              "id": 607,
                              "name": "s_Bets",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 311,
                              "src": "5680:6:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Bet_$348_storage_$",
                                "typeString": "mapping(uint256 => struct P2PBetting.Bet storage ref)"
                              }
                            },
                            "id": 609,
                            "indexExpression": {
                              "id": 608,
                              "name": "betId_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 548,
                              "src": "5687:6:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "5680:14:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bet_$348_storage",
                              "typeString": "struct P2PBetting.Bet storage ref"
                            }
                          },
                          "id": 610,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "memberLocation": "5695:10:3",
                          "memberName": "moneyInBet",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 325,
                          "src": "5680:25:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "+=",
                        "rightHandSide": {
                          "expression": {
                            "id": 611,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "5709:3:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 612,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "5713:5:3",
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "5709:9:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5680:38:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 614,
                      "nodeType": "ExpressionStatement",
                      "src": "5680:38:3"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 621,
                            "name": "betId_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 548,
                            "src": "5769:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "expression": {
                              "baseExpression": {
                                "id": 615,
                                "name": "s_Profiles",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 306,
                                "src": "5728:10:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Profile_$317_storage_$",
                                  "typeString": "mapping(address => struct P2PBetting.Profile storage ref)"
                                }
                              },
                              "id": 618,
                              "indexExpression": {
                                "expression": {
                                  "id": 616,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "5739:3:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 617,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "5743:6:3",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "5739:10:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "5728:22:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Profile_$317_storage",
                                "typeString": "struct P2PBetting.Profile storage ref"
                              }
                            },
                            "id": 619,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "5751:12:3",
                            "memberName": "betIdHistory",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 316,
                            "src": "5728:35:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                              "typeString": "uint256[] storage ref"
                            }
                          },
                          "id": 620,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "5764:4:3",
                          "memberName": "push",
                          "nodeType": "MemberAccess",
                          "src": "5728:40:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$",
                            "typeString": "function (uint256[] storage pointer,uint256)"
                          }
                        },
                        "id": 622,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5728:48:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 623,
                      "nodeType": "ExpressionStatement",
                      "src": "5728:48:3"
                    },
                    {
                      "expression": {
                        "id": 634,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "expression": {
                            "baseExpression": {
                              "id": 624,
                              "name": "s_Profiles",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 306,
                              "src": "5786:10:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Profile_$317_storage_$",
                                "typeString": "mapping(address => struct P2PBetting.Profile storage ref)"
                              }
                            },
                            "id": 627,
                            "indexExpression": {
                              "expression": {
                                "id": 625,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "5797:3:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 626,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "5801:6:3",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "5797:10:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "5786:22:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Profile_$317_storage",
                              "typeString": "struct P2PBetting.Profile storage ref"
                            }
                          },
                          "id": 628,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "memberLocation": "5809:16:3",
                          "memberName": "balanceVariation",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 313,
                          "src": "5786:39:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "-=",
                        "rightHandSide": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 631,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "5836:3:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 632,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "5840:5:3",
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "src": "5836:9:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 630,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "5829:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_int256_$",
                              "typeString": "type(int256)"
                            },
                            "typeName": {
                              "id": 629,
                              "name": "int256",
                              "nodeType": "ElementaryTypeName",
                              "src": "5829:6:3",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 633,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5829:17:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "src": "5786:60:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      },
                      "id": 635,
                      "nodeType": "ExpressionStatement",
                      "src": "5786:60:3"
                    },
                    {
                      "eventCall": {
                        "arguments": [
                          {
                            "expression": {
                              "id": 637,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "5884:3:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 638,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "5888:6:3",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "5884:10:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 639,
                            "name": "betId_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 548,
                            "src": "5896:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 636,
                          "name": "P2PBetting__BetJoined",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 283,
                          "src": "5862:21:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,uint256)"
                          }
                        },
                        "id": 640,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5862:41:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 641,
                      "nodeType": "EmitStatement",
                      "src": "5857:46:3"
                    }
                  ]
                },
                "functionSelector": "39fb3f45",
                "id": 643,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "joinBet",
                "nameLocation": "5067:7:3",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 549,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 548,
                      "mutability": "mutable",
                      "name": "betId_",
                      "nameLocation": "5083:6:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 643,
                      "src": "5075:14:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 547,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5075:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "5074:16:3"
                },
                "returnParameters": {
                  "id": 550,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "5108:0:3"
                },
                "scope": 1140,
                "src": "5058:852:3",
                "stateMutability": "payable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 655,
                  "nodeType": "Block",
                  "src": "6193:45:3",
                  "statements": [
                    {
                      "expression": {
                        "id": 653,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "expression": {
                            "baseExpression": {
                              "id": 648,
                              "name": "s_Bets",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 311,
                              "src": "6203:6:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Bet_$348_storage_$",
                                "typeString": "mapping(uint256 => struct P2PBetting.Bet storage ref)"
                              }
                            },
                            "id": 650,
                            "indexExpression": {
                              "id": 649,
                              "name": "betId_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 645,
                              "src": "6210:6:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "6203:14:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bet_$348_storage",
                              "typeString": "struct P2PBetting.Bet storage ref"
                            }
                          },
                          "id": 651,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "memberLocation": "6218:6:3",
                          "memberName": "locked",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 343,
                          "src": "6203:21:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "hexValue": "74727565",
                          "id": 652,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6227:4:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "src": "6203:28:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 654,
                      "nodeType": "ExpressionStatement",
                      "src": "6203:28:3"
                    }
                  ]
                },
                "functionSelector": "940c154b",
                "id": 656,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "lockBet",
                "nameLocation": "6160:7:3",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 646,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 645,
                      "mutability": "mutable",
                      "name": "betId_",
                      "nameLocation": "6176:6:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 656,
                      "src": "6168:14:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 644,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6168:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "6167:16:3"
                },
                "returnParameters": {
                  "id": 647,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "6193:0:3"
                },
                "scope": 1140,
                "src": "6151:87:3",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 677,
                  "nodeType": "Block",
                  "src": "6300:134:3",
                  "statements": [
                    {
                      "expression": {
                        "id": 668,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "expression": {
                            "baseExpression": {
                              "id": 663,
                              "name": "s_Bets",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 311,
                              "src": "6352:6:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Bet_$348_storage_$",
                                "typeString": "mapping(uint256 => struct P2PBetting.Bet storage ref)"
                              }
                            },
                            "id": 665,
                            "indexExpression": {
                              "id": 664,
                              "name": "betId_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 658,
                              "src": "6359:6:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "6352:14:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bet_$348_storage",
                              "typeString": "struct P2PBetting.Bet storage ref"
                            }
                          },
                          "id": 666,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "memberLocation": "6367:10:3",
                          "memberName": "tipsterWon",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 341,
                          "src": "6352:25:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 667,
                          "name": "tipsterWon",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 660,
                          "src": "6380:10:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "6352:38:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 669,
                      "nodeType": "ExpressionStatement",
                      "src": "6352:38:3"
                    },
                    {
                      "expression": {
                        "id": 675,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "expression": {
                            "baseExpression": {
                              "id": 670,
                              "name": "s_Bets",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 311,
                              "src": "6400:6:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Bet_$348_storage_$",
                                "typeString": "mapping(uint256 => struct P2PBetting.Bet storage ref)"
                              }
                            },
                            "id": 672,
                            "indexExpression": {
                              "id": 671,
                              "name": "betId_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 658,
                              "src": "6407:6:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "6400:14:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bet_$348_storage",
                              "typeString": "struct P2PBetting.Bet storage ref"
                            }
                          },
                          "id": 673,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "memberLocation": "6415:5:3",
                          "memberName": "ended",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 345,
                          "src": "6400:20:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "hexValue": "74727565",
                          "id": 674,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6423:4:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "src": "6400:27:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 676,
                      "nodeType": "ExpressionStatement",
                      "src": "6400:27:3"
                    }
                  ]
                },
                "functionSelector": "4a1342cc",
                "id": 678,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "endBet",
                "nameLocation": "6253:6:3",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 661,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 658,
                      "mutability": "mutable",
                      "name": "betId_",
                      "nameLocation": "6268:6:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 678,
                      "src": "6260:14:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 657,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6260:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 660,
                      "mutability": "mutable",
                      "name": "tipsterWon",
                      "nameLocation": "6281:10:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 678,
                      "src": "6276:15:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 659,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "6276:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "6259:33:3"
                },
                "returnParameters": {
                  "id": 662,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "6300:0:3"
                },
                "scope": 1140,
                "src": "6244:190:3",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 893,
                  "nodeType": "Block",
                  "src": "6512:2092:3",
                  "statements": [
                    {
                      "assignments": [
                        687
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 687,
                          "mutability": "mutable",
                          "name": "betSelected",
                          "nameLocation": "6533:11:3",
                          "nodeType": "VariableDeclaration",
                          "scope": 893,
                          "src": "6522:22:3",
                          "stateVariable": false,
                          "storageLocation": "memory",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                            "typeString": "struct P2PBetting.Bet"
                          },
                          "typeName": {
                            "id": 686,
                            "nodeType": "UserDefinedTypeName",
                            "pathNode": {
                              "id": 685,
                              "name": "Bet",
                              "nameLocations": [
                                "6522:3:3"
                              ],
                              "nodeType": "IdentifierPath",
                              "referencedDeclaration": 348,
                              "src": "6522:3:3"
                            },
                            "referencedDeclaration": 348,
                            "src": "6522:3:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bet_$348_storage_ptr",
                              "typeString": "struct P2PBetting.Bet"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 691,
                      "initialValue": {
                        "baseExpression": {
                          "id": 688,
                          "name": "s_Bets",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 311,
                          "src": "6547:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Bet_$348_storage_$",
                            "typeString": "mapping(uint256 => struct P2PBetting.Bet storage ref)"
                          }
                        },
                        "id": 690,
                        "indexExpression": {
                          "id": 689,
                          "name": "betId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 680,
                          "src": "6554:5:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "6547:13:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bet_$348_storage",
                          "typeString": "struct P2PBetting.Bet storage ref"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "6522:38:3"
                    },
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 707,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 704,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 699,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 696,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 692,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "6588:3:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 693,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "6592:6:3",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "6588:10:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "expression": {
                                  "id": 694,
                                  "name": "betSelected",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 687,
                                  "src": "6602:11:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                                    "typeString": "struct P2PBetting.Bet memory"
                                  }
                                },
                                "id": 695,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "6614:7:3",
                                "memberName": "tipster",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 321,
                                "src": "6602:19:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "6588:33:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "&&",
                            "rightExpression": {
                              "expression": {
                                "id": 697,
                                "name": "betSelected",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 687,
                                "src": "6637:11:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                                  "typeString": "struct P2PBetting.Bet memory"
                                }
                              },
                              "id": 698,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "6649:10:3",
                              "memberName": "tipsterWon",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 341,
                              "src": "6637:22:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "6588:71:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&&",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 703,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 700,
                                "name": "betSelected",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 687,
                                "src": "6675:11:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                                  "typeString": "struct P2PBetting.Bet memory"
                                }
                              },
                              "id": 701,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "6687:10:3",
                              "memberName": "moneyInBet",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 325,
                              "src": "6675:22:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 702,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "6701:1:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "6675:27:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "6588:114:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "expression": {
                            "id": 705,
                            "name": "betSelected",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 687,
                            "src": "6718:11:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                              "typeString": "struct P2PBetting.Bet memory"
                            }
                          },
                          "id": 706,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "6730:5:3",
                          "memberName": "ended",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 345,
                          "src": "6718:17:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "6588:147:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 803,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 799,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 796,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "id": 789,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 781,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 777,
                                    "name": "numberOfChallenger",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 682,
                                    "src": "7430:18:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "<",
                                  "rightExpression": {
                                    "expression": {
                                      "expression": {
                                        "id": 778,
                                        "name": "betSelected",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 687,
                                        "src": "7451:11:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                                          "typeString": "struct P2PBetting.Bet memory"
                                        }
                                      },
                                      "id": 779,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "7463:11:3",
                                      "memberName": "challengers",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 330,
                                      "src": "7451:23:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                        "typeString": "address[] memory"
                                      }
                                    },
                                    "id": 780,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "7475:6:3",
                                    "memberName": "length",
                                    "nodeType": "MemberAccess",
                                    "src": "7451:30:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "7430:51:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "&&",
                                "rightExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  "id": 788,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "expression": {
                                      "id": 782,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -15,
                                      "src": "7497:3:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 783,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "7501:6:3",
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "7497:10:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "==",
                                  "rightExpression": {
                                    "baseExpression": {
                                      "expression": {
                                        "id": 784,
                                        "name": "betSelected",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 687,
                                        "src": "7511:11:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                                          "typeString": "struct P2PBetting.Bet memory"
                                        }
                                      },
                                      "id": 785,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "7523:11:3",
                                      "memberName": "challengers",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 330,
                                      "src": "7511:23:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                        "typeString": "address[] memory"
                                      }
                                    },
                                    "id": 787,
                                    "indexExpression": {
                                      "id": 786,
                                      "name": "numberOfChallenger",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 682,
                                      "src": "7535:18:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "7511:43:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "src": "7497:57:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "src": "7430:124:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "&&",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 795,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "baseExpression": {
                                    "expression": {
                                      "id": 790,
                                      "name": "betSelected",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 687,
                                      "src": "7570:11:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                                        "typeString": "struct P2PBetting.Bet memory"
                                      }
                                    },
                                    "id": 791,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "7582:19:3",
                                    "memberName": "challengersMoneyBet",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 333,
                                    "src": "7570:31:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                      "typeString": "uint256[] memory"
                                    }
                                  },
                                  "id": 793,
                                  "indexExpression": {
                                    "id": 792,
                                    "name": "numberOfChallenger",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 682,
                                    "src": "7602:18:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "7570:51:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "!=",
                                "rightExpression": {
                                  "hexValue": "30",
                                  "id": 794,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7625:1:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "7570:56:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "7430:196:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "&&",
                            "rightExpression": {
                              "expression": {
                                "id": 797,
                                "name": "betSelected",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 687,
                                "src": "7642:11:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                                  "typeString": "struct P2PBetting.Bet memory"
                                }
                              },
                              "id": 798,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "7654:5:3",
                              "memberName": "ended",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 345,
                              "src": "7642:17:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "7430:229:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&&",
                          "rightExpression": {
                            "id": 802,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "!",
                            "prefix": true,
                            "src": "7675:23:3",
                            "subExpression": {
                              "expression": {
                                "id": 800,
                                "name": "betSelected",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 687,
                                "src": "7676:11:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                                  "typeString": "struct P2PBetting.Bet memory"
                                }
                              },
                              "id": 801,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "7688:10:3",
                              "memberName": "tipsterWon",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 341,
                              "src": "7676:22:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "7430:268:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 890,
                          "nodeType": "Block",
                          "src": "8520:78:3",
                          "statements": [
                            {
                              "errorCall": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 887,
                                  "name": "P2PBetting__AlreadyRetrievedOrBetNonexistent",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 251,
                                  "src": "8541:44:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                    "typeString": "function () pure"
                                  }
                                },
                                "id": 888,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "8541:46:3",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 889,
                              "nodeType": "RevertStatement",
                              "src": "8534:53:3"
                            }
                          ]
                        },
                        "id": 891,
                        "nodeType": "IfStatement",
                        "src": "7413:1185:3",
                        "trueBody": {
                          "id": 886,
                          "nodeType": "Block",
                          "src": "7709:805:3",
                          "statements": [
                            {
                              "assignments": [
                                805
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 805,
                                  "mutability": "mutable",
                                  "name": "amountWon",
                                  "nameLocation": "7731:9:3",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 886,
                                  "src": "7723:17:3",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 804,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "7723:7:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 816,
                              "initialValue": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 815,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 812,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "expression": {
                                          "id": 806,
                                          "name": "betSelected",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 687,
                                          "src": "7744:11:3",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                                            "typeString": "struct P2PBetting.Bet memory"
                                          }
                                        },
                                        "id": 807,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberLocation": "7756:4:3",
                                        "memberName": "odds",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 335,
                                        "src": "7744:16:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "*",
                                      "rightExpression": {
                                        "baseExpression": {
                                          "expression": {
                                            "id": 808,
                                            "name": "betSelected",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 687,
                                            "src": "7779:11:3",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                                              "typeString": "struct P2PBetting.Bet memory"
                                            }
                                          },
                                          "id": 809,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberLocation": "7791:19:3",
                                          "memberName": "challengersMoneyBet",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 333,
                                          "src": "7779:31:3",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                            "typeString": "uint256[] memory"
                                          }
                                        },
                                        "id": 811,
                                        "indexExpression": {
                                          "id": 810,
                                          "name": "numberOfChallenger",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 682,
                                          "src": "7811:18:3",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "7779:51:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "7744:86:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 813,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "7743:88:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "/",
                                "rightExpression": {
                                  "id": 814,
                                  "name": "DECIMALS",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 295,
                                  "src": "7834:8:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "7743:99:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "7723:119:3"
                            },
                            {
                              "expression": {
                                "id": 826,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "expression": {
                                    "baseExpression": {
                                      "id": 817,
                                      "name": "s_Profiles",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 306,
                                      "src": "7856:10:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Profile_$317_storage_$",
                                        "typeString": "mapping(address => struct P2PBetting.Profile storage ref)"
                                      }
                                    },
                                    "id": 820,
                                    "indexExpression": {
                                      "expression": {
                                        "id": 818,
                                        "name": "msg",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -15,
                                        "src": "7867:3:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_message",
                                          "typeString": "msg"
                                        }
                                      },
                                      "id": 819,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "7871:6:3",
                                      "memberName": "sender",
                                      "nodeType": "MemberAccess",
                                      "src": "7867:10:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "7856:22:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Profile_$317_storage",
                                      "typeString": "struct P2PBetting.Profile storage ref"
                                    }
                                  },
                                  "id": 821,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberLocation": "7879:16:3",
                                  "memberName": "balanceVariation",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 313,
                                  "src": "7856:39:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_int256",
                                    "typeString": "int256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "+=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "id": 824,
                                      "name": "amountWon",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 805,
                                      "src": "7906:9:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 823,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "7899:6:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_int256_$",
                                      "typeString": "type(int256)"
                                    },
                                    "typeName": {
                                      "id": 822,
                                      "name": "int256",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "7899:6:3",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 825,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "7899:17:3",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_int256",
                                    "typeString": "int256"
                                  }
                                },
                                "src": "7856:60:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_int256",
                                  "typeString": "int256"
                                }
                              },
                              "id": 827,
                              "nodeType": "ExpressionStatement",
                              "src": "7856:60:3"
                            },
                            {
                              "assignments": [
                                829
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 829,
                                  "mutability": "mutable",
                                  "name": "feeFromThisBet",
                                  "nameLocation": "7938:14:3",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 886,
                                  "src": "7930:22:3",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 828,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "7930:7:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 840,
                              "initialValue": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 839,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 833,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 830,
                                        "name": "amountWon",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 805,
                                        "src": "7956:9:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "*",
                                      "rightExpression": {
                                        "expression": {
                                          "id": 831,
                                          "name": "betSelected",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 687,
                                          "src": "7968:11:3",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                                            "typeString": "struct P2PBetting.Bet memory"
                                          }
                                        },
                                        "id": 832,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberLocation": "7980:3:3",
                                        "memberName": "fee",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 339,
                                        "src": "7968:15:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "7956:27:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 834,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "7955:29:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "/",
                                "rightExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 837,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "hexValue": "313030",
                                        "id": 835,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "8004:3:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_100_by_1",
                                          "typeString": "int_const 100"
                                        },
                                        "value": "100"
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "*",
                                      "rightExpression": {
                                        "id": 836,
                                        "name": "DECIMALS",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 295,
                                        "src": "8010:8:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "8004:14:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 838,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "8003:16:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "7955:64:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "7930:89:3"
                            },
                            {
                              "assignments": [
                                842
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 842,
                                  "mutability": "mutable",
                                  "name": "moneyToTransfer",
                                  "nameLocation": "8066:15:3",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 886,
                                  "src": "8058:23:3",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 841,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "8058:7:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 846,
                              "initialValue": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 845,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 843,
                                  "name": "amountWon",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 805,
                                  "src": "8084:9:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "id": 844,
                                  "name": "feeFromThisBet",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 829,
                                  "src": "8096:14:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "8084:26:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "8058:52:3"
                            },
                            {
                              "expression": {
                                "id": 854,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "expression": {
                                      "baseExpression": {
                                        "id": 847,
                                        "name": "s_Bets",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 311,
                                        "src": "8124:6:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Bet_$348_storage_$",
                                          "typeString": "mapping(uint256 => struct P2PBetting.Bet storage ref)"
                                        }
                                      },
                                      "id": 849,
                                      "indexExpression": {
                                        "id": 848,
                                        "name": "betId",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 680,
                                        "src": "8131:5:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "8124:13:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Bet_$348_storage",
                                        "typeString": "struct P2PBetting.Bet storage ref"
                                      }
                                    },
                                    "id": 850,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "8138:19:3",
                                    "memberName": "challengersMoneyBet",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 333,
                                    "src": "8124:33:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                                      "typeString": "uint256[] storage ref"
                                    }
                                  },
                                  "id": 852,
                                  "indexExpression": {
                                    "id": 851,
                                    "name": "numberOfChallenger",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 682,
                                    "src": "8158:18:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "8124:53:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "hexValue": "30",
                                  "id": 853,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "8180:1:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "8124:57:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 855,
                              "nodeType": "ExpressionStatement",
                              "src": "8124:57:3"
                            },
                            {
                              "expression": {
                                "id": 858,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 856,
                                  "name": "feesCollected",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 299,
                                  "src": "8195:13:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "+=",
                                "rightHandSide": {
                                  "id": 857,
                                  "name": "feeFromThisBet",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 829,
                                  "src": "8212:14:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "8195:31:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 859,
                              "nodeType": "ExpressionStatement",
                              "src": "8195:31:3"
                            },
                            {
                              "assignments": [
                                861,
                                null
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 861,
                                  "mutability": "mutable",
                                  "name": "succ",
                                  "nameLocation": "8246:4:3",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 886,
                                  "src": "8241:9:3",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "typeName": {
                                    "id": 860,
                                    "name": "bool",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "8241:4:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "visibility": "internal"
                                },
                                null
                              ],
                              "id": 872,
                              "initialValue": {
                                "arguments": [
                                  {
                                    "hexValue": "",
                                    "id": 870,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "8322:2:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                      "typeString": "literal_string \"\""
                                    },
                                    "value": ""
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                      "typeString": "literal_string \"\""
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                        "typeString": "literal_string \"\""
                                      }
                                    ],
                                    "expression": {
                                      "arguments": [
                                        {
                                          "expression": {
                                            "id": 864,
                                            "name": "msg",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": -15,
                                            "src": "8264:3:3",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_magic_message",
                                              "typeString": "msg"
                                            }
                                          },
                                          "id": 865,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberLocation": "8268:6:3",
                                          "memberName": "sender",
                                          "nodeType": "MemberAccess",
                                          "src": "8264:10:3",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        ],
                                        "id": 863,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "8256:8:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_address_payable_$",
                                          "typeString": "type(address payable)"
                                        },
                                        "typeName": {
                                          "id": 862,
                                          "name": "address",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "8256:8:3",
                                          "stateMutability": "payable",
                                          "typeDescriptions": {}
                                        }
                                      },
                                      "id": 866,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "8256:19:3",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address_payable",
                                        "typeString": "address payable"
                                      }
                                    },
                                    "id": 867,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "8276:4:3",
                                    "memberName": "call",
                                    "nodeType": "MemberAccess",
                                    "src": "8256:24:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                      "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                                    }
                                  },
                                  "id": 869,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "names": [
                                    "value"
                                  ],
                                  "nodeType": "FunctionCallOptions",
                                  "options": [
                                    {
                                      "id": 868,
                                      "name": "moneyToTransfer",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 842,
                                      "src": "8288:15:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "src": "8256:48:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                                    "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                                  }
                                },
                                "id": 871,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "8256:82:3",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                                  "typeString": "tuple(bool,bytes memory)"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "8240:98:3"
                            },
                            {
                              "condition": {
                                "id": 874,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "!",
                                "prefix": true,
                                "src": "8356:5:3",
                                "subExpression": {
                                  "id": 873,
                                  "name": "succ",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 861,
                                  "src": "8357:4:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 879,
                              "nodeType": "IfStatement",
                              "src": "8352:79:3",
                              "trueBody": {
                                "id": 878,
                                "nodeType": "Block",
                                "src": "8363:68:3",
                                "statements": [
                                  {
                                    "errorCall": {
                                      "arguments": [],
                                      "expression": {
                                        "argumentTypes": [],
                                        "id": 875,
                                        "name": "P2PBetting__TransferFailed",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 233,
                                        "src": "8388:26:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                          "typeString": "function () pure"
                                        }
                                      },
                                      "id": 876,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "8388:28:3",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 877,
                                    "nodeType": "RevertStatement",
                                    "src": "8381:35:3"
                                  }
                                ]
                              }
                            },
                            {
                              "eventCall": {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 881,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -15,
                                      "src": "8475:3:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 882,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "8479:6:3",
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "8475:10:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 883,
                                    "name": "moneyToTransfer",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 842,
                                    "src": "8487:15:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 880,
                                  "name": "P2PBetting__RewardClaimed",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 289,
                                  "src": "8449:25:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                                    "typeString": "function (address,uint256)"
                                  }
                                },
                                "id": 884,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "8449:54:3",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 885,
                              "nodeType": "EmitStatement",
                              "src": "8444:59:3"
                            }
                          ]
                        }
                      },
                      "id": 892,
                      "nodeType": "IfStatement",
                      "src": "6571:2027:3",
                      "trueBody": {
                        "id": 776,
                        "nodeType": "Block",
                        "src": "6746:661:3",
                        "statements": [
                          {
                            "expression": {
                              "id": 718,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "expression": {
                                  "baseExpression": {
                                    "id": 708,
                                    "name": "s_Profiles",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 306,
                                    "src": "6760:10:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Profile_$317_storage_$",
                                      "typeString": "mapping(address => struct P2PBetting.Profile storage ref)"
                                    }
                                  },
                                  "id": 711,
                                  "indexExpression": {
                                    "expression": {
                                      "id": 709,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -15,
                                      "src": "6771:3:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 710,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "6775:6:3",
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "6771:10:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "6760:22:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Profile_$317_storage",
                                    "typeString": "struct P2PBetting.Profile storage ref"
                                  }
                                },
                                "id": 712,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "memberLocation": "6783:16:3",
                                "memberName": "balanceVariation",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 313,
                                "src": "6760:39:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_int256",
                                  "typeString": "int256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "+=",
                              "rightHandSide": {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 715,
                                      "name": "betSelected",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 687,
                                      "src": "6827:11:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                                        "typeString": "struct P2PBetting.Bet memory"
                                      }
                                    },
                                    "id": 716,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "6839:10:3",
                                    "memberName": "moneyInBet",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 325,
                                    "src": "6827:22:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 714,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "6803:6:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_int256_$",
                                    "typeString": "type(int256)"
                                  },
                                  "typeName": {
                                    "id": 713,
                                    "name": "int256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "6803:6:3",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 717,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "6803:60:3",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_int256",
                                  "typeString": "int256"
                                }
                              },
                              "src": "6760:103:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_int256",
                                "typeString": "int256"
                              }
                            },
                            "id": 719,
                            "nodeType": "ExpressionStatement",
                            "src": "6760:103:3"
                          },
                          {
                            "assignments": [
                              721
                            ],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 721,
                                "mutability": "mutable",
                                "name": "feeFromThisBet",
                                "nameLocation": "6885:14:3",
                                "nodeType": "VariableDeclaration",
                                "scope": 776,
                                "src": "6877:22:3",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 720,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "6877:7:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "visibility": "internal"
                              }
                            ],
                            "id": 742,
                            "initialValue": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 741,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "components": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 733,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 730,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "components": [
                                          {
                                            "commonType": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            },
                                            "id": 726,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "expression": {
                                                "id": 722,
                                                "name": "betSelected",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 687,
                                                "src": "6904:11:3",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                                                  "typeString": "struct P2PBetting.Bet memory"
                                                }
                                              },
                                              "id": 723,
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberLocation": "6916:10:3",
                                              "memberName": "moneyInBet",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 325,
                                              "src": "6904:22:3",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "-",
                                            "rightExpression": {
                                              "expression": {
                                                "id": 724,
                                                "name": "betSelected",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 687,
                                                "src": "6945:11:3",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                                                  "typeString": "struct P2PBetting.Bet memory"
                                                }
                                              },
                                              "id": 725,
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberLocation": "6957:15:3",
                                              "memberName": "collateralGiven",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 323,
                                              "src": "6945:27:3",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "src": "6904:68:3",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "id": 727,
                                        "isConstant": false,
                                        "isInlineArray": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "TupleExpression",
                                        "src": "6903:70:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "*",
                                      "rightExpression": {
                                        "expression": {
                                          "id": 728,
                                          "name": "betSelected",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 687,
                                          "src": "6992:11:3",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                                            "typeString": "struct P2PBetting.Bet memory"
                                          }
                                        },
                                        "id": 729,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberLocation": "7004:4:3",
                                        "memberName": "odds",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 335,
                                        "src": "6992:16:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "6903:105:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "*",
                                    "rightExpression": {
                                      "expression": {
                                        "id": 731,
                                        "name": "betSelected",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 687,
                                        "src": "7027:11:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                                          "typeString": "struct P2PBetting.Bet memory"
                                        }
                                      },
                                      "id": 732,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "7039:3:3",
                                      "memberName": "fee",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 339,
                                      "src": "7027:15:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "6903:139:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "id": 734,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "6902:141:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "/",
                              "rightExpression": {
                                "components": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 739,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 737,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "hexValue": "313030",
                                        "id": 735,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "7047:3:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_100_by_1",
                                          "typeString": "int_const 100"
                                        },
                                        "value": "100"
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "*",
                                      "rightExpression": {
                                        "id": 736,
                                        "name": "DECIMALS",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 295,
                                        "src": "7053:8:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "7047:14:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "*",
                                    "rightExpression": {
                                      "id": 738,
                                      "name": "DECIMALS",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 295,
                                      "src": "7064:8:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "7047:25:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "id": 740,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "7046:27:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "6902:171:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "6877:196:3"
                          },
                          {
                            "assignments": [
                              744
                            ],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 744,
                                "mutability": "mutable",
                                "name": "moneyToTransfer",
                                "nameLocation": "7120:15:3",
                                "nodeType": "VariableDeclaration",
                                "scope": 776,
                                "src": "7112:23:3",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 743,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "7112:7:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "visibility": "internal"
                              }
                            ],
                            "id": 749,
                            "initialValue": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 748,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 745,
                                  "name": "betSelected",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 687,
                                  "src": "7138:11:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                                    "typeString": "struct P2PBetting.Bet memory"
                                  }
                                },
                                "id": 746,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "7150:10:3",
                                "memberName": "moneyInBet",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 325,
                                "src": "7138:22:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "id": 747,
                                "name": "feeFromThisBet",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 721,
                                "src": "7163:14:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "7138:39:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "7112:65:3"
                          },
                          {
                            "expression": {
                              "id": 755,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "expression": {
                                  "baseExpression": {
                                    "id": 750,
                                    "name": "s_Bets",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 311,
                                    "src": "7191:6:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Bet_$348_storage_$",
                                      "typeString": "mapping(uint256 => struct P2PBetting.Bet storage ref)"
                                    }
                                  },
                                  "id": 752,
                                  "indexExpression": {
                                    "id": 751,
                                    "name": "betId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 680,
                                    "src": "7198:5:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "7191:13:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Bet_$348_storage",
                                    "typeString": "struct P2PBetting.Bet storage ref"
                                  }
                                },
                                "id": 753,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "memberLocation": "7205:10:3",
                                "memberName": "moneyInBet",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 325,
                                "src": "7191:24:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "hexValue": "30",
                                "id": 754,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "7218:1:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "7191:28:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 756,
                            "nodeType": "ExpressionStatement",
                            "src": "7191:28:3"
                          },
                          {
                            "expression": {
                              "id": 759,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "id": 757,
                                "name": "feesCollected",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 299,
                                "src": "7233:13:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "+=",
                              "rightHandSide": {
                                "id": 758,
                                "name": "feeFromThisBet",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 721,
                                "src": "7250:14:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "7233:31:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 760,
                            "nodeType": "ExpressionStatement",
                            "src": "7233:31:3"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "id": 767,
                                  "name": "moneyToTransfer",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 744,
                                  "src": "7307:15:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "arguments": [
                                    {
                                      "expression": {
                                        "id": 763,
                                        "name": "msg",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -15,
                                        "src": "7286:3:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_message",
                                          "typeString": "msg"
                                        }
                                      },
                                      "id": 764,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "7290:6:3",
                                      "memberName": "sender",
                                      "nodeType": "MemberAccess",
                                      "src": "7286:10:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "id": 762,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "7278:8:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_payable_$",
                                      "typeString": "type(address payable)"
                                    },
                                    "typeName": {
                                      "id": 761,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "7278:8:3",
                                      "stateMutability": "payable",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 765,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "7278:19:3",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                "id": 766,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "7298:8:3",
                                "memberName": "transfer",
                                "nodeType": "MemberAccess",
                                "src": "7278:28:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                                  "typeString": "function (uint256)"
                                }
                              },
                              "id": 768,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "7278:45:3",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 769,
                            "nodeType": "ExpressionStatement",
                            "src": "7278:45:3"
                          },
                          {
                            "eventCall": {
                              "arguments": [
                                {
                                  "expression": {
                                    "id": 771,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -15,
                                    "src": "7368:3:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 772,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "7372:6:3",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "7368:10:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 773,
                                  "name": "moneyToTransfer",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 744,
                                  "src": "7380:15:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 770,
                                "name": "P2PBetting__RewardClaimed",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 289,
                                "src": "7342:25:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                                  "typeString": "function (address,uint256)"
                                }
                              },
                              "id": 774,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "7342:54:3",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 775,
                            "nodeType": "EmitStatement",
                            "src": "7337:59:3"
                          }
                        ]
                      }
                    }
                  ]
                },
                "functionSelector": "cc11298e",
                "id": 894,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "getRewards",
                "nameLocation": "6449:10:3",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 683,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 680,
                      "mutability": "mutable",
                      "name": "betId",
                      "nameLocation": "6468:5:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 894,
                      "src": "6460:13:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 679,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6460:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 682,
                      "mutability": "mutable",
                      "name": "numberOfChallenger",
                      "nameLocation": "6483:18:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 894,
                      "src": "6475:26:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 681,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6475:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "6459:43:3"
                },
                "returnParameters": {
                  "id": 684,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "6512:0:3"
                },
                "scope": 1140,
                "src": "6440:2164:3",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 961,
                  "nodeType": "Block",
                  "src": "8662:573:3",
                  "statements": [
                    {
                      "assignments": [
                        901
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 901,
                          "mutability": "mutable",
                          "name": "betSelected",
                          "nameLocation": "8683:11:3",
                          "nodeType": "VariableDeclaration",
                          "scope": 961,
                          "src": "8672:22:3",
                          "stateVariable": false,
                          "storageLocation": "memory",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                            "typeString": "struct P2PBetting.Bet"
                          },
                          "typeName": {
                            "id": 900,
                            "nodeType": "UserDefinedTypeName",
                            "pathNode": {
                              "id": 899,
                              "name": "Bet",
                              "nameLocations": [
                                "8672:3:3"
                              ],
                              "nodeType": "IdentifierPath",
                              "referencedDeclaration": 348,
                              "src": "8672:3:3"
                            },
                            "referencedDeclaration": 348,
                            "src": "8672:3:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bet_$348_storage_ptr",
                              "typeString": "struct P2PBetting.Bet"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 905,
                      "initialValue": {
                        "baseExpression": {
                          "id": 902,
                          "name": "s_Bets",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 311,
                          "src": "8697:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Bet_$348_storage_$",
                            "typeString": "mapping(uint256 => struct P2PBetting.Bet storage ref)"
                          }
                        },
                        "id": 904,
                        "indexExpression": {
                          "id": 903,
                          "name": "betId_",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 896,
                          "src": "8704:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "8697:14:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bet_$348_storage",
                          "typeString": "struct P2PBetting.Bet storage ref"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "8672:39:3"
                    },
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 909,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 906,
                            "name": "betSelected",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 901,
                            "src": "8725:11:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                              "typeString": "struct P2PBetting.Bet memory"
                            }
                          },
                          "id": 907,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "8737:15:3",
                          "memberName": "collateralGiven",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 323,
                          "src": "8725:27:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 908,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "8756:1:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "8725:32:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 914,
                      "nodeType": "IfStatement",
                      "src": "8721:117:3",
                      "trueBody": {
                        "id": 913,
                        "nodeType": "Block",
                        "src": "8760:78:3",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 910,
                                "name": "P2PBetting__AlreadyRetrievedOrBetNonexistent",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 251,
                                "src": "8781:44:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                  "typeString": "function () pure"
                                }
                              },
                              "id": 911,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8781:46:3",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 912,
                            "nodeType": "RevertStatement",
                            "src": "8774:53:3"
                          }
                        ]
                      }
                    },
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 920,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 917,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "8851:18:3",
                          "subExpression": {
                            "expression": {
                              "id": 915,
                              "name": "betSelected",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 901,
                              "src": "8852:11:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                                "typeString": "struct P2PBetting.Bet memory"
                              }
                            },
                            "id": 916,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "8864:5:3",
                            "memberName": "ended",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 345,
                            "src": "8852:17:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "expression": {
                            "id": 918,
                            "name": "betSelected",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 901,
                            "src": "8873:11:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                              "typeString": "struct P2PBetting.Bet memory"
                            }
                          },
                          "id": 919,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "8885:10:3",
                          "memberName": "tipsterWon",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 341,
                          "src": "8873:22:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "8851:44:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 925,
                      "nodeType": "IfStatement",
                      "src": "8847:118:3",
                      "trueBody": {
                        "id": 924,
                        "nodeType": "Block",
                        "src": "8896:69:3",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 921,
                                "name": "P2PBetting__OnlyCalledIfTipsterLost",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 253,
                                "src": "8917:35:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                  "typeString": "function () pure"
                                }
                              },
                              "id": 922,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8917:37:3",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 923,
                            "nodeType": "RevertStatement",
                            "src": "8910:44:3"
                          }
                        ]
                      }
                    },
                    {
                      "assignments": [
                        927
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 927,
                          "mutability": "mutable",
                          "name": "amountToTransferBack",
                          "nameLocation": "8982:20:3",
                          "nodeType": "VariableDeclaration",
                          "scope": 961,
                          "src": "8974:28:3",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 926,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "8974:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 944,
                      "initialValue": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 943,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 928,
                            "name": "betSelected",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 901,
                            "src": "9005:11:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                              "typeString": "struct P2PBetting.Bet memory"
                            }
                          },
                          "id": 929,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "9017:10:3",
                          "memberName": "moneyInBet",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 325,
                          "src": "9005:22:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "components": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 941,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "components": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 938,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "components": [
                                        {
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 934,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "expression": {
                                              "id": 930,
                                              "name": "betSelected",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 901,
                                              "src": "9032:11:3",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                                                "typeString": "struct P2PBetting.Bet memory"
                                              }
                                            },
                                            "id": 931,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberLocation": "9044:10:3",
                                            "memberName": "moneyInBet",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 325,
                                            "src": "9032:22:3",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "-",
                                          "rightExpression": {
                                            "expression": {
                                              "id": 932,
                                              "name": "betSelected",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 901,
                                              "src": "9057:11:3",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                                                "typeString": "struct P2PBetting.Bet memory"
                                              }
                                            },
                                            "id": 933,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberLocation": "9069:15:3",
                                            "memberName": "collateralGiven",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 323,
                                            "src": "9057:27:3",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "src": "9032:52:3",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "id": 935,
                                      "isConstant": false,
                                      "isInlineArray": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "TupleExpression",
                                      "src": "9031:54:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "*",
                                    "rightExpression": {
                                      "expression": {
                                        "id": 936,
                                        "name": "betSelected",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 901,
                                        "src": "9088:11:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                                          "typeString": "struct P2PBetting.Bet memory"
                                        }
                                      },
                                      "id": 937,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "9100:4:3",
                                      "memberName": "odds",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 335,
                                      "src": "9088:16:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "9031:73:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "id": 939,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "9030:75:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "/",
                              "rightExpression": {
                                "id": 940,
                                "name": "DECIMALS",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 295,
                                "src": "9106:8:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "9030:84:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "id": 942,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "9029:86:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "9005:110:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "8974:141:3"
                    },
                    {
                      "expression": {
                        "id": 950,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "expression": {
                            "baseExpression": {
                              "id": 945,
                              "name": "s_Bets",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 311,
                              "src": "9125:6:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Bet_$348_storage_$",
                                "typeString": "mapping(uint256 => struct P2PBetting.Bet storage ref)"
                              }
                            },
                            "id": 947,
                            "indexExpression": {
                              "id": 946,
                              "name": "betId_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 896,
                              "src": "9132:6:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "9125:14:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bet_$348_storage",
                              "typeString": "struct P2PBetting.Bet storage ref"
                            }
                          },
                          "id": 948,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "memberLocation": "9140:15:3",
                          "memberName": "collateralGiven",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 323,
                          "src": "9125:30:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "hexValue": "30",
                          "id": 949,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "9158:1:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "9125:34:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 951,
                      "nodeType": "ExpressionStatement",
                      "src": "9125:34:3"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 958,
                            "name": "amountToTransferBack",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 927,
                            "src": "9207:20:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 954,
                                  "name": "betSelected",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 901,
                                  "src": "9177:11:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                                    "typeString": "struct P2PBetting.Bet memory"
                                  }
                                },
                                "id": 955,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "9189:7:3",
                                "memberName": "tipster",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 321,
                                "src": "9177:19:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 953,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "9169:8:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_payable_$",
                                "typeString": "type(address payable)"
                              },
                              "typeName": {
                                "id": 952,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "9169:8:3",
                                "stateMutability": "payable",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 956,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9169:28:3",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "id": 957,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "9198:8:3",
                          "memberName": "transfer",
                          "nodeType": "MemberAccess",
                          "src": "9169:37:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                            "typeString": "function (uint256)"
                          }
                        },
                        "id": 959,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9169:59:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 960,
                      "nodeType": "ExpressionStatement",
                      "src": "9169:59:3"
                    }
                  ]
                },
                "functionSelector": "bf4e2858",
                "id": 962,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "getCollateralBack",
                "nameLocation": "8619:17:3",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 897,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 896,
                      "mutability": "mutable",
                      "name": "betId_",
                      "nameLocation": "8645:6:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 962,
                      "src": "8637:14:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 895,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "8637:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "8636:16:3"
                },
                "returnParameters": {
                  "id": 898,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "8662:0:3"
                },
                "scope": 1140,
                "src": "8610:625:3",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 982,
                  "nodeType": "Block",
                  "src": "9437:115:3",
                  "statements": [
                    {
                      "assignments": [
                        970
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 970,
                          "mutability": "mutable",
                          "name": "oldfee",
                          "nameLocation": "9455:6:3",
                          "nodeType": "VariableDeclaration",
                          "scope": 982,
                          "src": "9447:14:3",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 969,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "9447:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 972,
                      "initialValue": {
                        "id": 971,
                        "name": "s_fee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 297,
                        "src": "9464:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "9447:22:3"
                    },
                    {
                      "expression": {
                        "id": 975,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 973,
                          "name": "s_fee",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 297,
                          "src": "9479:5:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 974,
                          "name": "newFee",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 964,
                          "src": "9487:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "9479:14:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 976,
                      "nodeType": "ExpressionStatement",
                      "src": "9479:14:3"
                    },
                    {
                      "eventCall": {
                        "arguments": [
                          {
                            "id": 978,
                            "name": "oldfee",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 970,
                            "src": "9530:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 979,
                            "name": "newFee",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 964,
                            "src": "9538:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 977,
                          "name": "P2PBetting__NewFeeSet",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 259,
                          "src": "9508:21:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                            "typeString": "function (uint256,uint256)"
                          }
                        },
                        "id": 980,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9508:37:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 981,
                      "nodeType": "EmitStatement",
                      "src": "9503:42:3"
                    }
                  ]
                },
                "functionSelector": "69fe0e2d",
                "id": 983,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "id": 967,
                    "kind": "modifierInvocation",
                    "modifierName": {
                      "id": 966,
                      "name": "onlyOwner",
                      "nameLocations": [
                        "9427:9:3"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 104,
                      "src": "9427:9:3"
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "9427:9:3"
                  }
                ],
                "name": "setFee",
                "nameLocation": "9395:6:3",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 965,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 964,
                      "mutability": "mutable",
                      "name": "newFee",
                      "nameLocation": "9410:6:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 983,
                      "src": "9402:14:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 963,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "9402:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "9401:16:3"
                },
                "returnParameters": {
                  "id": 968,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "9437:0:3"
                },
                "scope": 1140,
                "src": "9386:166:3",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 1000,
                  "nodeType": "Block",
                  "src": "9618:118:3",
                  "statements": [
                    {
                      "expression": {
                        "id": 994,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 990,
                          "name": "USD_ETH_dataFeed",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 292,
                          "src": "9628:16:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_AggregatorV3Interface_$45",
                            "typeString": "contract AggregatorV3Interface"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "arguments": [
                            {
                              "id": 992,
                              "name": "newOracle",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 985,
                              "src": "9669:9:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 991,
                            "name": "AggregatorV3Interface",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 45,
                            "src": "9647:21:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_AggregatorV3Interface_$45_$",
                              "typeString": "type(contract AggregatorV3Interface)"
                            }
                          },
                          "id": 993,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9647:32:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_AggregatorV3Interface_$45",
                            "typeString": "contract AggregatorV3Interface"
                          }
                        },
                        "src": "9628:51:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_AggregatorV3Interface_$45",
                          "typeString": "contract AggregatorV3Interface"
                        }
                      },
                      "id": 995,
                      "nodeType": "ExpressionStatement",
                      "src": "9628:51:3"
                    },
                    {
                      "eventCall": {
                        "arguments": [
                          {
                            "id": 997,
                            "name": "newOracle",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 985,
                            "src": "9719:9:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 996,
                          "name": "P2PBetting__NewOracleSet",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 263,
                          "src": "9694:24:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 998,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9694:35:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 999,
                      "nodeType": "EmitStatement",
                      "src": "9689:40:3"
                    }
                  ]
                },
                "functionSelector": "b740af79",
                "id": 1001,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "id": 988,
                    "kind": "modifierInvocation",
                    "modifierName": {
                      "id": 987,
                      "name": "onlyOwner",
                      "nameLocations": [
                        "9608:9:3"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 104,
                      "src": "9608:9:3"
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "9608:9:3"
                  }
                ],
                "name": "setUsdOracle",
                "nameLocation": "9567:12:3",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 986,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 985,
                      "mutability": "mutable",
                      "name": "newOracle",
                      "nameLocation": "9588:9:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 1001,
                      "src": "9580:17:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 984,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "9580:7:3",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "9579:19:3"
                },
                "returnParameters": {
                  "id": 989,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "9618:0:3"
                },
                "scope": 1140,
                "src": "9558:178:3",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 1008,
                  "nodeType": "Block",
                  "src": "9937:29:3",
                  "statements": [
                    {
                      "expression": {
                        "id": 1006,
                        "name": "s_fee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 297,
                        "src": "9954:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 1005,
                      "id": 1007,
                      "nodeType": "Return",
                      "src": "9947:12:3"
                    }
                  ]
                },
                "functionSelector": "ced72f87",
                "id": 1009,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "getFee",
                "nameLocation": "9896:6:3",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1002,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "9902:2:3"
                },
                "returnParameters": {
                  "id": 1005,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1004,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 1009,
                      "src": "9928:7:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1003,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "9928:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "9927:9:3"
                },
                "scope": 1140,
                "src": "9887:79:3",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 1019,
                  "nodeType": "Block",
                  "src": "10025:49:3",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 1016,
                            "name": "USD_ETH_dataFeed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 292,
                            "src": "10050:16:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_AggregatorV3Interface_$45",
                              "typeString": "contract AggregatorV3Interface"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_AggregatorV3Interface_$45",
                              "typeString": "contract AggregatorV3Interface"
                            }
                          ],
                          "id": 1015,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "10042:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 1014,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "10042:7:3",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1017,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "10042:25:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "functionReturnParameters": 1013,
                      "id": 1018,
                      "nodeType": "Return",
                      "src": "10035:32:3"
                    }
                  ]
                },
                "functionSelector": "833b1fce",
                "id": 1020,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "getOracle",
                "nameLocation": "9981:9:3",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1010,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "9990:2:3"
                },
                "returnParameters": {
                  "id": 1013,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1012,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 1020,
                      "src": "10016:7:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1011,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "10016:7:3",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "10015:9:3"
                },
                "scope": 1140,
                "src": "9972:102:3",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 1032,
                  "nodeType": "Block",
                  "src": "10153:40:3",
                  "statements": [
                    {
                      "expression": {
                        "baseExpression": {
                          "id": 1028,
                          "name": "s_Profiles",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 306,
                          "src": "10170:10:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Profile_$317_storage_$",
                            "typeString": "mapping(address => struct P2PBetting.Profile storage ref)"
                          }
                        },
                        "id": 1030,
                        "indexExpression": {
                          "id": 1029,
                          "name": "user",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1022,
                          "src": "10181:4:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "10170:16:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Profile_$317_storage",
                          "typeString": "struct P2PBetting.Profile storage ref"
                        }
                      },
                      "functionReturnParameters": 1027,
                      "id": 1031,
                      "nodeType": "Return",
                      "src": "10163:23:3"
                    }
                  ]
                },
                "functionSelector": "0f53a470",
                "id": 1033,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "getProfile",
                "nameLocation": "10089:10:3",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1023,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1022,
                      "mutability": "mutable",
                      "name": "user",
                      "nameLocation": "10108:4:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 1033,
                      "src": "10100:12:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1021,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "10100:7:3",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "10099:14:3"
                },
                "returnParameters": {
                  "id": 1027,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1026,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 1033,
                      "src": "10137:14:3",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Profile_$317_memory_ptr",
                        "typeString": "struct P2PBetting.Profile"
                      },
                      "typeName": {
                        "id": 1025,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1024,
                          "name": "Profile",
                          "nameLocations": [
                            "10137:7:3"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 317,
                          "src": "10137:7:3"
                        },
                        "referencedDeclaration": 317,
                        "src": "10137:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Profile_$317_storage_ptr",
                          "typeString": "struct P2PBetting.Profile"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "10136:16:3"
                },
                "scope": 1140,
                "src": "10080:113:3",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 1045,
                  "nodeType": "Block",
                  "src": "10265:37:3",
                  "statements": [
                    {
                      "expression": {
                        "baseExpression": {
                          "id": 1041,
                          "name": "s_Bets",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 311,
                          "src": "10282:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Bet_$348_storage_$",
                            "typeString": "mapping(uint256 => struct P2PBetting.Bet storage ref)"
                          }
                        },
                        "id": 1043,
                        "indexExpression": {
                          "id": 1042,
                          "name": "betId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1035,
                          "src": "10289:5:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "10282:13:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bet_$348_storage",
                          "typeString": "struct P2PBetting.Bet storage ref"
                        }
                      },
                      "functionReturnParameters": 1040,
                      "id": 1044,
                      "nodeType": "Return",
                      "src": "10275:20:3"
                    }
                  ]
                },
                "functionSelector": "061e494f",
                "id": 1046,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "getBet",
                "nameLocation": "10208:6:3",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1036,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1035,
                      "mutability": "mutable",
                      "name": "betId",
                      "nameLocation": "10223:5:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 1046,
                      "src": "10215:13:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1034,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "10215:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "10214:15:3"
                },
                "returnParameters": {
                  "id": 1040,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1039,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 1046,
                      "src": "10253:10:3",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Bet_$348_memory_ptr",
                        "typeString": "struct P2PBetting.Bet"
                      },
                      "typeName": {
                        "id": 1038,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1037,
                          "name": "Bet",
                          "nameLocations": [
                            "10253:3:3"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 348,
                          "src": "10253:3:3"
                        },
                        "referencedDeclaration": 348,
                        "src": "10253:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bet_$348_storage_ptr",
                          "typeString": "struct P2PBetting.Bet"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "10252:12:3"
                },
                "scope": 1140,
                "src": "10199:103:3",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 1053,
                  "nodeType": "Block",
                  "src": "10368:37:3",
                  "statements": [
                    {
                      "expression": {
                        "id": 1051,
                        "name": "feesCollected",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 299,
                        "src": "10385:13:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 1050,
                      "id": 1052,
                      "nodeType": "Return",
                      "src": "10378:20:3"
                    }
                  ]
                },
                "functionSelector": "d4aae80f",
                "id": 1054,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "getFeesCollected",
                "nameLocation": "10317:16:3",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1047,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "10333:2:3"
                },
                "returnParameters": {
                  "id": 1050,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1049,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 1054,
                      "src": "10359:7:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1048,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "10359:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "10358:9:3"
                },
                "scope": 1140,
                "src": "10308:97:3",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 1096,
                  "nodeType": "Block",
                  "src": "10504:285:3",
                  "statements": [
                    {
                      "assignments": [
                        1065
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 1065,
                          "mutability": "mutable",
                          "name": "possibleAddresses",
                          "nameLocation": "10531:17:3",
                          "nodeType": "VariableDeclaration",
                          "scope": 1096,
                          "src": "10514:34:3",
                          "stateVariable": false,
                          "storageLocation": "memory",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                            "typeString": "address[]"
                          },
                          "typeName": {
                            "baseType": {
                              "id": 1063,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "10514:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 1064,
                            "nodeType": "ArrayTypeName",
                            "src": "10514:9:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                              "typeString": "address[]"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 1070,
                      "initialValue": {
                        "expression": {
                          "baseExpression": {
                            "id": 1066,
                            "name": "s_Bets",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 311,
                            "src": "10551:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Bet_$348_storage_$",
                              "typeString": "mapping(uint256 => struct P2PBetting.Bet storage ref)"
                            }
                          },
                          "id": 1068,
                          "indexExpression": {
                            "id": 1067,
                            "name": "betId_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1056,
                            "src": "10558:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "10551:14:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Bet_$348_storage",
                            "typeString": "struct P2PBetting.Bet storage ref"
                          }
                        },
                        "id": 1069,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "10566:11:3",
                        "memberName": "challengers",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 330,
                        "src": "10551:26:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage",
                          "typeString": "address[] storage ref"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "10514:63:3"
                    },
                    {
                      "body": {
                        "id": 1091,
                        "nodeType": "Block",
                        "src": "10635:105:3",
                        "statements": [
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 1086,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "baseExpression": {
                                  "id": 1081,
                                  "name": "possibleAddresses",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1065,
                                  "src": "10653:17:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                    "typeString": "address[] memory"
                                  }
                                },
                                "id": 1083,
                                "indexExpression": {
                                  "id": 1082,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1072,
                                  "src": "10671:1:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "10653:20:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "expression": {
                                  "id": 1084,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "10677:3:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1085,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "10681:6:3",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "10677:10:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "10653:34:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 1090,
                            "nodeType": "IfStatement",
                            "src": "10649:81:3",
                            "trueBody": {
                              "id": 1089,
                              "nodeType": "Block",
                              "src": "10689:41:3",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 1087,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1072,
                                    "src": "10714:1:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "functionReturnParameters": 1060,
                                  "id": 1088,
                                  "nodeType": "Return",
                                  "src": "10707:8:3"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1077,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1074,
                          "name": "i",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1072,
                          "src": "10600:1:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "expression": {
                            "id": 1075,
                            "name": "possibleAddresses",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1065,
                            "src": "10604:17:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                              "typeString": "address[] memory"
                            }
                          },
                          "id": 1076,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "10622:6:3",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "10604:24:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "10600:28:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 1092,
                      "initializationExpression": {
                        "assignments": [
                          1072
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1072,
                            "mutability": "mutable",
                            "name": "i",
                            "nameLocation": "10597:1:3",
                            "nodeType": "VariableDeclaration",
                            "scope": 1092,
                            "src": "10592:6:3",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1071,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "10592:4:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1073,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "10592:6:3"
                      },
                      "loopExpression": {
                        "expression": {
                          "id": 1079,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "++",
                          "prefix": false,
                          "src": "10630:3:3",
                          "subExpression": {
                            "id": 1078,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1072,
                            "src": "10630:1:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1080,
                        "nodeType": "ExpressionStatement",
                        "src": "10630:3:3"
                      },
                      "nodeType": "ForStatement",
                      "src": "10587:153:3"
                    },
                    {
                      "errorCall": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 1093,
                          "name": "P2PBetting__UserNotInBet",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 249,
                          "src": "10756:24:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_error_pure$__$returns$__$",
                            "typeString": "function () pure"
                          }
                        },
                        "id": 1094,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "10756:26:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1095,
                      "nodeType": "RevertStatement",
                      "src": "10749:33:3"
                    }
                  ]
                },
                "functionSelector": "f39522e4",
                "id": 1097,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "getNumberOfChallenger",
                "nameLocation": "10420:21:3",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1057,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1056,
                      "mutability": "mutable",
                      "name": "betId_",
                      "nameLocation": "10459:6:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 1097,
                      "src": "10451:14:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1055,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "10451:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "10441:30:3"
                },
                "returnParameters": {
                  "id": 1060,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1059,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 1097,
                      "src": "10495:7:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1058,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "10495:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "10494:9:3"
                },
                "scope": 1140,
                "src": "10411:378:3",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 1104,
                  "nodeType": "Block",
                  "src": "10854:40:3",
                  "statements": [
                    {
                      "expression": {
                        "id": 1102,
                        "name": "numberOfBetsDone",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 301,
                        "src": "10871:16:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 1101,
                      "id": 1103,
                      "nodeType": "Return",
                      "src": "10864:23:3"
                    }
                  ]
                },
                "functionSelector": "f222d0b9",
                "id": 1105,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "getNumberOfBets",
                "nameLocation": "10804:15:3",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1098,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "10819:2:3"
                },
                "returnParameters": {
                  "id": 1101,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1100,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 1105,
                      "src": "10845:7:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1099,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "10845:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "10844:9:3"
                },
                "scope": 1140,
                "src": "10795:99:3",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 1138,
                  "nodeType": "Block",
                  "src": "11030:309:3",
                  "statements": [
                    {
                      "assignments": [
                        null,
                        1113,
                        null,
                        null,
                        null
                      ],
                      "declarations": [
                        null,
                        {
                          "constant": false,
                          "id": 1113,
                          "mutability": "mutable",
                          "name": "answer",
                          "nameLocation": "11050:6:3",
                          "nodeType": "VariableDeclaration",
                          "scope": 1138,
                          "src": "11043:13:3",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          },
                          "typeName": {
                            "id": 1112,
                            "name": "int256",
                            "nodeType": "ElementaryTypeName",
                            "src": "11043:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_int256",
                              "typeString": "int256"
                            }
                          },
                          "visibility": "internal"
                        },
                        null,
                        null,
                        null
                      ],
                      "id": 1117,
                      "initialValue": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "expression": {
                            "id": 1114,
                            "name": "USD_ETH_dataFeed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 292,
                            "src": "11066:16:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_AggregatorV3Interface_$45",
                              "typeString": "contract AggregatorV3Interface"
                            }
                          },
                          "id": 1115,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "11083:15:3",
                          "memberName": "latestRoundData",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 44,
                          "src": "11066:32:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$__$returns$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
                            "typeString": "function () view external returns (uint80,int256,uint256,uint256,uint80)"
                          }
                        },
                        "id": 1116,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "11066:34:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
                          "typeString": "tuple(uint80,int256,uint256,uint256,uint80)"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "11040:60:3"
                    },
                    {
                      "assignments": [
                        1119
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 1119,
                          "mutability": "mutable",
                          "name": "ethPrice",
                          "nameLocation": "11118:8:3",
                          "nodeType": "VariableDeclaration",
                          "scope": 1138,
                          "src": "11110:16:3",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 1118,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "11110:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 1126,
                      "initialValue": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_int256",
                              "typeString": "int256"
                            },
                            "id": 1124,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 1122,
                              "name": "answer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1113,
                              "src": "11137:6:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_int256",
                                "typeString": "int256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "*",
                            "rightExpression": {
                              "hexValue": "3130303030303030303030",
                              "id": 1123,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "11146:11:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_10000000000_by_1",
                                "typeString": "int_const 10000000000"
                              },
                              "value": "10000000000"
                            },
                            "src": "11137:20:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_int256",
                              "typeString": "int256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_int256",
                              "typeString": "int256"
                            }
                          ],
                          "id": 1121,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "11129:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint256_$",
                            "typeString": "type(uint256)"
                          },
                          "typeName": {
                            "id": 1120,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "11129:7:3",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1125,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "11129:29:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "11110:48:3"
                    },
                    {
                      "assignments": [
                        1128
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 1128,
                          "mutability": "mutable",
                          "name": "ethAmount",
                          "nameLocation": "11265:9:3",
                          "nodeType": "VariableDeclaration",
                          "scope": 1138,
                          "src": "11257:17:3",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 1127,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "11257:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 1135,
                      "initialValue": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1134,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "components": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1131,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1129,
                                "name": "usdValue_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1107,
                                "src": "11278:9:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "*",
                              "rightExpression": {
                                "hexValue": "31653138",
                                "id": 1130,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "11290:4:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                  "typeString": "int_const 1000000000000000000"
                                },
                                "value": "1e18"
                              },
                              "src": "11278:16:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "id": 1132,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "11277:18:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "/",
                        "rightExpression": {
                          "id": 1133,
                          "name": "ethPrice",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1119,
                          "src": "11298:8:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "11277:29:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "11257:49:3"
                    },
                    {
                      "expression": {
                        "id": 1136,
                        "name": "ethAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1128,
                        "src": "11323:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 1111,
                      "id": 1137,
                      "nodeType": "Return",
                      "src": "11316:16:3"
                    }
                  ]
                },
                "functionSelector": "2ddd9aff",
                "id": 1139,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "getUsdConversionRate",
                "nameLocation": "10944:20:3",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1108,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1107,
                      "mutability": "mutable",
                      "name": "usdValue_",
                      "nameLocation": "10982:9:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 1139,
                      "src": "10974:17:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1106,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "10974:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "10964:33:3"
                },
                "returnParameters": {
                  "id": 1111,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1110,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 1139,
                      "src": "11021:7:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1109,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "11021:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "11020:9:3"
                },
                "scope": 1140,
                "src": "10935:404:3",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              }
            ],
            "scope": 1141,
            "src": "233:11108:3",
            "usedErrors": [
              59,
              64,
              233,
              235,
              237,
              239,
              241,
              243,
              245,
              247,
              249,
              251,
              253
            ],
            "usedEvents": [
              70,
              259,
              263,
              273,
              277,
              283,
              289
            ]
          }
        ],
        "src": "33:11309:3"
      }
    }
  },
  "errors": [
    {
      "component": "general",
      "errorCode": null,
      "formattedMessage": "\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: It looks like you are using '<address payable>.send/transfer(<X>)' without providing    │\n│ the gas amount. Such calls will fail depending on the pubdata costs.                             │\n│ This might be a false positive if you are using an interface (like IERC20) instead of the        │\n│ native Solidity `send/transfer`.                                                                 │\n│ Please use 'payable(<address>).call{value: <X>}(\"\")' instead, but be careful with the reentrancy │\n│ attack. `send` and `transfer` send limited amount of gas that prevents reentrancy, whereas       │\n│ `<address>.call{value: <X>}` sends all gas to the callee. Learn more on                          │\n│ https://docs.soliditylang.org/en/latest/security-considerations.html#reentrancy                  │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘\n--> src/P2PBetting.sol\n",
      "message": "\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: It looks like you are using '<address payable>.send/transfer(<X>)' without providing    │\n│ the gas amount. Such calls will fail depending on the pubdata costs.                             │\n│ This might be a false positive if you are using an interface (like IERC20) instead of the        │\n│ native Solidity `send/transfer`.                                                                 │\n│ Please use 'payable(<address>).call{value: <X>}(\"\")' instead, but be careful with the reentrancy │\n│ attack. `send` and `transfer` send limited amount of gas that prevents reentrancy, whereas       │\n│ `<address>.call{value: <X>}` sends all gas to the callee. Learn more on                          │\n│ https://docs.soliditylang.org/en/latest/security-considerations.html#reentrancy                  │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘",
      "severity": "warning",
      "sourceLocation": {
        "file": "3",
        "start": 7278,
        "end": 7323
      },
      "type": "Warning"
    },
    {
      "component": "general",
      "errorCode": null,
      "formattedMessage": "\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: It looks like you are using '<address payable>.send/transfer(<X>)' without providing    │\n│ the gas amount. Such calls will fail depending on the pubdata costs.                             │\n│ This might be a false positive if you are using an interface (like IERC20) instead of the        │\n│ native Solidity `send/transfer`.                                                                 │\n│ Please use 'payable(<address>).call{value: <X>}(\"\")' instead, but be careful with the reentrancy │\n│ attack. `send` and `transfer` send limited amount of gas that prevents reentrancy, whereas       │\n│ `<address>.call{value: <X>}` sends all gas to the callee. Learn more on                          │\n│ https://docs.soliditylang.org/en/latest/security-considerations.html#reentrancy                  │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘\n--> src/P2PBetting.sol\n",
      "message": "\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: It looks like you are using '<address payable>.send/transfer(<X>)' without providing    │\n│ the gas amount. Such calls will fail depending on the pubdata costs.                             │\n│ This might be a false positive if you are using an interface (like IERC20) instead of the        │\n│ native Solidity `send/transfer`.                                                                 │\n│ Please use 'payable(<address>).call{value: <X>}(\"\")' instead, but be careful with the reentrancy │\n│ attack. `send` and `transfer` send limited amount of gas that prevents reentrancy, whereas       │\n│ `<address>.call{value: <X>}` sends all gas to the callee. Learn more on                          │\n│ https://docs.soliditylang.org/en/latest/security-considerations.html#reentrancy                  │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘",
      "severity": "warning",
      "sourceLocation": {
        "file": "3",
        "start": 9169,
        "end": 9228
      },
      "type": "Warning"
    }
  ],
  "version": "0.8.20",
  "long_version": "0.8.20+commit.a1b79de6.Linux.g++",
  "zk_version": "1.4.0"
}